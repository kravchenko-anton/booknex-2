"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@anatine";
exports.ids = ["vendor-chunks/@anatine"];
exports.modules = {

/***/ "(ssr)/../../node_modules/@anatine/zod-openapi/src/index.js":
/*!************************************************************!*\
  !*** ../../node_modules/@anatine/zod-openapi/src/index.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./lib/zod-openapi */ \"(ssr)/../../node_modules/@anatine/zod-openapi/src/lib/zod-openapi.js\"), exports);\n__exportStar(__webpack_require__(/*! ./lib/zod-extensions */ \"(ssr)/../../node_modules/@anatine/zod-openapi/src/lib/zod-extensions.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbmF0aW5lL3pvZC1vcGVuYXBpL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMsK0ZBQW1CO0FBQ3hDLGFBQWEsbUJBQU8sQ0FBQyxxR0FBc0I7QUFDM0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vLi4vbm9kZV9tb2R1bGVzL0BhbmF0aW5lL3pvZC1vcGVuYXBpL3NyYy9pbmRleC5qcz82ZTZhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbGliL3pvZC1vcGVuYXBpXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9saWIvem9kLWV4dGVuc2lvbnNcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@anatine/zod-openapi/src/index.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@anatine/zod-openapi/src/lib/zod-extensions.js":
/*!*************************************************************************!*\
  !*** ../../node_modules/@anatine/zod-openapi/src/lib/zod-extensions.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\nThis code is heavily inspired by https://github.com/asteasolutions/zod-to-openapi/blob/master/src/zod-extensions.ts\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.extendZodWithOpenApi = void 0;\nconst zod_openapi_1 = __webpack_require__(/*! ./zod-openapi */ \"(ssr)/../../node_modules/@anatine/zod-openapi/src/lib/zod-openapi.js\");\nfunction extendZodWithOpenApi(zod, forceOverride = false) {\n    if (!forceOverride && typeof zod.ZodSchema.prototype.openapi !== 'undefined') {\n        // This zod instance is already extended with the required methods,\n        // doing it again will just result in multiple wrapper methods for\n        // `optional` and `nullable`\n        return;\n    }\n    zod.ZodSchema.prototype.openapi = function (metadata) {\n        return (0, zod_openapi_1.extendApi)(this, metadata);\n    };\n}\nexports.extendZodWithOpenApi = extendZodWithOpenApi;\n//# sourceMappingURL=zod-extensions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbmF0aW5lL3pvZC1vcGVuYXBpL3NyYy9saWIvem9kLWV4dGVuc2lvbnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCO0FBQzVCLHNCQUFzQixtQkFBTyxDQUFDLDJGQUFlO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vLi4vbm9kZV9tb2R1bGVzL0BhbmF0aW5lL3pvZC1vcGVuYXBpL3NyYy9saWIvem9kLWV4dGVuc2lvbnMuanM/ZTg1YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG5UaGlzIGNvZGUgaXMgaGVhdmlseSBpbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vYXN0ZWFzb2x1dGlvbnMvem9kLXRvLW9wZW5hcGkvYmxvYi9tYXN0ZXIvc3JjL3pvZC1leHRlbnNpb25zLnRzXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZXh0ZW5kWm9kV2l0aE9wZW5BcGkgPSB2b2lkIDA7XG5jb25zdCB6b2Rfb3BlbmFwaV8xID0gcmVxdWlyZShcIi4vem9kLW9wZW5hcGlcIik7XG5mdW5jdGlvbiBleHRlbmRab2RXaXRoT3BlbkFwaSh6b2QsIGZvcmNlT3ZlcnJpZGUgPSBmYWxzZSkge1xuICAgIGlmICghZm9yY2VPdmVycmlkZSAmJiB0eXBlb2Ygem9kLlpvZFNjaGVtYS5wcm90b3R5cGUub3BlbmFwaSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gVGhpcyB6b2QgaW5zdGFuY2UgaXMgYWxyZWFkeSBleHRlbmRlZCB3aXRoIHRoZSByZXF1aXJlZCBtZXRob2RzLFxuICAgICAgICAvLyBkb2luZyBpdCBhZ2FpbiB3aWxsIGp1c3QgcmVzdWx0IGluIG11bHRpcGxlIHdyYXBwZXIgbWV0aG9kcyBmb3JcbiAgICAgICAgLy8gYG9wdGlvbmFsYCBhbmQgYG51bGxhYmxlYFxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHpvZC5ab2RTY2hlbWEucHJvdG90eXBlLm9wZW5hcGkgPSBmdW5jdGlvbiAobWV0YWRhdGEpIHtcbiAgICAgICAgcmV0dXJuICgwLCB6b2Rfb3BlbmFwaV8xLmV4dGVuZEFwaSkodGhpcywgbWV0YWRhdGEpO1xuICAgIH07XG59XG5leHBvcnRzLmV4dGVuZFpvZFdpdGhPcGVuQXBpID0gZXh0ZW5kWm9kV2l0aE9wZW5BcGk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD16b2QtZXh0ZW5zaW9ucy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@anatine/zod-openapi/src/lib/zod-extensions.js\n");

/***/ }),

/***/ "(ssr)/../../node_modules/@anatine/zod-openapi/src/lib/zod-openapi.js":
/*!**********************************************************************!*\
  !*** ../../node_modules/@anatine/zod-openapi/src/lib/zod-openapi.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.generateSchema = exports.extendApi = void 0;\nconst ts_deepmerge_1 = __webpack_require__(/*! ts-deepmerge */ \"(ssr)/../../node_modules/ts-deepmerge/cjs/index.js\");\nconst zod_1 = __webpack_require__(/*! zod */ \"(ssr)/../../node_modules/zod/lib/index.js\");\nfunction extendApi(schema, schemaObject = {}) {\n    const This = schema.constructor;\n    const newSchema = new This(schema._def);\n    newSchema.metaOpenApi = Object.assign({}, schema.metaOpenApi || {}, schemaObject);\n    return newSchema;\n}\nexports.extendApi = extendApi;\nfunction iterateZodObject({ zodRef, useOutput, hideDefinitions, }) {\n    const reduced = Object.keys(zodRef.shape)\n        .filter((key) => (hideDefinitions === null || hideDefinitions === void 0 ? void 0 : hideDefinitions.includes(key)) === false)\n        .reduce((carry, key) => (Object.assign(Object.assign({}, carry), { [key]: generateSchema(zodRef.shape[key], useOutput) })), {});\n    return reduced;\n}\nfunction parseTransformation({ zodRef, schemas, useOutput, }) {\n    const input = generateSchema(zodRef._def.schema, useOutput);\n    let output = 'undefined';\n    if (useOutput && zodRef._def.effect) {\n        const effect = zodRef._def.effect.type === 'transform' ? zodRef._def.effect : null;\n        if (effect && 'transform' in effect) {\n            try {\n                // todo: this doesn't deal with nullable types very well\n                // @ts-expect-error because we try/catch for a missing type\n                const type = input.type[0];\n                output = typeof effect.transform(['integer', 'number'].includes(`${type}`)\n                    ? 0\n                    : 'string' === type\n                        ? ''\n                        : 'boolean' === type\n                            ? false\n                            : 'object' === type\n                                ? {}\n                                : 'null' === type\n                                    ? null\n                                    : 'array' === type\n                                        ? []\n                                        : undefined, { addIssue: () => undefined, path: [] } // TODO: Discover if context is necessary here\n                );\n            }\n            catch (e) {\n                /**/\n            }\n        }\n    }\n    return (0, ts_deepmerge_1.default)(Object.assign(Object.assign(Object.assign({}, (zodRef.description ? { description: zodRef.description } : {})), input), (['number', 'string', 'boolean', 'null'].includes(output)\n        ? {\n            type: [output],\n        }\n        : {})), ...schemas);\n}\nfunction parseString({ zodRef, schemas, }) {\n    const baseSchema = {\n        type: ['string'],\n    };\n    const { checks = [] } = zodRef._def;\n    checks.forEach((item) => {\n        switch (item.kind) {\n            case 'email':\n                baseSchema.format = 'email';\n                break;\n            case 'uuid':\n                baseSchema.format = 'uuid';\n                break;\n            case 'cuid':\n                baseSchema.format = 'cuid';\n                break;\n            case 'url':\n                baseSchema.format = 'uri';\n                break;\n            case 'datetime':\n                baseSchema.format = 'date-time';\n                break;\n            case 'length':\n                baseSchema.minLength = item.value;\n                baseSchema.maxLength = item.value;\n                break;\n            case 'max':\n                baseSchema.maxLength = item.value;\n                break;\n            case 'min':\n                baseSchema.minLength = item.value;\n                break;\n            case 'regex':\n                baseSchema.pattern = item.regex.source;\n                break;\n        }\n    });\n    return (0, ts_deepmerge_1.default)(baseSchema, zodRef.description ? { description: zodRef.description } : {}, ...schemas);\n}\nfunction parseNumber({ zodRef, schemas, }) {\n    const baseSchema = {\n        type: ['number'],\n    };\n    const { checks = [] } = zodRef._def;\n    checks.forEach((item) => {\n        switch (item.kind) {\n            case 'max':\n                if (item.inclusive)\n                    baseSchema.maximum = item.value;\n                else\n                    baseSchema.exclusiveMaximum = item.value;\n                break;\n            case 'min':\n                if (item.inclusive)\n                    baseSchema.minimum = item.value;\n                else\n                    baseSchema.exclusiveMinimum = item.value;\n                break;\n            case 'int':\n                baseSchema.type = ['integer'];\n                break;\n            case 'multipleOf':\n                baseSchema.multipleOf = item.value;\n                break;\n        }\n    });\n    return (0, ts_deepmerge_1.default)(baseSchema, zodRef.description ? { description: zodRef.description } : {}, ...schemas);\n}\nfunction getExcludedDefinitionsFromSchema(schemas) {\n    const excludedDefinitions = [];\n    for (const schema of schemas) {\n        if (Array.isArray(schema.hideDefinitions)) {\n            excludedDefinitions.push(...schema.hideDefinitions);\n        }\n    }\n    return excludedDefinitions;\n}\nfunction parseObject({ zodRef, schemas, useOutput, hideDefinitions, }) {\n    var _a;\n    let additionalProperties;\n    // `catchall` obviates `strict`, `strip`, and `passthrough`\n    if (!(zodRef._def.catchall instanceof zod_1.z.ZodNever ||\n        ((_a = zodRef._def.catchall) === null || _a === void 0 ? void 0 : _a._def.typeName) === 'ZodNever'))\n        additionalProperties = generateSchema(zodRef._def.catchall, useOutput);\n    else if (zodRef._def.unknownKeys === 'passthrough')\n        additionalProperties = true;\n    else if (zodRef._def.unknownKeys === 'strict')\n        additionalProperties = false;\n    // So that `undefined` values don't end up in the schema and be weird\n    additionalProperties =\n        additionalProperties != null ? { additionalProperties } : {};\n    const requiredProperties = Object.keys(zodRef.shape).filter((key) => {\n        const item = zodRef.shape[key];\n        return (!(item.isOptional() ||\n            item instanceof zod_1.z.ZodDefault ||\n            item._def.typeName === 'ZodDefault') && !(item instanceof zod_1.z.ZodNever || item._def.typeName === 'ZodDefault'));\n    });\n    const required = requiredProperties.length > 0 ? { required: requiredProperties } : {};\n    return (0, ts_deepmerge_1.default)(Object.assign(Object.assign(Object.assign({ type: ['object'], properties: iterateZodObject({\n            zodRef: zodRef,\n            schemas,\n            useOutput,\n            hideDefinitions: getExcludedDefinitionsFromSchema(schemas),\n        }) }, required), additionalProperties), hideDefinitions), zodRef.description ? { description: zodRef.description, hideDefinitions } : {}, ...schemas);\n}\nfunction parseRecord({ zodRef, schemas, useOutput, }) {\n    return (0, ts_deepmerge_1.default)({\n        type: ['object'],\n        additionalProperties: zodRef._def.valueType instanceof zod_1.z.ZodUnknown\n            ? {}\n            : generateSchema(zodRef._def.valueType, useOutput),\n    }, zodRef.description ? { description: zodRef.description } : {}, ...schemas);\n}\nfunction parseBigInt({ zodRef, schemas, }) {\n    return (0, ts_deepmerge_1.default)({ type: ['integer'], format: 'int64' }, zodRef.description ? { description: zodRef.description } : {}, ...schemas);\n}\nfunction parseBoolean({ zodRef, schemas, }) {\n    return (0, ts_deepmerge_1.default)({ type: ['boolean'] }, zodRef.description ? { description: zodRef.description } : {}, ...schemas);\n}\nfunction parseDate({ zodRef, schemas }) {\n    return (0, ts_deepmerge_1.default)({ type: ['string'], format: 'date-time' }, zodRef.description ? { description: zodRef.description } : {}, ...schemas);\n}\nfunction parseNull({ zodRef, schemas }) {\n    return (0, ts_deepmerge_1.default)({\n        type: ['string', 'null'],\n        enum: ['null'],\n    }, zodRef.description ? { description: zodRef.description } : {}, ...schemas);\n}\nfunction parseOptional({ schemas, zodRef, useOutput, }) {\n    return (0, ts_deepmerge_1.default)(generateSchema(zodRef.unwrap(), useOutput), zodRef.description ? { description: zodRef.description } : {}, ...schemas);\n}\nfunction parseNullable({ schemas, zodRef, useOutput, }) {\n    const schema = generateSchema(zodRef.unwrap(), useOutput);\n    return (0, ts_deepmerge_1.default)(schema, { type: ['null'] }, zodRef.description ? { description: zodRef.description } : {}, ...schemas);\n}\nfunction parseDefault({ schemas, zodRef, useOutput, }) {\n    return (0, ts_deepmerge_1.default)(Object.assign({ default: zodRef._def.defaultValue() }, generateSchema(zodRef._def.innerType, useOutput)), zodRef.description ? { description: zodRef.description } : {}, ...schemas);\n}\nfunction parseArray({ schemas, zodRef, useOutput, }) {\n    const constraints = {};\n    if (zodRef._def.exactLength != null) {\n        constraints.minItems = zodRef._def.exactLength.value;\n        constraints.maxItems = zodRef._def.exactLength.value;\n    }\n    if (zodRef._def.minLength != null)\n        constraints.minItems = zodRef._def.minLength.value;\n    if (zodRef._def.maxLength != null)\n        constraints.maxItems = zodRef._def.maxLength.value;\n    return (0, ts_deepmerge_1.default)(Object.assign({ type: ['array'], items: generateSchema(zodRef.element, useOutput) }, constraints), zodRef.description ? { description: zodRef.description } : {}, ...schemas);\n}\nfunction parseLiteral({ schemas, zodRef, }) {\n    return (0, ts_deepmerge_1.default)({\n        type: [typeof zodRef._def.value],\n        enum: [zodRef._def.value],\n    }, zodRef.description ? { description: zodRef.description } : {}, ...schemas);\n}\nfunction parseEnum({ schemas, zodRef, }) {\n    return (0, ts_deepmerge_1.default)({\n        type: [typeof Object.values(zodRef._def.values)[0]],\n        enum: Object.values(zodRef._def.values),\n    }, zodRef.description ? { description: zodRef.description } : {}, ...schemas);\n}\nfunction parseIntersection({ schemas, zodRef, useOutput, }) {\n    return (0, ts_deepmerge_1.default)({\n        allOf: [\n            generateSchema(zodRef._def.left, useOutput),\n            generateSchema(zodRef._def.right, useOutput),\n        ],\n    }, zodRef.description ? { description: zodRef.description } : {}, ...schemas);\n}\nfunction parseUnion({ schemas, zodRef, useOutput, }) {\n    const contents = zodRef._def.options;\n    if (contents.reduce((prev, content) => prev && content._def.typeName === 'ZodLiteral', true)) {\n        // special case to transform unions of literals into enums\n        const literals = contents;\n        const type = literals.reduce((prev, content) => !prev || prev === typeof content._def.value\n            ? typeof content._def.value\n            : null, null);\n        if (type) {\n            return (0, ts_deepmerge_1.default)({\n                type: [type],\n                enum: literals.map((literal) => literal._def.value),\n            }, zodRef.description ? { description: zodRef.description } : {}, ...schemas);\n        }\n    }\n    return (0, ts_deepmerge_1.default)({\n        oneOf: contents.map((schema) => generateSchema(schema, useOutput)),\n    }, zodRef.description ? { description: zodRef.description } : {}, ...schemas);\n}\nfunction parseDiscriminatedUnion({ schemas, zodRef, useOutput, }) {\n    return (0, ts_deepmerge_1.default)({\n        discriminator: {\n            propertyName: zodRef._def.discriminator,\n        },\n        oneOf: Array.from(zodRef._def.options.values()).map((schema) => generateSchema(schema, useOutput)),\n    }, zodRef.description ? { description: zodRef.description } : {}, ...schemas);\n}\nfunction parseNever({ zodRef, schemas, }) {\n    return (0, ts_deepmerge_1.default)({ readOnly: true }, zodRef.description ? { description: zodRef.description } : {}, ...schemas);\n}\nfunction parseBranded({ schemas, zodRef, }) {\n    return (0, ts_deepmerge_1.default)(generateSchema(zodRef._def.type), ...schemas);\n}\nfunction catchAllParser({ zodRef, schemas, }) {\n    return (0, ts_deepmerge_1.default)(zodRef.description ? { description: zodRef.description } : {}, ...schemas);\n}\nfunction parsePipeline({ schemas, zodRef, useOutput, }) {\n    return (0, ts_deepmerge_1.default)(generateSchema(useOutput ? zodRef._def.out : zodRef._def.in, useOutput), ...schemas);\n}\nfunction parseReadonly({ zodRef, useOutput, schemas, }) {\n    return (0, ts_deepmerge_1.default)(generateSchema(zodRef._def.innerType, useOutput), zodRef.description ? { description: zodRef.description } : {}, ...schemas);\n}\nconst workerMap = {\n    ZodObject: parseObject,\n    ZodRecord: parseRecord,\n    ZodString: parseString,\n    ZodNumber: parseNumber,\n    ZodBigInt: parseBigInt,\n    ZodBoolean: parseBoolean,\n    ZodDate: parseDate,\n    ZodNull: parseNull,\n    ZodOptional: parseOptional,\n    ZodNullable: parseNullable,\n    ZodDefault: parseDefault,\n    ZodArray: parseArray,\n    ZodLiteral: parseLiteral,\n    ZodEnum: parseEnum,\n    ZodNativeEnum: parseEnum,\n    ZodTransformer: parseTransformation,\n    ZodEffects: parseTransformation,\n    ZodIntersection: parseIntersection,\n    ZodUnion: parseUnion,\n    ZodDiscriminatedUnion: parseDiscriminatedUnion,\n    ZodNever: parseNever,\n    ZodBranded: parseBranded,\n    // TODO Transform the rest to schemas\n    ZodUndefined: catchAllParser,\n    // TODO: `prefixItems` is allowed in OpenAPI 3.1 which can be used to create tuples\n    ZodTuple: catchAllParser,\n    ZodMap: catchAllParser,\n    ZodFunction: catchAllParser,\n    ZodLazy: catchAllParser,\n    ZodPromise: catchAllParser,\n    ZodAny: catchAllParser,\n    ZodUnknown: catchAllParser,\n    ZodVoid: catchAllParser,\n    ZodPipeline: parsePipeline,\n    ZodReadonly: parseReadonly,\n};\nfunction generateSchema(zodRef, useOutput) {\n    const { metaOpenApi = {} } = zodRef;\n    const schemas = [\n        ...(Array.isArray(metaOpenApi) ? metaOpenApi : [metaOpenApi]),\n    ];\n    try {\n        const typeName = zodRef._def.typeName;\n        if (typeName in workerMap) {\n            return workerMap[typeName]({\n                zodRef: zodRef,\n                schemas,\n                useOutput,\n            });\n        }\n        return catchAllParser({ zodRef, schemas });\n    }\n    catch (err) {\n        console.error(err);\n        return catchAllParser({ zodRef, schemas });\n    }\n}\nexports.generateSchema = generateSchema;\n//# sourceMappingURL=zod-openapi.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/@anatine/zod-openapi/src/lib/zod-openapi.js\n");

/***/ })

};
;