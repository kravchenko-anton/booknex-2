generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Genre {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  color     String   @default("#22333b")
  users     User[]
  books     Book[]   @relation("BookGenre")
  similarBy Genre[]  @relation("Similar")
  similar   Genre[]  @relation("Similar")
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bookId    Int
  userId    Int
  emotionId Int
  text      String
  tags      String[]
  emotion   Emotion? @relation(fields: [emotionId], references: [id])
  book      Book     @relation(fields: [bookId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Emotion {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  path      String
  Review    Review[]
}

model History {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  time      Int // Duration in milliseconds
  book      Book     @relation(fields: [bookId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  bookId    Int
}

model Book {
  id              Int          @id @default(autoincrement())
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  title           String       @unique
  author          Author       @relation(fields: [authorId], references: [id])
  description     String
  picture         String
  charapters      Json[]
  file            String
  color           String       @default("#264653")
  pages           Int
  likedPercentage Int
  visible         Boolean      @default(true)
  popularity      Int          @default(0)
  histories       History[]
  genre           Genre        @relation("BookGenre", fields: [genreId], references: [id])
  reviews         Review[]
  shelves         Shelf[]
  finishedBy      User[]       @relation("FinishedBooks")
  readingBy       User[]       @relation("ReadingBooks")
  authorId        Int
  genreId         Int
  complaints      complaints[]
}

model complaints {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
  book      Book?    @relation(fields: [bookId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  bookId    Int?
  userId    Int
}

model Author {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String   @unique
  picture     String
  color       String   @default("#252422")
  description String
  books       Book[]
}

model User {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  email          String       @unique
  name           String?
  picture        String?
  password       String
  isAdmin        Boolean      @default(false)
  history        History[]
  review         Review[]
  selectedGenre  Genre[]
  finishedBooks  Book[]       @relation("FinishedBooks")
  readingBooks   Book[]       @relation("ReadingBooks")
  watchedShelves Shelf[]      @relation("WatchedShelves")
  hiddenShelves  Shelf[]      @relation("HhiddenShelves")
  complaints     complaints[]
}

model Shelf {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String   @unique
  description String?  @default("")
  picture     String   @default("")
  watched     User[]   @relation("WatchedShelves")
  hidden      User[]   @relation("HhiddenShelves")
  books       Book[]
}
