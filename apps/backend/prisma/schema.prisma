generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Genre {
  id            String         @id @default(uuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  slug          String         @unique
  name          String         @unique
  icon          String         @default("")
  emoji         String         @default("")
  users         User[]
  books         Book[]         @relation("BookGenre")
  mainBooks     Book[]         @relation("BookMajorGenre")
  bookTemplates BookTemplate[]

  @@index([slug], name: "genre_slug_index")
}

model Author {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  books     Book[]

  @@index([name], name: "author_name_index")
}

model Book {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @unique
  slug      String   @unique

  description   String
  recommendable Boolean @default(true)

  picture String
  ebook   String

  // Minutes
  readingTime    Int              @default(0)
  // Chapters count
  chapters       Int              @default(0)
  pagesCount     Int              @default(0)
  rating         Float            @default(0)
  isPublic       Boolean          @default(false)
  mainGenreId    String
  mainGenre      Genre            @relation("BookMajorGenre", fields: [mainGenreId], references: [id])
  genres         Genre[]          @relation("BookGenre")
  finishedBy     User[]           @relation("FinishedBooks")
  savedBy        User[]           @relation("SavedBooks")
  readingBy      User[]           @relation("ReadingBooks")
  readingHistory ReadingHistory[]
  reactions      Reaction[]
  similarBooks   Book[]           @relation("SimilarBooks")
  similarBy      Book[]           @relation("SimilarBooks")
  Collections    Collection[]
  keyPoints      String

  author   Author @relation(fields: [authorId], references: [id])
  authorId String

  @@index([slug], name: "book_slug_index")
}

model Collection {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String   @unique
  slug        String   @unique
  description String
  banner      String
  books       Book[]

  @@index([slug], name: "collection_slug_index")
}

model Reaction {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  type        String
  description String?
  text        String
  xpath       String
  startOffset Int
  endOffset   Int
  user        User     @relation(fields: [userId], references: [id])
  book        Book     @relation(fields: [bookSlug], references: [slug])
  userId      String
  bookSlug    String

  @@index([id], name: "reaction_id_index")
}

model BookTemplate {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String   @unique
  slug        String   @unique
  author      String
  description String
  picture     String
  rating      Float    @default(0)
  genres      Genre[]

  @@index([slug], name: "book_template_slug_index")
}

model User {
  id             String           @id @default(uuid())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  email          String           @unique
  goalMinutes    Int              @default(10)
  socialId       String?          @unique
  password       String?
  authType       AuthType         @default(email)
  selectedGenres Genre[]
  reactions      Reaction[]
  picture        String           @default("fallback.png")
  fullName       String           @default("unknown")
  location       String           @default("unknown")
  role           Role             @default(user)
  savedBooks     Book[]           @relation("SavedBooks")
  finishedBooks  Book[]           @relation("FinishedBooks")
  readingBooks   Book[]           @relation("ReadingBooks")
  readingHistory ReadingHistory[]

  @@index([id], name: "user_id_index")
}

model ReadingHistory {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  startDate      DateTime
  endDate        DateTime
  readingTimeMs  Int
  scrollPosition Int
  startProgress  Float
  endProgress    Float
  progressDelta  Float
  book           Book     @relation(fields: [bookSlug], references: [slug])
  user           User     @relation(fields: [userId], references: [id])
  bookSlug       String
  userId         String

  @@index([userId], name: "reading_history_user_id_index")
}

enum Role {
  user
  admin
}

enum StorageFolderEnum {
  ebooks
  booksCovers
}

enum AuthType {
  email
  google
}
