generator client {
  provider = "prisma-client-js"
}
generator json {
  provider = "prisma-json-types-generator"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Genre {
  id             Int            @id @default(autoincrement())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  name           String         @unique
  description    String         @default("")
  users          User[]
  books          Book[]         @relation("BookGenre")
  majorBooks     Book[]         @relation("BookMajorGenre")
  similarBy      Genre[]        @relation("Similar")
  similar        Genre[]        @relation("Similar")
  bookTemplates      BookTemplate[]
  activities  Activity[]
}

model Activity {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  book      Book?    @relation(fields: [bookId], references: [id])
  genre     Genre?   @relation(fields: [genreId], references: [id])
  collection Collection? @relation(fields: [collectionId], references: [id])
  collectionId Int?
  genreId      Int?
  authorId  Int?
  bookId    Int?
  userId    Int
  type      String
  user      User     @relation(fields: [userId], references: [id])
}

model Feedback {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rating    Int
  tags      String[]
  text      String
  book      Book     @relation(fields: [bookId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  bookId    Int
  userId    Int
}



model Book {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String   @unique
  author      String
  description String
  picture     String
  ebook       String
  pages       Int
  popularity  Int          @default(0)
  visible     Boolean      @default(false)
  majorGenre  Genre        @relation("BookMajorGenre", fields: [mainGenreId], references: [id])
  genres      Genre[]      @relation("BookGenre")
  feedback    Feedback[]
  shelves     Collection[]
  finishedBy  User[]       @relation("FinishedBooks")
  savedBy     User[]       @relation("SavedBooks")
  readingBy   User[]       @relation("ReadingBooks")
  mainGenreId Int
  complaints  Complaint[]
  activities  Activity[]
}

model BookTemplate {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  title             String   @unique
  author        String
  description       String
  picture           String
  pages             Int
  popularity        Int

  genres Genre[]
}

model Complaint {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
  book      Book?    @relation(fields: [bookId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  bookId    Int?
  userId    Int
}

model User {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  email          String       @unique
  password       String
  isAdmin        Boolean      @default(false)
  selectedGenres  Genre[]
  feedback       Feedback[]
  savedBooks     Book[]       @relation("SavedBooks")
  finishedBooks  Book[]       @relation("FinishedBooks")
  readingBooks   Book[]       @relation("ReadingBooks")
  complaints     Complaint[]
  activity       Activity[]
}

model Collection {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String   @unique
  description String?  @default("")
  picture     String   @default("")
  books       Book[]
  activities  Activity[]
}
