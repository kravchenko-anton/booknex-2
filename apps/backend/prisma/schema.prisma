generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Genre {
  id             Int            @id @default(autoincrement())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  name           String         @unique
  color          String         @default("#22333b")
  users          User[]
  goodReadsBooks GoodReadBook[]
  books          Book[]         @relation("BookGenre")
  majorBooks     Book[]         @relation("BookMajorGenre")
  similarBy      Genre[]        @relation("Similar")
  similar        Genre[]        @relation("Similar")
}

model activity {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  Book      Book?    @relation(fields: [bookId], references: [id])
  bookId    Int?
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bookId    Int
  userId    Int
  emotionId Int
  text      String
  tags      String[]
  emotion   Emotion? @relation(fields: [emotionId], references: [id])
  book      Book     @relation(fields: [bookId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Emotion {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  path      String
  Review    Review[]
}

model Book {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String   @unique
  author      Author   @relation(fields: [authorId], references: [id])
  description String
  picture     String

  chapters Json[]
  file       String

  color       String       @default("#264653")
  pages       Int
  popularity  Int          @default(0)
  visible     Boolean      @default(false)
  majorGenre  Genre        @relation("BookMajorGenre", fields: [mainGenreId], references: [id])
  genres      Genre[]      @relation("BookGenre")
  reviews     Review[]
  shelves     Shelf[]
  finishedBy  User[]       @relation("FinishedBooks")
  readingBy   User[]       @relation("ReadingBooks")
  authorId    Int
  mainGenreId Int
  complaints  Complaints[]
  activities  activity[]
}

model GoodReadBook {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  title             String   @unique
  authorName        String
  authorPicture     String
  authorDescription String
  description       String
  picture           String
  pages             Int
  popularity        Int

  genres Genre[]
}

model Complaints {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
  book      Book?    @relation(fields: [bookId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  bookId    Int?
  userId    Int
}

model Author {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String   @unique
  picture     String
  description String
  books       Book[]
}

model User {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  email          String       @unique
  name           String?
  picture        String?
  password       String
  isAdmin        Boolean      @default(false)
  review         Review[]
  selectedGenre  Genre[]
  finishedBooks  Book[]       @relation("FinishedBooks")
  readingBooks   Book[]       @relation("ReadingBooks")
  watchedShelves Shelf[]      @relation("WatchedShelves")
  hiddenShelves  Shelf[]      @relation("HhiddenShelves")
  complaints     Complaints[]
  activity       activity[]
}

model Shelf {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String   @unique
  description String?  @default("")
  picture     String   @default("")
  watched     User[]   @relation("WatchedShelves")
  hidden      User[]   @relation("HhiddenShelves")
  books       Book[]
}
