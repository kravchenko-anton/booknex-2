generator client {
  provider = "prisma-client-js"
}
generator json {
  provider = "prisma-json-types-generator"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Genre {
  id                 Int            @id @default(autoincrement())
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  name               String         @unique
  description        String         @default("")
  users              User[]
  books              Book[]         @relation("BookGenre")
  majorBooks         Book[]         @relation("BookMajorGenre")
  similarBy          Genre[]        @relation("Similar")
  similar            Genre[]        @relation("Similar")
  bookTemplates      BookTemplate[]
  activities         Activity[]
}

model Activity {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  book          Book?    @relation(fields: [bookId], references: [id])
  genre         Genre?   @relation(fields: [genreId], references: [id])
  collection    Collection? @relation(fields: [collectionId], references: [id])
  collectionId  Int?
  genreId       Int?
  bookId        Int?
  userId        Int?
  type          Activities
  importance    Int
  user          User?     @relation(fields: [userId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rating    Int
  tags      String[]
  text      String
  book      Book     @relation(fields: [bookId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  bookId    Int
  userId    Int
}



model Book {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String   @unique
  author      String
  description String
  picture     String
  ebook       String
  pages       Int
  popularity  Int          @default(0)
  visible     Boolean      @default(false)
  majorGenre  Genre        @relation("BookMajorGenre", fields: [mainGenreId], references: [id])
  genres      Genre[]      @relation("BookGenre")
  review    Review[]
  collections Collection[]
  finishedBy  User[]       @relation("FinishedBooks")
  savedBy     User[]       @relation("SavedBooks")
  readingBy   User[]       @relation("ReadingBooks")
  mainGenreId Int
  activities  Activity[]
}

model BookTemplate {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  title             String   @unique
  author            String
  description       String
  picture           String
  pages             Int
  popularity        Int
  genres            Genre[]

}



model User {
  id              Int          @id @default(autoincrement())
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  email           String       @unique

  socialId        String?      @unique
  password       String?
  selectedGenres  Genre[]
  picture         String       @default("fallback.png")
  fullName        String       @default("unknown")
  location        String       @default("unknown")
  role            Role         @default(user)
  review        Review[]
  savedBooks      Book[]       @relation("SavedBooks")
  finishedBooks   Book[]       @relation("FinishedBooks")
  readingBooks    Book[]       @relation("ReadingBooks")
  activity        Activity[]
}

model Collection {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String   @unique
  description String?  @default("")
  picture     String   @default("")
  books       Book[]
  activities  Activity[]
}

 enum Role {
  user
  admin
}



enum Activities {
  startedReading
  finishedReading
  savedBook
  removeFromSaved
  checkCatalog
  reviewBook
  visitBook
  createBook
  updateBook
  visitGenre
  visitCollection
  getEbook
  updateRecommendations
  registerNewUser
  loginUser
}
