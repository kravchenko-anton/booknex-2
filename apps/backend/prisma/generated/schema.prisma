generator client {
  provider      = "prisma-client-js"
  engineType    = "binary"
  binaryTargets = ["linux-musl-openssl-3.0.x", "debian-openssl-1.1.x", "native", "windows", "debian-openssl-3.0.x"]
  output        = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Genre {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  name          String         @unique
  slug          String         @unique
  icon          String         @default("")
  users         User[]
  books         Book[]         @relation("BookGenre")
  mainBooks     Book[]         @relation("BookMajorGenre")
  bookTemplates BookTemplate[]
  activities    Activity[]
}

model Activity {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  book      Book?    @relation(fields: [bookId], references: [id])
  genre     Genre?   @relation(fields: [genreId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  type       Activities
  importance Int
  genreId    Int?
  bookId     Int?
  userId     Int?
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rating    Int
  tags      String[]
  text      String?
  book      Book     @relation(fields: [bookId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  bookId    Int

  userId Int
}

model Book {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String   @unique
  slug        String   @unique
  author      String
  description String
  picture     String
  ebook       String
  // Minutes

  readingTime Int @default(0)
  // Chapters count
  chapters    Int @default(0)

  rating      Float      @default(0)
  isPublic    Boolean    @default(false)
  mainGenreId Int
  mainGenre   Genre      @relation("BookMajorGenre", fields: [mainGenreId], references: [id])
  genres      Genre[]    @relation("BookGenre")
  review      Review[]
  finishedBy  User[]     @relation("FinishedBooks")
  savedBy     User[]     @relation("SavedBooks")
  readingBy   User[]     @relation("ReadingBooks")
  activities  Activity[]
}

model BookTemplate {
  id Int @id @default(autoincrement())

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String   @unique
  slug        String   @unique
  author      String
  description String
  picture     String
  rating      Float    @default(0)
  genres      Genre[]
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique

  socialId       String?    @unique
  password       String?
  selectedGenres Genre[]
  picture        String     @default("fallback.png")
  fullName       String     @default("unknown")
  location       String     @default("unknown")
  role           Role       @default(user)
  review         Review[]
  savedBooks     Book[]     @relation("SavedBooks")
  finishedBooks  Book[]     @relation("FinishedBooks")
  readingBooks   Book[]     @relation("ReadingBooks")
  activity       Activity[]
}

enum Role {
  user
  admin
}

enum StorageFolderEnum {
  ebooks
  booksCovers
}

enum Activities {
  startedReading
  finishedReading
  savedBook
  removeFromSaved
  checkCatalog
  reviewBook
  updatePicture
  visitBook
  createBook

  updateBook
  updateEBook
  updateGenre
  visitGenre
  visitCollection
  getEbook
  updateRecommendations
  registerNewUser
  loginUser
}
