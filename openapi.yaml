openapi: 3.0.0
paths:
  /api/user/profile:
    get:
      operationId: profile
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
      tags:
        - user
      security:
        - bearer: []
  /api/user/library:
    get:
      operationId: library
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLibrary"
      tags:
        - user
      security:
        - bearer: []
  "/api/user/start-reading/{id}":
    patch:
      operationId: startReading
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags:
        - user
      security:
        - bearer: []
  "/api/user/finish-reading/{id}":
    patch:
      operationId: finishReading
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags:
        - user
      security:
        - bearer: []
  "/api/user/toggle-save/{id}":
    patch:
      operationId: toggleSave
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: boolean
      tags:
        - user
      security:
        - bearer: []
  "/api/user/is-saved/{id}":
    get:
      operationId: isSaved
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: boolean
      tags:
        - user
      security:
        - bearer: []
  /api/user/admin/catalog:
    get:
      operationId: adminCatalog
      parameters:
        - name: searchTerm
          required: true
          in: query
          schema:
            type: string
        - name: page
          required: true
          in: query
          schema:
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAdminCatalog"
      tags:
        - user
      security:
        - bearer: []
  "/api/user/admin/remove/{id}":
    delete:
      operationId: remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags:
        - user
      security:
        - bearer: []
  "/api/catalog/search/{query}":
    get:
      operationId: search
      parameters:
        - name: query
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ShortBook"
      tags:
        - catalog
      security:
        - bearer: []
  /api/catalog/featured:
    get:
      operationId: featured
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeaturedOutput"
      tags:
        - catalog
      security:
        - bearer: []
  /api/genre:
    get:
      operationId: all
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/shortGenre"
      tags:
        - genre
      security:
        - bearer: []
  "/api/genre/by-id/{id}":
    get:
      operationId: byId
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/byIdOutput"
      tags:
        - genre
      security:
        - bearer: []
  "/api/book/by-id/{id}":
    get:
      operationId: infoById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InfoByIdOutput"
      tags:
        - book
      security:
        - bearer: []
  "/api/book/ebook/{id}":
    get:
      operationId: ebookById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EbookByIdOutput"
      tags:
        - book
      security:
        - bearer: []
  "/api/book/admin/by-id/{id}":
    get:
      operationId: infoByIdAdmin
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminInfoByIdOutput"
      tags:
        - book
      security:
        - bearer: []
  /api/book/admin/catalog:
    get:
      operationId: adminCatalog
      parameters:
        - name: searchTerm
          required: true
          in: query
          schema:
            type: string
        - name: page
          required: true
          in: query
          schema:
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminCatalogOutput"
      tags:
        - book
      security:
        - bearer: []
  /api/book/admin/create:
    post:
      operationId: create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBookDto"
      responses:
        "200":
          description: ""
      tags:
        - book
      security:
        - bearer: []
  "/api/book/admin/update/{id}":
    put:
      operationId: update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditBookDto"
      responses:
        "200":
          description: ""
      tags:
        - book
      security:
        - bearer: []
  "/api/book/admin/remove/{id}":
    delete:
      operationId: remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags:
        - book
      security:
        - bearer: []
  /api/auth/google-sign:
    post:
      operationId: googleSign
      parameters: []
      requestBody:
        required: true
        description: Sign in with google account
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignDto"
      responses:
        "200":
          description: Return access and refresh token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponseDto"
      tags:
        - auth
  /api/auth/mail-register:
    post:
      operationId: register
      parameters: []
      requestBody:
        required: true
        description: Register new user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthDto"
      responses:
        "200":
          description: Return access and refresh token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponseDto"
      tags:
        - auth
  /api/auth/mail-login:
    post:
      operationId: login
      parameters: []
      requestBody:
        required: true
        description: Login user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthDto"
      responses:
        "200":
          description: Return access and refresh token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponseDto"
      tags:
        - auth
  /api/auth/refresh:
    post:
      operationId: refreshToken
      parameters: []
      requestBody:
        required: true
        description: Refresh access token
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshDto"
      responses:
        "200":
          description: Return access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponseDto"
      tags:
        - auth
  /api/storage/delete:
    post:
      operationId: delete
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilenameDto"
      responses:
        "200":
          description: File deleted
      tags:
        - storage
      security:
        - bearer: []
  /api/storage/replacement:
    post:
      operationId: replacement
      parameters: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                deleteFilename:
                  type: string
      responses:
        "200":
          description: File uploaded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadOutputDto"
      tags:
        - storage
      security:
        - bearer: []
  "/api/storage/{folder}":
    post:
      operationId: upload
      parameters:
        - name: folder
          required: true
          in: path
          schema:
            enum:
              - ebooks
              - booksCovers
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: File uploaded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadOutputDto"
      tags:
        - storage
      security:
        - bearer: []
  /api/parser/admin/catalog:
    get:
      operationId: adminCatalog
      parameters:
        - name: searchTerm
          required: false
          in: query
          example: The Hobbit
          schema:
            type: string
        - name: page
          required: false
          in: query
          example: 1
          schema:
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookTemplateCatalogOutput"
      tags:
        - parser
      security:
        - bearer: []
  "/api/parser/admin/by-id/{id}":
    get:
      operationId: byId
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookTemplate"
      tags:
        - parser
      security:
        - bearer: []
  /api/parser/admin/parse:
    post:
      operationId: parse
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ParserDto"
      responses:
        "201":
          description: ""
      tags:
        - parser
      security:
        - bearer: []
  /api/parser/admin/unfold:
    post:
      operationId: unfold
      parameters: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: Unfolded book content
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UnfoldOutput"
      tags:
        - parser
      security:
        - bearer: []
  "/api/parser/admin/remove/{id}":
    delete:
      operationId: remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags:
        - parser
      security:
        - bearer: []
  "/api/review/review/{id}":
    post:
      operationId: review
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        description: Review book
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewBookDto"
      responses:
        "200":
          description: Review book
      tags:
        - review
      security:
        - bearer: []
  /api/recommendation/update-recommendations:
    post:
      operationId: updateRecommendations
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateSelectedGenresDto"
      responses:
        "200":
          description: Recommendations updated
      tags:
        - recommendation
      security:
        - bearer: []
  /api/recommendation/recommendation-genres:
    get:
      operationId: recommendationsGenres
      parameters: []
      responses:
        "200":
          description: Recommendation genres
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/shortGenre"
      tags:
        - recommendation
      security:
        - bearer: []
info:
  title: Booknex
  description: ""
  version: "1.0"
  contact:
    name: Booknex
    url: https://github.com/kravchenko-anton/booknex-2-monorepo
    email: Github repository
tags:
  - name: user
    description: user service
  - name: auth
    description: auth service
  - name: admin
    description: admin service
  - name: book
    description: book service
  - name: collection
    description: collection service
  - name: catalog
    description: catalog service
  - name: genre
    description: genre service
  - name: storage
    description: storage service
  - name: review
    description: review service
  - name: recommendation
    description: recommendation service
  - name: parser
    description: parser service
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    UserProfile:
      type: object
      properties:
        id:
          type: number
          example: 1
        email:
          type: string
          example: email
        bookCount:
          type: number
          example: 1
        totalPageCount:
          type: number
          example: 1
      required:
        - id
        - email
        - bookCount
        - totalPageCount
    ShortBook:
      type: object
      properties:
        id:
          type: number
          example: 1
          description: book id
        title:
          type: string
          example: title
          description: book title
        picture:
          type: string
          example: picture
          description: book picture
        author:
          type: string
          example: author
          description: book author
      required:
        - id
        - title
        - picture
        - author
    UserLibrary:
      type: object
      properties:
        readingBooks:
          type: array
          items:
            $ref: "#/components/schemas/ShortBook"
        finishedBooks:
          type: array
          items:
            $ref: "#/components/schemas/ShortBook"
        savedBooks:
          type: array
          items:
            $ref: "#/components/schemas/ShortBook"
      required:
        - readingBooks
        - finishedBooks
        - savedBooks
    shortGenre:
      type: object
      properties:
        id:
          type: number
          example: 1
          description: genre id
        name:
          type: string
          example: name
          description: genre name
      required:
        - id
        - name
    ActivityItem:
      type: object
      properties:
        message:
          type: string
          description: Activity message
          example: startedReading
        time:
          type: string
          description: Active time
          example: 2021-07-01T10:00:00
        importance:
          type: number
          description: Activity importance
          example: 1
      required:
        - message
        - time
        - importance
    Activity:
      type: object
      properties:
        date:
          type: string
          description: Active date
          example: 2021-07-01
        count:
          type: number
          description: Active count
          example: 10
        level:
          type: number
          description: Active level
          example: 10
        activities:
          description: List of activities
          type: array
          items:
            $ref: "#/components/schemas/ActivityItem"
      required:
        - date
        - count
        - level
        - activities
    UserCountOutput:
      type: object
      properties:
        savedBooks:
          type: number
          example: 1
        finishedBooks:
          type: number
          example: 1
        readingBooks:
          type: number
          example: 1
      required:
        - savedBooks
        - finishedBooks
        - readingBooks
    CatalogUserOutput:
      type: object
      properties:
        role:
          type: object
          example: user
          description: user role
        id:
          type: number
          example: 1
          description: user id
        createdAt:
          format: date-time
          type: string
          example: 2021-07-01
          description: user created at
        email:
          type: string
          example: email
          description: user email
        socialId:
          type: string
          example: socialId
          description: user social id
        password:
          type: string
          example: password
          description: user password
        picture:
          type: string
          example: picture
          description: user picture
        fullName:
          type: string
          example: fullName
          description: user full name
        location:
          type: string
          example: location
          description: user location
        selectedGenres:
          type: array
          items:
            $ref: "#/components/schemas/shortGenre"
        activities:
          type: array
          items:
            $ref: "#/components/schemas/Activity"
        _count:
          description: Count of books finished, reading and saved by the user
          allOf:
            - $ref: "#/components/schemas/UserCountOutput"
      required:
        - role
        - id
        - createdAt
        - email
        - socialId
        - password
        - picture
        - fullName
        - location
        - selectedGenres
        - activities
        - _count
    UserAdminCatalog:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/CatalogUserOutput"
        canLoadMore:
          type: boolean
          example: true
        totalPages:
          type: number
          example: 1
      required:
        - data
        - canLoadMore
        - totalPages
    FeaturedOutput:
      type: object
      properties:
        relatedGenres:
          type: array
          items:
            $ref: "#/components/schemas/shortGenre"
        recommendations:
          type: array
          items:
            $ref: "#/components/schemas/ShortBook"
        popularBooks:
          type: array
          items:
            $ref: "#/components/schemas/ShortBook"
        bestSellingBooks:
          type: array
          items:
            $ref: "#/components/schemas/ShortBook"
        newReleases:
          type: array
          items:
            $ref: "#/components/schemas/ShortBook"
      required:
        - relatedGenres
        - recommendations
        - popularBooks
        - bestSellingBooks
        - newReleases
    byIdOutput:
      type: object
      properties:
        id:
          type: number
          example: 1
          description: genre id
        name:
          type: string
          example: name
          description: genre name
        majorBooks:
          type: array
          items:
            type: array
      required:
        - id
        - name
        - majorBooks
    InfoByIdOutput:
      type: object
      properties:
        id:
          type: number
          example: 1
          description: book id
        title:
          type: string
          example: title
          description: book title
        picture:
          type: string
          example: picture
          description: book picture
        author:
          type: string
          example: author
          description: book author
        description:
          type: string
          example: description
          description: book description
        genres:
          type: array
          items:
            $ref: "#/components/schemas/shortGenre"
      required:
        - id
        - title
        - picture
        - author
        - description
        - genres
    ChapterChild:
      type: object
      properties:
        name:
          type: string
          example: name
          description: chapter child name
        link:
          type: string
          example: link
          description: chapter child link
      required:
        - name
        - link
    Chapter:
      type: object
      properties:
        title:
          type: string
          example: title
          description: chapter title
        children:
          description: chapter children
          type: array
          items:
            $ref: "#/components/schemas/ChapterChild"
      required:
        - title
        - children
    EbookByIdOutput:
      type: object
      properties:
        title:
          type: string
          example: title
          description: book title
        file:
          description: book file
          type: array
          items:
            type: string
        chapters:
          description: book chapters
          type: array
          items:
            $ref: "#/components/schemas/Chapter"
      required:
        - title
        - file
        - chapters
    CountOutput:
      type: object
      properties:
        finishedBy:
          type: number
          example: 1
          description: FinishedBy
        readingBy:
          type: number
          example: 1
          description: ReadingBy
        savedBy:
          type: number
          example: 1
          description: SavedBy
      required:
        - finishedBy
        - readingBy
        - savedBy
    Review:
      type: object
      properties:
        id:
          type: number
          example: 1
          description: review id
        tags:
          example: tags
          description: review tags
          type: array
          items:
            type: string
        text:
          type: string
          example: text
          description: review text
        rating:
          type: number
          example: 1
          description: review rating
      required:
        - id
        - tags
        - text
        - rating
    AdminInfoByIdOutput:
      type: object
      properties:
        id:
          type: number
          example: 1
          description: book id
        title:
          type: string
          example: title
          description: book title
        picture:
          type: string
          example: picture
          description: book picture
        author:
          type: string
          example: author
          description: book author
        createdAt:
          format: date-time
          type: string
          example: 2021-07-01
          description: book created at
        updatedAt:
          format: date-time
          type: string
          example: 2021-07-01
          description: book updated at
        visible:
          type: boolean
          example: true
          description: book visibility
        ebook:
          type: string
          example: ebook
          description: book ebook
        description:
          type: string
          example: description
          description: book description
        popularity:
          type: number
          example: 100
          description: book popularity
        pages:
          type: number
          example: 100
          description: book pages
        activities:
          description: book activities
          type: array
          items:
            $ref: "#/components/schemas/Activity"
        _count:
          description: book count
          allOf:
            - $ref: "#/components/schemas/CountOutput"
        review:
          description: book review
          type: array
          items:
            $ref: "#/components/schemas/Review"
        genres:
          type: array
          items:
            $ref: "#/components/schemas/shortGenre"
      required:
        - id
        - title
        - picture
        - author
        - createdAt
        - updatedAt
        - visible
        - ebook
        - description
        - popularity
        - pages
        - activities
        - _count
        - review
        - genres
    Book:
      type: object
      properties:
        id:
          type: number
          example: 1
          description: book id
        title:
          type: string
          example: title
          description: book title
        picture:
          type: string
          example: picture
          description: book picture
        author:
          type: string
          example: author
          description: book author
        description:
          type: string
          example: description
          description: book description
        pages:
          type: number
          example: 100
          description: book pages
        popularity:
          type: number
          example: 100
          description: book popularity
        visible:
          type: boolean
          example: true
          description: book visibility
        genres:
          type: array
          items:
            $ref: "#/components/schemas/shortGenre"
      required:
        - id
        - title
        - picture
        - author
        - description
        - pages
        - popularity
        - visible
        - genres
    AdminCatalogOutput:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Book"
        canLoadMore:
          type: boolean
          example: true
        totalPages:
          type: number
          example: 1
      required:
        - data
        - canLoadMore
        - totalPages
    CreateBookDto:
      type: object
      properties:
        title:
          type: string
          description: Title of the book
          example: The Great Gatsby
        author:
          type: string
          description: Author of the book
          example: F. Scott Fitzgerald
        description:
          type: string
          description: Uploaded picture
          example: picture.jpg
        picture:
          type: string
          description: Description of the book
          example: The Great Gatsby is a novel by the American author F. Scott Fitzgerald.
            First published in 1925, it is set on Long Island's North Shore and
            in New York City from spring to autumn of 1922.
        ebook:
          type: string
          description: Uploaded ebook
          example: ebook.pdf
        pages:
          type: number
          description: Number of pages in the book
          example: 300
        popularity:
          type: number
          description: Number of goodRead reviews
          example: 1000000
        genres:
          description: Array of genres
          example:
            - 1
            - 2
            - 3
          type: array
          items:
            type: number
    EditBookDto:
      type: object
      properties:
        title:
          type: string
          description: Title of the book
          example: The Great Gatsby
        author:
          type: string
          description: Author of the book
          example: F. Scott Fitzgerald
        description:
          type: string
          description: Uploaded picture
          example: picture.jpg
        picture:
          type: string
          description: Description of the book
          example: The Great Gatsby is a novel by the American author F. Scott Fitzgerald.
            First published in 1925, it is set on Long Island's North Shore and
            in New York City from spring to autumn of 1922.
        ebook:
          type: string
          description: Uploaded ebook
          example: ebook.pdf
        pages:
          type: number
          description: Number of pages in the book
          example: 300
        visible:
          type: boolean
          description: Is book visible
          example: true
        popularity:
          type: number
          description: Number of goodRead reviews
          example: 1000000
        genres:
          description: Array of genres
          example:
            - 1
            - 2
            - 3
          type: array
          items:
            type: string
    SignDto:
      type: object
      properties:
        socialId:
          type: string
          description: Social id
          example: "1234567890"
      required:
        - socialId
    AuthUserDto:
      type: object
      properties:
        id:
          type: number
          description: User id
          example: 1
        email:
          type: string
          description: User email
          example: test@gmail.com
        role:
          type: object
          description: User role
          example: user
      required:
        - id
        - email
        - role
    AuthResponseDto:
      type: object
      properties:
        accessToken:
          type: string
          description: Access token
          example: "1234567890"
        refreshToken:
          type: string
          description: Refresh token
          example: "1234567890"
        type:
          type: string
          description: type of auth
          example: login
        user:
          description: User data
          allOf:
            - $ref: "#/components/schemas/AuthUserDto"
      required:
        - accessToken
        - refreshToken
        - type
        - user
    AuthDto:
      type: object
      properties:
        email:
          type: string
          description: User email
          example: test@gmail.com
        password:
          type: string
          description: User password
          example: password
      required:
        - email
        - password
    RefreshDto:
      type: object
      properties:
        refreshToken:
          type: string
          description: Refresh token
          example: "1234567890"
      required:
        - refreshToken
    FilenameDto:
      type: object
      properties:
        filename:
          type: string
      required:
        - filename
    UploadOutputDto:
      type: object
      properties:
        name:
          type: string
      required:
        - name
    BookTemplate:
      type: object
      properties:
        id:
          type: number
          description: id of the book
        title:
          type: string
          description: title of the book
        author:
          type: string
          description: author of the book
        description:
          type: string
          description: description of the book
        picture:
          type: string
          description: picture of the book
        pages:
          type: number
          description: pages of the book
        popularity:
          type: number
          description: popularity of the book
        genres:
          type: array
          items:
            $ref: "#/components/schemas/shortGenre"
      required:
        - id
        - title
        - author
        - description
        - picture
        - pages
        - popularity
        - genres
    BookTemplateCatalogOutput:
      type: object
      properties:
        data:
          description: book template
          type: array
          items:
            $ref: "#/components/schemas/BookTemplate"
        canLoadMore:
          type: boolean
          description: can load more
        totalPages:
          type: number
          description: total pages
      required:
        - data
        - canLoadMore
        - totalPages
    ParserDto:
      type: object
      properties:
        url:
          type: string
          description: url of the parser
        page:
          type: number
          description: page of the parser
      required:
        - url
        - page
    UnfoldOutput:
      type: object
      properties:
        id:
          type: number
          description: id of the chapter
        name:
          type: string
          description: name of the chapter
        text:
          type: string
          description: text of the chapter
      required:
        - id
        - name
        - text
    ReviewBookDto:
      type: object
      properties:
        rating:
          type: number
          example: 5
          description: rating
        tags:
          description: tags
          type: array
          items:
            type: string
        comment:
          type: string
          example: comment
          description: comment
      required:
        - rating
        - tags
    UserUpdateSelectedGenresDto:
      type: object
      properties:
        selectedGenres:
          description: selected genres
          type: array
          items:
            type: number
      required:
        - selectedGenres
