{"version":3,"file":"static/chunks/63-5eab82da948bc57a.js","mappings":"sQAIO,IAAMA,EAAiB,KAC7B,IAAMC,EAAcC,EAAAA,CAAOA,CAACC,GAAG,CAAC,eAEhC,OADAC,QAAQC,GAAG,CAAC,iBAAkBJ,GACvBA,GAAe,IACvB,EAEaK,EAAkB,KAC9B,IAAMC,EAAeL,EAAAA,CAAOA,CAACC,GAAG,CAAC,gBAEjC,OADAC,QAAQC,GAAG,CAAC,kBAAmBE,GACxBA,GAAgB,IACxB,EASaC,EAAoB,IAIhCN,EAAAA,CAAOA,CAACO,GAAG,CAAC,cAAeC,EAAKT,WAAW,EAC3CC,EAAAA,CAAOA,CAACO,GAAG,CAAC,eAAgBC,EAAKH,YAAY,EAC7CH,QAAQC,GAAG,CAAC,oBAAqBK,EAClC,EAEaC,EAAsB,KAClCP,QAAQC,GAAG,CAAC,uBACZH,EAAAA,CAAOA,CAACU,MAAM,CAAC,eACfV,EAAAA,CAAOA,CAACU,MAAM,CAAC,eAChB,EAEaC,EAAe,UAC3B,IAAMN,EAAeD,IACrB,GAAI,CAACC,EAAc,MAAM,MAAU,oBACnCH,QAAQC,GAAG,CAAC,eAAgBE,GAC5B,GAAM,CAAEG,KAAMI,CAAQ,CAAE,CAAG,MAAMC,EAAAA,CAAGA,CAACC,IAAI,CACvCT,YAAY,CAAC,CAAEA,aAAAA,CAAa,GAC5BU,KAAK,CAAC,IAIN,KAH0B,gBAAtBC,CAAAA,EAAAA,EAAAA,CAAAA,EAAWC,IAA0BR,IACf,kBAAtBO,CAAAA,EAAAA,EAAAA,CAAAA,EAAWC,IAA4BR,IACjB,yBAAtBO,CAAAA,EAAAA,EAAAA,CAAAA,EAAWC,IAAmCR,IAC5CQ,CACP,GAMD,GALIL,EAASb,WAAW,EACvBO,EAAkB,CACjBP,YAAaa,EAASb,WAAW,CACjCM,aAAcO,EAASP,YAAY,GAEjC,CAACO,EAASb,WAAW,CAAE,MAAM,MAAU,mBAE3C,OAAOa,CACR,wECrCO,IAAMM,EAAY,mBAAmBC,OAAO,CAAC,OAAQ,GA4BrD,OAAMC,EAGTC,YAAYC,CAA6B,CAAEC,EAA6BL,CAAS,CAAEM,EAAiCC,EAAAA,CAAW,CAAE,CAC7H,QADiDF,QAAAA,CAAAA,OAAwCC,KAAAA,CAAAA,EACrFF,EAAe,KAECA,CADhB,KAAI,CAACA,aAAa,CAAGA,EACrB,IAAI,CAACC,QAAQ,CAAGD,OAAAA,CAAAA,EAAAA,EAAcC,QAAQ,GAAtBD,KAAAA,IAAAA,EAAAA,EAA0BC,CAC9C,CACJ,CACJ,CAQO,MAAMG,UAAsBC,MAC/BN,YAAYO,CAAoB,CAAEC,CAAY,CAAE,CAC5C,KAAK,CAACA,QADSD,KAAAA,CAAAA,EAEf,IAAI,CAACE,IAAI,CAAG,eAChB,CACJ,CAaO,IAAMC,EAAgC,CAC7C,EC7DaC,EAAiB,sBAOjBC,EAAoB,SAAUC,CAAoB,CAAEC,CAAiB,CAAEC,CAAmB,EACnG,GAAIA,MAAAA,EACA,MAAM,IAAIV,EAAcS,EAAW,sBAAsED,MAAAA,CAAhDC,EAAU,wCAAmDE,MAAA,CAAbH,EAAa,KAE9H,EA6BaI,EAAwB,eAAgBC,CAAW,CAAEjB,CAA6B,EAC3F,GAAIA,GAAiBA,EAAcvB,WAAW,CAAE,CAC5C,IAAMA,EAAc,mBAAOuB,EAAcvB,WAAW,CAC9C,MAAMuB,EAAcvB,WAAW,GAC/B,MAAMuB,EAAcvB,WAAW,CACrCwC,EAAO,aAAgB,CAAG,UAAYxC,CAC1C,CACJ,EAyCayC,EAAkB,SAAUC,CAAQ,EAAE,QAAAC,EAAAC,UAAAC,MAAA,CAAAC,EAAA,MAAAH,EAAA,EAAAA,EAAA,KAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAGD,CAAAA,CAAHC,EAAA,GAAAH,SAAA,CAAAG,EAAiB,CAChE,IAAMC,EAAe,IAAIC,gBAAgBP,EAAIQ,MAAM,GACnDC,SA5BKA,EAAwBC,CAAgC,CAAEC,CAAc,MAAEC,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAc,EAC5E,OAAbD,IACA,iBAAOA,EACHE,MAAMC,OAAO,CAACH,GACbA,EAAoBI,OAAO,CAACC,GAAQP,EAAwBC,EAAiBM,EAAMJ,IAGpFK,OAAOC,IAAI,CAACP,GAAWI,OAAO,CAACI,GAC3BV,EAAwBC,EAAiBC,CAAS,CAACQ,EAAW,CAAE,GAASP,MAAAA,CAANA,GAA8BO,MAAAA,CAAxBP,KAAAA,EAAa,IAAM,IAAgBhB,MAAA,CAAXuB,KAKrGT,EAAgBU,GAAG,CAACR,GACpBF,EAAgBW,MAAM,CAACT,EAAKD,GAG5BD,EAAgB5C,GAAG,CAAC8C,EAAKD,GAGrC,EAQ4BL,EAAcF,GACtCJ,EAAIQ,MAAM,CAAGF,EAAagB,QAAQ,EACtC,EAMaC,EAAwB,SAAUC,CAAU,CAAEC,CAAmB,CAAE5C,CAA6B,EACzG,IAAM6C,EAAY,iBAAOF,EAIzB,MAAOG,CAHoBD,GAAa7C,GAAiBA,EAAc+C,UAAU,CAC3E/C,EAAc+C,UAAU,CAACH,EAAeI,OAAO,CAAC,eAAe,EAC/DH,CAAAA,EAEAI,KAAKC,SAAS,CAACP,KAAUQ,IAAVR,EAAsBA,EAAQ,CAAC,GAC7CA,GAAS,EACpB,EAMaS,EAAe,SAAUjC,CAAQ,EAC1C,OAAOA,EAAIkC,QAAQ,CAAGlC,EAAIQ,MAAM,CAAGR,EAAImC,IAAI,EAOlCC,EAAwB,SAAUC,CAAsB,CAAErD,CAA0B,CAAEP,CAAiB,CAAEI,CAA6B,EAC/I,OAAO,eACiFA,MAD7CE,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAuBC,EAAaF,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAmBL,EACxF6D,EAAmB,CAAC,GAAGD,EAAUE,OAAO,CAAEvC,IAAK,CAACjB,EAAMyD,QAAQ,CAACC,OAAO,CAAG,GAAK5D,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAeC,QAAQ,GAAvBD,KAAAA,IAAAA,EAAAA,EAA2BC,CAAAA,EAAYuD,EAAUrC,GAAG,EACxI,OAAOjB,EAAM2D,OAAO,CAAOJ,EAC/B,CACJ,ECmCaK,EAAY,SAAS9D,CAA6B,EAC3D,IAAM+D,EArJC,CAOHC,WAAY,eAAOC,CAAAA,MAMXC,EANyCR,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAiC,CAAC,EAE/E/C,EAAkB,aAAc,gBAAiBsD,GAGjD,IAAME,EAAiB,IAAIC,IAFL,oBAEuB1D,GAyIMV,GAtI/CkE,CAAAA,EAAclE,EAAckE,WAAW,EAG3C,IAAMG,EAAyB,CAAEC,OAAQ,OAAQ,GAAGJ,CAAW,CAAE,GAAGR,CAAO,EACrEa,EAA0B,CAAC,CAKjCA,CAAAA,CAAuB,CAAC,eAAe,CAAG,mBAE1CrD,EAAgBiD,EANe,CAAC,GAOhC,IAAIK,EAAyBN,GAAeA,EAAYlB,OAAO,CAAGkB,EAAYlB,OAAO,CAAG,CAAC,EAIzF,OAHAqB,EAAuBrB,OAAO,CAAG,CAAC,GAAGuB,CAAuB,CAAE,GAAGC,CAAsB,CAAE,GAAGd,EAAQV,OAAO,EAC3GqB,EAAuBnF,IAAI,CAAGwD,EAAsBuB,EAAeI,EAwHhBrE,GAtH5C,CACHmB,IAAKiC,EAAae,GAClBT,QAASW,CACb,CACJ,EAOAI,UAAW,eAAOC,CAAAA,MAMVR,EAN4BR,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAiC,CAAC,EAElE/C,EAAkB,YAAa,UAAW+D,GAG1C,IAAMP,EAAiB,IAAIC,IAFL,mBAEuB1D,GAsGMV,GAnG/CkE,CAAAA,EAAclE,EAAckE,WAAW,EAG3C,IAAMG,EAAyB,CAAEC,OAAQ,OAAQ,GAAGJ,CAAW,CAAE,GAAGR,CAAO,EACrEa,EAA0B,CAAC,CAKjCA,CAAAA,CAAuB,CAAC,eAAe,CAAG,mBAE1CrD,EAAgBiD,EANe,CAAC,GAOhC,IAAIK,EAAyBN,GAAeA,EAAYlB,OAAO,CAAGkB,EAAYlB,OAAO,CAAG,CAAC,EAIzF,OAHAqB,EAAuBrB,OAAO,CAAG,CAAC,GAAGuB,CAAuB,CAAE,GAAGC,CAAsB,CAAE,GAAGd,EAAQV,OAAO,EAC3GqB,EAAuBnF,IAAI,CAAGwD,EAAsBgC,EAASL,EAqFVrE,GAnF5C,CACHmB,IAAKiC,EAAae,GAClBT,QAASW,CACb,CACJ,EAOAM,aAAc,eAAOD,CAAAA,MAMbR,EAN+BR,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAiC,CAAC,EAErE/C,EAAkB,eAAgB,UAAW+D,GAG7C,IAAMP,EAAiB,IAAIC,IAFL,sBAEuB1D,GAmEMV,GAhE/CkE,CAAAA,EAAclE,EAAckE,WAAW,EAG3C,IAAMG,EAAyB,CAAEC,OAAQ,OAAQ,GAAGJ,CAAW,CAAE,GAAGR,CAAO,EACrEa,EAA0B,CAAC,CAKjCA,CAAAA,CAAuB,CAAC,eAAe,CAAG,mBAE1CrD,EAAgBiD,EANe,CAAC,GAOhC,IAAIK,EAAyBN,GAAeA,EAAYlB,OAAO,CAAGkB,EAAYlB,OAAO,CAAG,CAAC,EAIzF,OAHAqB,EAAuBrB,OAAO,CAAG,CAAC,GAAGuB,CAAuB,CAAE,GAAGC,CAAsB,CAAE,GAAGd,EAAQV,OAAO,EAC3GqB,EAAuBnF,IAAI,CAAGwD,EAAsBgC,EAASL,EAkDVrE,GAhD5C,CACHmB,IAAKiC,EAAae,GAClBT,QAASW,CACb,CACJ,EAOAtF,aAAc,eAAO6F,CAAAA,MAMbV,EANqCR,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAiC,CAAC,EAE3E/C,EAAkB,eAAgB,aAAciE,GAGhD,IAAMT,EAAiB,IAAIC,IAFL,gBAEuB1D,GAgCMV,GA7B/CkE,CAAAA,EAAclE,EAAckE,WAAW,EAG3C,IAAMG,EAAyB,CAAEC,OAAQ,OAAQ,GAAGJ,CAAW,CAAE,GAAGR,CAAO,EACrEa,EAA0B,CAAC,CAKjCA,CAAAA,CAAuB,CAAC,eAAe,CAAG,mBAE1CrD,EAAgBiD,EANe,CAAC,GAOhC,IAAIK,EAAyBN,GAAeA,EAAYlB,OAAO,CAAGkB,EAAYlB,OAAO,CAAG,CAAC,EAIzF,OAHAqB,EAAuBrB,OAAO,CAAG,CAAC,GAAGuB,CAAuB,CAAE,GAAGC,CAAsB,CAAE,GAAGd,EAAQV,OAAO,EAC3GqB,EAAuBnF,IAAI,CAAGwD,EAAsBkC,EAAYP,EAebrE,GAb5C,CACHmB,IAAKiC,EAAae,GAClBT,QAASW,CACb,CACJ,CACJ,EASA,MAAO,CAOH,MAAML,WAAWC,CAA4B,CAAEP,CAA+B,MAGlCjD,EAAAA,EADHT,EADrC,IAAM6E,EAAoB,MAAMd,EAA0BC,UAAU,CAACC,EAAeP,GAC9EoB,EAA+B9E,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAe+E,WAAW,GAA1B/E,KAAAA,IAAAA,EAAAA,EAA8B,EAC7DgF,EAAAA,OAAkCvE,CAAAA,EAAAA,CAAkB,CAAC,qBAAqB,GAAxCA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,CAA0C,CAACqE,EAA6B,GAAxErE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA0EU,GAAG,CACrH,MAAO,CAACjB,EAAOD,IAAasD,EAAsBsB,EAAmB1E,EAAAA,CAAWA,CAAEP,EAAWI,GAAeE,EAAO8E,GAAmC/E,EAC1J,EAOA,MAAMwE,UAAUC,CAAgB,CAAEhB,CAA+B,MAGrBjD,EAAAA,EADHT,EADrC,IAAM6E,EAAoB,MAAMd,EAA0BU,SAAS,CAACC,EAAShB,GACvEoB,EAA+B9E,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAe+E,WAAW,GAA1B/E,KAAAA,IAAAA,EAAAA,EAA8B,EAC7DgF,EAAAA,OAAkCvE,CAAAA,EAAAA,CAAkB,CAAC,oBAAoB,GAAvCA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,CAAyC,CAACqE,EAA6B,GAAvErE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAyEU,GAAG,CACpH,MAAO,CAACjB,EAAOD,IAAasD,EAAsBsB,EAAmB1E,EAAAA,CAAWA,CAAEP,EAAWI,GAAeE,EAAO8E,GAAmC/E,EAC1J,EAOA,MAAM0E,aAAaD,CAAgB,CAAEhB,CAA+B,MAGxBjD,EAAAA,EADHT,EADrC,IAAM6E,EAAoB,MAAMd,EAA0BY,YAAY,CAACD,EAAShB,GAC1EoB,EAA+B9E,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAe+E,WAAW,GAA1B/E,KAAAA,IAAAA,EAAAA,EAA8B,EAC7DgF,EAAAA,OAAkCvE,CAAAA,EAAAA,CAAkB,CAAC,uBAAuB,GAA1CA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,CAA4C,CAACqE,EAA6B,GAA1ErE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA4EU,GAAG,CACvH,MAAO,CAACjB,EAAOD,IAAasD,EAAsBsB,EAAmB1E,EAAAA,CAAWA,CAAEP,EAAWI,GAAeE,EAAO8E,GAAmC/E,EAC1J,EAOA,MAAMlB,aAAa6F,CAAsB,CAAElB,CAA+B,MAG9BjD,EAAAA,EADHT,EADrC,IAAM6E,EAAoB,MAAMd,EAA0BhF,YAAY,CAAC6F,EAAYlB,GAC7EoB,EAA+B9E,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAe+E,WAAW,GAA1B/E,KAAAA,IAAAA,EAAAA,EAA8B,EAC7DgF,EAAAA,OAAkCvE,CAAAA,EAAAA,CAAkB,CAAC,uBAAuB,GAA1CA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,CAA4C,CAACqE,EAA6B,GAA1ErE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA4EU,GAAG,CACvH,MAAO,CAACjB,EAAOD,IAAasD,EAAsBsB,EAAmB1E,EAAAA,CAAWA,CAAEP,EAAWI,GAAeE,EAAO8E,GAAmC/E,EAC1J,CACJ,CACJ,CAsDO,OAAMgF,UAAgBnF,EAQzBkE,WAAkBC,CAA4B,CAAEP,CAA+B,CAAE,CAC7E,OAAOI,EAAU,IAAI,CAAC9D,aAAa,EAAEgE,UAAU,CAACC,EAAeP,GAASwB,IAAI,CAAC,GAAarB,EAAQ,IAAI,CAAC3D,KAAK,CAAE,IAAI,CAACD,QAAQ,EAC/H,CASAwE,UAAiBC,CAAgB,CAAEhB,CAA+B,CAAE,CAChE,OAAOI,EAAU,IAAI,CAAC9D,aAAa,EAAEyE,SAAS,CAACC,EAAShB,GAASwB,IAAI,CAAC,GAAarB,EAAQ,IAAI,CAAC3D,KAAK,CAAE,IAAI,CAACD,QAAQ,EACxH,CASA0E,aAAoBD,CAAgB,CAAEhB,CAA+B,CAAE,CACnE,OAAOI,EAAU,IAAI,CAAC9D,aAAa,EAAE2E,YAAY,CAACD,EAAShB,GAASwB,IAAI,CAAC,GAAarB,EAAQ,IAAI,CAAC3D,KAAK,CAAE,IAAI,CAACD,QAAQ,EAC3H,CASAlB,aAAoB6F,CAAsB,CAAElB,CAA+B,CAAE,CACzE,OAAOI,EAAU,IAAI,CAAC9D,aAAa,EAAEjB,YAAY,CAAC6F,EAAYlB,GAASwB,IAAI,CAAC,GAAarB,EAAQ,IAAI,CAAC3D,KAAK,CAAE,IAAI,CAACD,QAAQ,EAC9H,CACJ,CChDO,IAAMkF,EAAY,SAASnF,CAA6B,EAC3D,IAAM+D,EAzPC,CAOHqB,gBAAiB,eAAOC,CAAAA,MAOhBnB,EAP8BR,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAiC,CAAC,EAEpE/C,EAAkB,kBAAmB,OAAQ0E,GAC7C,IAAMC,EAAe,kCAChBzF,OAAO,CAAE,SAAc0F,mBAAmBC,OAAOH,KAEhDlB,EAAiB,IAAIC,IAAIkB,EAAc5E,GA4OMV,GAzO/CkE,CAAAA,EAAclE,EAAckE,WAAW,EAG3C,IAAMG,EAAyB,CAAEC,OAAQ,MAAO,GAAGJ,CAAW,CAAE,GAAGR,CAAO,EACpEa,EAA0B,CAAC,CAKjC,OAAMvD,EAAsBuD,EAgOuBvE,GA5NnDkB,EAAgBiD,EARe,CAAC,GAShC,IAAIK,EAAyBN,GAAeA,EAAYlB,OAAO,CAAGkB,EAAYlB,OAAO,CAAG,CAAC,EAGzF,OAFAqB,EAAuBrB,OAAO,CAAG,CAAC,GAAGuB,CAAuB,CAAE,GAAGC,CAAsB,CAAE,GAAGd,EAAQV,OAAO,EAEpG,CACH7B,IAAKiC,EAAae,GAClBT,QAASW,CACb,CACJ,EAQAoB,QAAS,eAAOC,CAAAA,CAAoBC,CAAAA,MAQ5BzB,EAR0CR,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAiC,CAAC,EAEhF/C,EAAkB,UAAW,aAAc+E,GAE3C/E,EAAkB,UAAW,OAAQgF,GAGrC,IAAMxB,EAAiB,IAAIC,IAFL,sBAEuB1D,GAqMMV,GAlM/CkE,CAAAA,EAAclE,EAAckE,WAAW,EAG3C,IAAMG,EAAyB,CAAEC,OAAQ,MAAO,GAAGJ,CAAW,CAAE,GAAGR,CAAO,EACpEa,EAA0B,CAAC,EAC3BqB,EAAyB,CAAC,CAIhC,OAAM5E,EAAsBuD,EAyLuBvE,GAvLhCmD,KAAAA,IAAfuC,GACAE,CAAAA,EAAuB,UAAa,CAAGF,CAAAA,EAG9BvC,KAAAA,IAATwC,GACAC,CAAAA,EAAuB,IAAO,CAAGD,CAAAA,EAKrCzE,EAAgBiD,EAAgByB,GAChC,IAAIpB,EAAyBN,GAAeA,EAAYlB,OAAO,CAAGkB,EAAYlB,OAAO,CAAG,CAAC,EAGzF,OAFAqB,EAAuBrB,OAAO,CAAG,CAAC,GAAGuB,CAAuB,CAAE,GAAGC,CAAsB,CAAE,GAAGd,EAAQV,OAAO,EAEpG,CACH7B,IAAKiC,EAAae,GAClBT,QAASW,CACb,CACJ,EAOAwB,OAAQ,eAAOC,CAAAA,MAMP5B,EANqCR,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAiC,CAAC,EAE3E/C,EAAkB,SAAU,gBAAiBmF,GAG7C,IAAM3B,EAAiB,IAAIC,IAFL,qBAEuB1D,GAyJMV,GAtJ/CkE,CAAAA,EAAclE,EAAckE,WAAW,EAG3C,IAAMG,EAAyB,CAAEC,OAAQ,OAAQ,GAAGJ,CAAW,CAAE,GAAGR,CAAO,EACrEa,EAA0B,CAAC,CAKjC,OAAMvD,EAAsBuD,EA6IuBvE,GAzInDuE,CAAuB,CAAC,eAAe,CAAG,mBAE1CrD,EAAgBiD,EAVe,CAAC,GAWhC,IAAIK,EAAyBN,GAAeA,EAAYlB,OAAO,CAAGkB,EAAYlB,OAAO,CAAG,CAAC,EAIzF,OAHAqB,EAAuBrB,OAAO,CAAG,CAAC,GAAGuB,CAAuB,CAAE,GAAGC,CAAsB,CAAE,GAAGd,EAAQV,OAAO,EAC3GqB,EAAuBnF,IAAI,CAAGwD,EAAsBoD,EAAezB,EAoIhBrE,GAlI5C,CACHmB,IAAKiC,EAAae,GAClBT,QAASW,CACb,CACJ,EAOA0B,WAAY,eAAOV,CAAAA,MAOXnB,EAPyBR,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAiC,CAAC,EAE/D/C,EAAkB,aAAc,OAAQ0E,GACxC,IAAMC,EAAe,4BAChBzF,OAAO,CAAE,SAAc0F,mBAAmBC,OAAOH,KAEhDlB,EAAiB,IAAIC,IAAIkB,EAAc5E,GAiHMV,GA9G/CkE,CAAAA,EAAclE,EAAckE,WAAW,EAG3C,IAAMG,EAAyB,CAAEC,OAAQ,MAAO,GAAGJ,CAAW,CAAE,GAAGR,CAAO,EACpEa,EAA0B,CAAC,CAKjC,OAAMvD,EAAsBuD,EAqGuBvE,GAjGnDkB,EAAgBiD,EARe,CAAC,GAShC,IAAIK,EAAyBN,GAAeA,EAAYlB,OAAO,CAAGkB,EAAYlB,OAAO,CAAG,CAAC,EAGzF,OAFAqB,EAAuBrB,OAAO,CAAG,CAAC,GAAGuB,CAAuB,CAAE,GAAGC,CAAsB,CAAE,GAAGd,EAAQV,OAAO,EAEpG,CACH7B,IAAKiC,EAAae,GAClBT,QAASW,CACb,CACJ,EAOAjF,OAAQ,eAAOiG,CAAAA,MAOPnB,EAPqBR,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAiC,CAAC,EAE3D/C,EAAkB,SAAU,OAAQ0E,GACpC,IAAMC,EAAe,4BAChBzF,OAAO,CAAE,SAAc0F,mBAAmBC,OAAOH,KAEhDlB,EAAiB,IAAIC,IAAIkB,EAAc5E,GA4EMV,GAzE/CkE,CAAAA,EAAclE,EAAckE,WAAW,EAG3C,IAAMG,EAAyB,CAAEC,OAAQ,SAAU,GAAGJ,CAAW,CAAE,GAAGR,CAAO,EACvEa,EAA0B,CAAC,CAKjC,OAAMvD,EAAsBuD,EAgEuBvE,GA5DnDkB,EAAgBiD,EARe,CAAC,GAShC,IAAIK,EAAyBN,GAAeA,EAAYlB,OAAO,CAAGkB,EAAYlB,OAAO,CAAG,CAAC,EAGzF,OAFAqB,EAAuBrB,OAAO,CAAG,CAAC,GAAGuB,CAAuB,CAAE,GAAGC,CAAsB,CAAE,GAAGd,EAAQV,OAAO,EAEpG,CACH7B,IAAKiC,EAAae,GAClBT,QAASW,CACb,CACJ,EAQA2B,OAAQ,eAAOX,CAAAA,CAAcY,CAAAA,MASrB/B,EATmDR,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAiC,CAAC,EAEzF/C,EAAkB,SAAU,OAAQ0E,GAEpC1E,EAAkB,SAAU,gBAAiBsF,GAC7C,IAAMX,EAAe,4BAChBzF,OAAO,CAAE,SAAc0F,mBAAmBC,OAAOH,KAEhDlB,EAAiB,IAAIC,IAAIkB,EAAc5E,GAoCMV,GAjC/CkE,CAAAA,EAAclE,EAAckE,WAAW,EAG3C,IAAMG,EAAyB,CAAEC,OAAQ,MAAO,GAAGJ,CAAW,CAAE,GAAGR,CAAO,EACpEa,EAA0B,CAAC,CAKjC,OAAMvD,EAAsBuD,EAwBuBvE,GApBnDuE,CAAuB,CAAC,eAAe,CAAG,mBAE1CrD,EAAgBiD,EAVe,CAAC,GAWhC,IAAIK,EAAyBN,GAAeA,EAAYlB,OAAO,CAAGkB,EAAYlB,OAAO,CAAG,CAAC,EAIzF,OAHAqB,EAAuBrB,OAAO,CAAG,CAAC,GAAGuB,CAAuB,CAAE,GAAGC,CAAsB,CAAE,GAAGd,EAAQV,OAAO,EAC3GqB,EAAuBnF,IAAI,CAAGwD,EAAsBuD,EAAe5B,EAehBrE,GAb5C,CACHmB,IAAKiC,EAAae,GAClBT,QAASW,CACb,CACJ,CACJ,EASA,MAAO,CAOH,MAAMe,gBAAgBC,CAAY,CAAE3B,CAA+B,MAGvBjD,EAAAA,EADHT,EADrC,IAAM6E,EAAoB,MAAMd,EAA0BqB,eAAe,CAACC,EAAM3B,GAC1EoB,EAA+B9E,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAe+E,WAAW,GAA1B/E,KAAAA,IAAAA,EAAAA,EAA8B,EAC7DgF,EAAAA,OAAkCvE,CAAAA,EAAAA,CAAkB,CAAC,0BAA0B,GAA7CA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,CAA+C,CAACqE,EAA6B,GAA7ErE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA+EU,GAAG,CAC1H,MAAO,CAACjB,EAAOD,IAAasD,EAAsBsB,EAAmB1E,EAAAA,CAAWA,CAAEP,EAAWI,GAAeE,EAAO8E,GAAmC/E,EAC1J,EAQA,MAAMwF,QAAQC,CAAkB,CAAEC,CAAY,CAAEjC,CAA+B,MAGnCjD,EAAAA,EADHT,EADrC,IAAM6E,EAAoB,MAAMd,EAA0B0B,OAAO,CAACC,EAAYC,EAAMjC,GAC9EoB,EAA+B9E,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAe+E,WAAW,GAA1B/E,KAAAA,IAAAA,EAAAA,EAA8B,EAC7DgF,EAAAA,OAAkCvE,CAAAA,EAAAA,CAAkB,CAAC,kBAAkB,GAArCA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,CAAuC,CAACqE,EAA6B,GAArErE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAuEU,GAAG,CAClH,MAAO,CAACjB,EAAOD,IAAasD,EAAsBsB,EAAmB1E,EAAAA,CAAWA,CAAEP,EAAWI,GAAeE,EAAO8E,GAAmC/E,EAC1J,EAOA,MAAM4F,OAAOC,CAA4B,CAAEpC,CAA+B,MAG9BjD,EAAAA,EADHT,EADrC,IAAM6E,EAAoB,MAAMd,EAA0B8B,MAAM,CAACC,EAAepC,GAC1EoB,EAA+B9E,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAe+E,WAAW,GAA1B/E,KAAAA,IAAAA,EAAAA,EAA8B,EAC7DgF,EAAAA,OAAkCvE,CAAAA,EAAAA,CAAkB,CAAC,iBAAiB,GAApCA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,CAAsC,CAACqE,EAA6B,GAApErE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAsEU,GAAG,CACjH,MAAO,CAACjB,EAAOD,IAAasD,EAAsBsB,EAAmB1E,EAAAA,CAAWA,CAAEP,EAAWI,GAAeE,EAAO8E,GAAmC/E,EAC1J,EAOA,MAAM8F,WAAWV,CAAY,CAAE3B,CAA+B,MAGlBjD,EAAAA,EADHT,EADrC,IAAM6E,EAAoB,MAAMd,EAA0BgC,UAAU,CAACV,EAAM3B,GACrEoB,EAA+B9E,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAe+E,WAAW,GAA1B/E,KAAAA,IAAAA,EAAAA,EAA8B,EAC7DgF,EAAAA,OAAkCvE,CAAAA,EAAAA,CAAkB,CAAC,qBAAqB,GAAxCA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,CAA0C,CAACqE,EAA6B,GAAxErE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA0EU,GAAG,CACrH,MAAO,CAACjB,EAAOD,IAAasD,EAAsBsB,EAAmB1E,EAAAA,CAAWA,CAAEP,EAAWI,GAAeE,EAAO8E,GAAmC/E,EAC1J,EAOA,MAAMb,OAAOiG,CAAY,CAAE3B,CAA+B,MAGdjD,EAAAA,EADHT,EADrC,IAAM6E,EAAoB,MAAMd,EAA0B3E,MAAM,CAACiG,EAAM3B,GACjEoB,EAA+B9E,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAe+E,WAAW,GAA1B/E,KAAAA,IAAAA,EAAAA,EAA8B,EAC7DgF,EAAAA,OAAkCvE,CAAAA,EAAAA,CAAkB,CAAC,iBAAiB,GAApCA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,CAAsC,CAACqE,EAA6B,GAApErE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAsEU,GAAG,CACjH,MAAO,CAACjB,EAAOD,IAAasD,EAAsBsB,EAAmB1E,EAAAA,CAAWA,CAAEP,EAAWI,GAAeE,EAAO8E,GAAmC/E,EAC1J,EAQA,MAAM+F,OAAOX,CAAY,CAAEY,CAA4B,CAAEvC,CAA+B,MAG5CjD,EAAAA,EADHT,EADrC,IAAM6E,EAAoB,MAAMd,EAA0BiC,MAAM,CAACX,EAAMY,EAAevC,GAChFoB,EAA+B9E,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAe+E,WAAW,GAA1B/E,KAAAA,IAAAA,EAAAA,EAA8B,EAC7DgF,EAAAA,OAAkCvE,CAAAA,EAAAA,CAAkB,CAAC,iBAAiB,GAApCA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,CAAsC,CAACqE,EAA6B,GAApErE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAsEU,GAAG,CACjH,MAAO,CAACjB,EAAOD,IAAasD,EAAsBsB,EAAmB1E,EAAAA,CAAWA,CAAEP,EAAWI,GAAeE,EAAO8E,GAAmC/E,EAC1J,CACJ,CACJ,CA0EO,OAAMiG,UAAgBpG,EAQzBsF,gBAAuBC,CAAY,CAAE3B,CAA+B,CAAE,CAClE,OAAOyB,EAAU,IAAI,CAACnF,aAAa,EAAEoF,eAAe,CAACC,EAAM3B,GAASwB,IAAI,CAAC,GAAarB,EAAQ,IAAI,CAAC3D,KAAK,CAAE,IAAI,CAACD,QAAQ,EAC3H,CAUAwF,QAAeC,CAAkB,CAAEC,CAAY,CAAEjC,CAA+B,CAAE,CAC9E,OAAOyB,EAAU,IAAI,CAACnF,aAAa,EAAEyF,OAAO,CAACC,EAAYC,EAAMjC,GAASwB,IAAI,CAAC,GAAarB,EAAQ,IAAI,CAAC3D,KAAK,CAAE,IAAI,CAACD,QAAQ,EAC/H,CASA4F,OAAcC,CAA4B,CAAEpC,CAA+B,CAAE,CACzE,OAAOyB,EAAU,IAAI,CAACnF,aAAa,EAAE6F,MAAM,CAACC,EAAepC,GAASwB,IAAI,CAAC,GAAarB,EAAQ,IAAI,CAAC3D,KAAK,CAAE,IAAI,CAACD,QAAQ,EAC3H,CASA8F,WAAkBV,CAAY,CAAE3B,CAA+B,CAAE,CAC7D,OAAOyB,EAAU,IAAI,CAACnF,aAAa,EAAE+F,UAAU,CAACV,EAAM3B,GAASwB,IAAI,CAAC,GAAarB,EAAQ,IAAI,CAAC3D,KAAK,CAAE,IAAI,CAACD,QAAQ,EACtH,CASAb,OAAciG,CAAY,CAAE3B,CAA+B,CAAE,CACzD,OAAOyB,EAAU,IAAI,CAACnF,aAAa,EAAEZ,MAAM,CAACiG,EAAM3B,GAASwB,IAAI,CAAC,GAAarB,EAAQ,IAAI,CAAC3D,KAAK,CAAE,IAAI,CAACD,QAAQ,EAClH,CAUA+F,OAAcX,CAAY,CAAEY,CAA4B,CAAEvC,CAA+B,CAAE,CACvF,OAAOyB,EAAU,IAAI,CAACnF,aAAa,EAAEgG,MAAM,CAACX,EAAMY,EAAevC,GAASwB,IAAI,CAAC,GAAarB,EAAQ,IAAI,CAAC3D,KAAK,CAAE,IAAI,CAACD,QAAQ,EACjI,CACJ,CC5YO,IAAMkG,EAAe,SAASnG,CAA6B,EAC9D,IAAM+D,EA/EC,CAMHqC,SAAU,qBAIFlC,EAJSR,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAiC,CAAC,EAGzCS,EAAiB,IAAIC,IAFL,oBAEuB1D,GAsESV,GAnElDkE,CAAAA,EAAclE,EAAckE,WAAW,EAG3C,IAAMG,EAAyB,CAAEC,OAAQ,MAAO,GAAGJ,CAAW,CAAE,GAAGR,CAAO,EACpEa,EAA0B,CAAC,CAKjC,OAAMvD,EAAsBuD,EA0D0BvE,GAtDtDkB,EAAgBiD,EARe,CAAC,GAShC,IAAIK,EAAyBN,GAAeA,EAAYlB,OAAO,CAAGkB,EAAYlB,OAAO,CAAG,CAAC,EAGzF,OAFAqB,EAAuBrB,OAAO,CAAG,CAAC,GAAGuB,CAAuB,CAAE,GAAGC,CAAsB,CAAE,GAAGd,EAAQV,OAAO,EAEpG,CACH7B,IAAKiC,EAAae,GAClBT,QAASW,CACb,CACJ,EAOA1C,OAAQ,eAAO0E,CAAAA,MAOPnC,EAPsBR,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAiC,CAAC,EAE5D/C,EAAkB,SAAU,QAAS0F,GACrC,IAAMf,EAAe,0BAChBzF,OAAO,CAAE,UAAe0F,mBAAmBC,OAAOa,KAEjDlC,EAAiB,IAAIC,IAAIkB,EAAc5E,GAiCSV,GA9BlDkE,CAAAA,EAAclE,EAAckE,WAAW,EAG3C,IAAMG,EAAyB,CAAEC,OAAQ,MAAO,GAAGJ,CAAW,CAAE,GAAGR,CAAO,EACpEa,EAA0B,CAAC,CAKjC,OAAMvD,EAAsBuD,EAqB0BvE,GAjBtDkB,EAAgBiD,EARe,CAAC,GAShC,IAAIK,EAAyBN,GAAeA,EAAYlB,OAAO,CAAGkB,EAAYlB,OAAO,CAAG,CAAC,EAGzF,OAFAqB,EAAuBrB,OAAO,CAAG,CAAC,GAAGuB,CAAuB,CAAE,GAAGC,CAAsB,CAAE,GAAGd,EAAQV,OAAO,EAEpG,CACH7B,IAAKiC,EAAae,GAClBT,QAASW,CACb,CACJ,CACJ,EASA,MAAO,CAMH,MAAM+B,SAAS1C,CAA+B,MAGFjD,EAAAA,EADHT,EADrC,IAAM6E,EAAoB,MAAMd,EAA0BqC,QAAQ,CAAC1C,GAC7DoB,EAA+B9E,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAe+E,WAAW,GAA1B/E,KAAAA,IAAAA,EAAAA,EAA8B,EAC7DgF,EAAAA,OAAkCvE,CAAAA,EAAAA,CAAkB,CAAC,sBAAsB,GAAzCA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,CAA2C,CAACqE,EAA6B,GAAzErE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA2EU,GAAG,CACtH,MAAO,CAACjB,EAAOD,IAAasD,EAAsBsB,EAAmB1E,EAAAA,CAAWA,CAAEP,EAAWI,GAAeE,EAAO8E,GAAmC/E,EAC1J,EAOA,MAAM0B,OAAO0E,CAAa,CAAE3C,CAA+B,MAGfjD,EAAAA,EADHT,EADrC,IAAM6E,EAAoB,MAAMd,EAA0BpC,MAAM,CAAC0E,EAAO3C,GAClEoB,EAA+B9E,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAe+E,WAAW,GAA1B/E,KAAAA,IAAAA,EAAAA,EAA8B,EAC7DgF,EAAAA,OAAkCvE,CAAAA,EAAAA,CAAkB,CAAC,oBAAoB,GAAvCA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,CAAyC,CAACqE,EAA6B,GAAvErE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAyEU,GAAG,CACpH,MAAO,CAACjB,EAAOD,IAAasD,EAAsBsB,EAAmB1E,EAAAA,CAAWA,CAAEP,EAAWI,GAAeE,EAAO8E,GAAmC/E,EAC1J,CACJ,CACJ,CAmCO,OAAMqG,UAAmBxG,EAO5BsG,SAAgB1C,CAA+B,CAAE,CAC7C,OAAOyC,EAAa,IAAI,CAACnG,aAAa,EAAEoG,QAAQ,CAAC1C,GAASwB,IAAI,CAAC,GAAarB,EAAQ,IAAI,CAAC3D,KAAK,CAAE,IAAI,CAACD,QAAQ,EACjH,CASA0B,OAAc0E,CAAa,CAAE3C,CAA+B,CAAE,CAC1D,OAAOyC,EAAa,IAAI,CAACnG,aAAa,EAAE2B,MAAM,CAAC0E,EAAO3C,GAASwB,IAAI,CAAC,GAAarB,EAAQ,IAAI,CAAC3D,KAAK,CAAE,IAAI,CAACD,QAAQ,EACtH,CACJ,CCvFO,IAAMsG,EAAa,SAASvG,CAA6B,EAC5D,IAAM+D,EA3EC,CAOHyC,YAAa,eAAOnB,CAAAA,MAOZnB,EAP0BR,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAiC,CAAC,EAEhE/C,EAAkB,cAAe,OAAQ0E,GACzC,IAAMC,EAAe,8BAChBzF,OAAO,CAAE,SAAc0F,mBAAmBC,OAAOH,KAEhDlB,EAAiB,IAAIC,IAAIkB,EAAc5E,GA8DOV,GA3DhDkE,CAAAA,EAAclE,EAAckE,WAAW,EAG3C,IAAMG,EAAyB,CAAEC,OAAQ,MAAO,GAAGJ,CAAW,CAAE,GAAGR,CAAO,EAM1ExC,EAAgBiD,EAJe,CAAC,GAKhC,IAAIK,EAAyBN,GAAeA,EAAYlB,OAAO,CAAGkB,EAAYlB,OAAO,CAAG,CAAC,EAGzF,OAFAqB,EAAuBrB,OAAO,CAAG,CAA6B,GAAGwB,CAAsB,CAAE,GAAGd,EAAQV,OAAO,EAEpG,CACH7B,IAAKiC,EAAae,GAClBT,QAASW,CACb,CACJ,EAOAoC,kBAAmB,eAAOpB,CAAAA,MAOlBnB,EAPgCR,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAiC,CAAC,EAEtE/C,EAAkB,oBAAqB,OAAQ0E,GAC/C,IAAMC,EAAe,mCAChBzF,OAAO,CAAE,SAAc0F,mBAAmBC,OAAOH,KAEhDlB,EAAiB,IAAIC,IAAIkB,EAAc5E,GA6BOV,GA1BhDkE,CAAAA,EAAclE,EAAckE,WAAW,EAG3C,IAAMG,EAAyB,CAAEC,OAAQ,MAAO,GAAGJ,CAAW,CAAE,GAAGR,CAAO,EAM1ExC,EAAgBiD,EAJe,CAAC,GAKhC,IAAIK,EAAyBN,GAAeA,EAAYlB,OAAO,CAAGkB,EAAYlB,OAAO,CAAG,CAAC,EAGzF,OAFAqB,EAAuBrB,OAAO,CAAG,CAA6B,GAAGwB,CAAsB,CAAE,GAAGd,EAAQV,OAAO,EAEpG,CACH7B,IAAKiC,EAAae,GAClBT,QAASW,CACb,CACJ,CACJ,EASA,MAAO,CAOH,MAAMmC,YAAYnB,CAAY,CAAE3B,CAA+B,MAGnBjD,EAAAA,EADHT,EADrC,IAAM6E,EAAoB,MAAMd,EAA0ByC,WAAW,CAACnB,EAAM3B,GACtEoB,EAA+B9E,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAe+E,WAAW,GAA1B/E,KAAAA,IAAAA,EAAAA,EAA8B,EAC7DgF,EAAAA,OAAkCvE,CAAAA,EAAAA,CAAkB,CAAC,uBAAuB,GAA1CA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,CAA4C,CAACqE,EAA6B,GAA1ErE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA4EU,GAAG,CACvH,MAAO,CAACjB,EAAOD,IAAasD,EAAsBsB,EAAmB1E,EAAAA,CAAWA,CAAEP,EAAWI,GAAeE,EAAO8E,GAAmC/E,EAC1J,EAOA,MAAMwG,kBAAkBpB,CAAY,CAAE3B,CAA+B,MAGzBjD,EAAAA,EADHT,EADrC,IAAM6E,EAAoB,MAAMd,EAA0B0C,iBAAiB,CAACpB,EAAM3B,GAC5EoB,EAA+B9E,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAe+E,WAAW,GAA1B/E,KAAAA,IAAAA,EAAAA,EAA8B,EAC7DgF,EAAAA,OAAkCvE,CAAAA,EAAAA,CAAkB,CAAC,6BAA6B,GAAhDA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,CAAkD,CAACqE,EAA6B,GAAhFrE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAkFU,GAAG,CAC7H,MAAO,CAACjB,EAAOD,IAAasD,EAAsBsB,EAAmB1E,EAAAA,CAAWA,CAAEP,EAAWI,GAAeE,EAAO8E,GAAmC/E,EAC1J,CACJ,CACJ,CAoCO,OAAMyG,UAAiB5G,EAQ1B0G,YAAmBnB,CAAY,CAAE3B,CAA+B,CAAE,CAC9D,OAAO6C,EAAW,IAAI,CAACvG,aAAa,EAAEwG,WAAW,CAACnB,EAAM3B,GAASwB,IAAI,CAAC,GAAarB,EAAQ,IAAI,CAAC3D,KAAK,CAAE,IAAI,CAACD,QAAQ,EACxH,CASAwG,kBAAyBpB,CAAY,CAAE3B,CAA+B,CAAE,CACpE,OAAO6C,EAAW,IAAI,CAACvG,aAAa,EAAEyG,iBAAiB,CAACpB,EAAM3B,GAASwB,IAAI,CAAC,GAAarB,EAAQ,IAAI,CAAC3D,KAAK,CAAE,IAAI,CAACD,QAAQ,EAC9H,CACJ,CClFO,IAAM0G,EAAa,SAAS3G,CAA6B,EAC5D,IAAM+D,EA/EC,CAOH6C,OAAQ,eAAOvB,CAAAA,MAOPnB,EAPqBR,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAiC,CAAC,EAE3D/C,EAAkB,SAAU,OAAQ0E,GACpC,IAAMC,EAAe,wBAChBzF,OAAO,CAAE,SAAc0F,mBAAmBC,OAAOH,KAEhDlB,EAAiB,IAAIC,IAAIkB,EAAc5E,GAkEOV,GA/DhDkE,CAAAA,EAAclE,EAAckE,WAAW,EAG3C,IAAMG,EAAyB,CAAEC,OAAQ,MAAO,GAAGJ,CAAW,CAAE,GAAGR,CAAO,EACpEa,EAA0B,CAAC,CAKjC,OAAMvD,EAAsBuD,EAsDwBvE,GAlDpDkB,EAAgBiD,EARe,CAAC,GAShC,IAAIK,EAAyBN,GAAeA,EAAYlB,OAAO,CAAGkB,EAAYlB,OAAO,CAAG,CAAC,EAGzF,OAFAqB,EAAuBrB,OAAO,CAAG,CAAC,GAAGuB,CAAuB,CAAE,GAAGC,CAAsB,CAAE,GAAGd,EAAQV,OAAO,EAEpG,CACH7B,IAAKiC,EAAae,GAClBT,QAASW,CACb,CACJ,EAMAoB,QAAS,qBAIDvB,EAJQR,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAiC,CAAC,EAGxCS,EAAiB,IAAIC,IAFL,SAEuB1D,GAiCOV,GA9BhDkE,CAAAA,EAAclE,EAAckE,WAAW,EAG3C,IAAMG,EAAyB,CAAEC,OAAQ,MAAO,GAAGJ,CAAW,CAAE,GAAGR,CAAO,EACpEa,EAA0B,CAAC,CAKjC,OAAMvD,EAAsBuD,EAqBwBvE,GAjBpDkB,EAAgBiD,EARe,CAAC,GAShC,IAAIK,EAAyBN,GAAeA,EAAYlB,OAAO,CAAGkB,EAAYlB,OAAO,CAAG,CAAC,EAGzF,OAFAqB,EAAuBrB,OAAO,CAAG,CAAC,GAAGuB,CAAuB,CAAE,GAAGC,CAAsB,CAAE,GAAGd,EAAQV,OAAO,EAEpG,CACH7B,IAAKiC,EAAae,GAClBT,QAASW,CACb,CACJ,CACJ,EASA,MAAO,CAOH,MAAMuC,OAAOvB,CAAY,CAAE3B,CAA+B,MAGdjD,EAAAA,EADHT,EADrC,IAAM6E,EAAoB,MAAMd,EAA0B6C,MAAM,CAACvB,EAAM3B,GACjEoB,EAA+B9E,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAe+E,WAAW,GAA1B/E,KAAAA,IAAAA,EAAAA,EAA8B,EAC7DgF,EAAAA,OAAkCvE,CAAAA,EAAAA,CAAkB,CAAC,kBAAkB,GAArCA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,CAAuC,CAACqE,EAA6B,GAArErE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAuEU,GAAG,CAClH,MAAO,CAACjB,EAAOD,IAAasD,EAAsBsB,EAAmB1E,EAAAA,CAAWA,CAAEP,EAAWI,GAAeE,EAAO8E,GAAmC/E,EAC1J,EAMA,MAAMwF,QAAQ/B,CAA+B,MAGDjD,EAAAA,EADHT,EADrC,IAAM6E,EAAoB,MAAMd,EAA0B0B,OAAO,CAAC/B,GAC5DoB,EAA+B9E,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAe+E,WAAW,GAA1B/E,KAAAA,IAAAA,EAAAA,EAA8B,EAC7DgF,EAAAA,OAAkCvE,CAAAA,EAAAA,CAAkB,CAAC,mBAAmB,GAAtCA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,CAAwC,CAACqE,EAA6B,GAAtErE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAwEU,GAAG,CACnH,MAAO,CAACjB,EAAOD,IAAasD,EAAsBsB,EAAmB1E,EAAAA,CAAWA,CAAEP,EAAWI,GAAeE,EAAO8E,GAAmC/E,EAC1J,CACJ,CACJ,CAmCO,OAAM4G,UAAiB/G,EAQ1B8G,OAAcvB,CAAY,CAAE3B,CAA+B,CAAE,CACzD,OAAOiD,EAAW,IAAI,CAAC3G,aAAa,EAAE4G,MAAM,CAACvB,EAAM3B,GAASwB,IAAI,CAAC,GAAarB,EAAQ,IAAI,CAAC3D,KAAK,CAAE,IAAI,CAACD,QAAQ,EACnH,CAQAwF,QAAe/B,CAA+B,CAAE,CAC5C,OAAOiD,EAAW,IAAI,CAAC3G,aAAa,EAAEyF,OAAO,CAAC/B,GAASwB,IAAI,CAAC,GAAarB,EAAQ,IAAI,CAAC3D,KAAK,CAAE,IAAI,CAACD,QAAQ,EAC9G,CACJ,CEiDO,IAAM6G,EAAc,SAAS9G,CAA6B,EAC7D,IAAM+D,EA/MC,CAOH6C,OAAQ,eAAOvB,CAAAA,MAOPnB,EAPqBR,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAiC,CAAC,EAE3D/C,EAAkB,SAAU,OAAQ0E,GACpC,IAAMC,EAAe,+BAChBzF,OAAO,CAAE,SAAc0F,mBAAmBC,OAAOH,KAEhDlB,EAAiB,IAAIC,IAAIkB,EAAc5E,GAkMQV,GA/LjDkE,CAAAA,EAAclE,EAAckE,WAAW,EAG3C,IAAMG,EAAyB,CAAEC,OAAQ,MAAO,GAAGJ,CAAW,CAAE,GAAGR,CAAO,EACpEa,EAA0B,CAAC,CAKjC,OAAMvD,EAAsBuD,EAsLyBvE,GAlLrDkB,EAAgBiD,EARe,CAAC,GAShC,IAAIK,EAAyBN,GAAeA,EAAYlB,OAAO,CAAGkB,EAAYlB,OAAO,CAAG,CAAC,EAGzF,OAFAqB,EAAuBrB,OAAO,CAAG,CAAC,GAAGuB,CAAuB,CAAE,GAAGC,CAAsB,CAAE,GAAGd,EAAQV,OAAO,EAEpG,CACH7B,IAAKiC,EAAae,GAClBT,QAASW,CACb,CACJ,EAQAoB,QAAS,eAAOC,CAAAA,CAAqBC,CAAAA,MAI7BzB,EAJ4CR,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAiC,CAAC,EAG5ES,EAAiB,IAAIC,IAFL,wBAEuB1D,GA+JQV,GA5JjDkE,CAAAA,EAAclE,EAAckE,WAAW,EAG3C,IAAMG,EAAyB,CAAEC,OAAQ,MAAO,GAAGJ,CAAW,CAAE,GAAGR,CAAO,EACpEa,EAA0B,CAAC,EAC3BqB,EAAyB,CAAC,CAIhC,OAAM5E,EAAsBuD,EAmJyBvE,GAjJlCmD,KAAAA,IAAfuC,GACAE,CAAAA,EAAuB,UAAa,CAAGF,CAAAA,EAG9BvC,KAAAA,IAATwC,GACAC,CAAAA,EAAuB,IAAO,CAAGD,CAAAA,EAKrCzE,EAAgBiD,EAAgByB,GAChC,IAAIpB,EAAyBN,GAAeA,EAAYlB,OAAO,CAAGkB,EAAYlB,OAAO,CAAG,CAAC,EAGzF,OAFAqB,EAAuBrB,OAAO,CAAG,CAAC,GAAGuB,CAAuB,CAAE,GAAGC,CAAsB,CAAE,GAAGd,EAAQV,OAAO,EAEpG,CACH7B,IAAKiC,EAAae,GAClBT,QAASW,CACb,CACJ,EAOA0C,MAAO,eAAOC,CAAAA,MAMN9C,EAN4BR,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAiC,CAAC,EAElE/C,EAAkB,QAAS,YAAaqG,GAGxC,IAAM7C,EAAiB,IAAIC,IAFL,sBAEuB1D,GAmHQV,GAhHjDkE,CAAAA,EAAclE,EAAckE,WAAW,EAG3C,IAAMG,EAAyB,CAAEC,OAAQ,OAAQ,GAAGJ,CAAW,CAAE,GAAGR,CAAO,EACrEa,EAA0B,CAAC,CAKjC,OAAMvD,EAAsBuD,EAuGyBvE,GAnGrDuE,CAAuB,CAAC,eAAe,CAAG,mBAE1CrD,EAAgBiD,EAVe,CAAC,GAWhC,IAAIK,EAAyBN,GAAeA,EAAYlB,OAAO,CAAGkB,EAAYlB,OAAO,CAAG,CAAC,EAIzF,OAHAqB,EAAuBrB,OAAO,CAAG,CAAC,GAAGuB,CAAuB,CAAE,GAAGC,CAAsB,CAAE,GAAGd,EAAQV,OAAO,EAC3GqB,EAAuBnF,IAAI,CAAGwD,EAAsBsE,EAAW3C,EA8FVrE,GA5F9C,CACHmB,IAAKiC,EAAae,GAClBT,QAASW,CACb,CACJ,EAOAjF,OAAQ,eAAOiG,CAAAA,MAOPnB,EAPqBR,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAiC,CAAC,EAE3D/C,EAAkB,SAAU,OAAQ0E,GACpC,IAAMC,EAAe,8BAChBzF,OAAO,CAAE,SAAc0F,mBAAmBC,OAAOH,KAEhDlB,EAAiB,IAAIC,IAAIkB,EAAc5E,GA2EQV,GAxEjDkE,CAAAA,EAAclE,EAAckE,WAAW,EAG3C,IAAMG,EAAyB,CAAEC,OAAQ,SAAU,GAAGJ,CAAW,CAAE,GAAGR,CAAO,EACvEa,EAA0B,CAAC,CAKjC,OAAMvD,EAAsBuD,EA+DyBvE,GA3DrDkB,EAAgBiD,EARe,CAAC,GAShC,IAAIK,EAAyBN,GAAeA,EAAYlB,OAAO,CAAGkB,EAAYlB,OAAO,CAAG,CAAC,EAGzF,OAFAqB,EAAuBrB,OAAO,CAAG,CAAC,GAAGuB,CAAuB,CAAE,GAAGC,CAAsB,CAAE,GAAGd,EAAQV,OAAO,EAEpG,CACH7B,IAAKiC,EAAae,GAClBT,QAASW,CACb,CACJ,EAOA4C,OAAQ,eAAOC,CAAAA,MAIPhD,EAJoBR,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAiC,CAAC,EAGpDS,EAAiB,IAAIC,IAFL,uBAEuB1D,GAyCQV,GAtCjDkE,CAAAA,EAAclE,EAAckE,WAAW,EAG3C,IAAMG,EAAyB,CAAEC,OAAQ,OAAQ,GAAGJ,CAAW,CAAE,GAAGR,CAAO,EACrEa,EAA0B,CAAC,EAE3B4C,EAAqB,GAAKnH,CAAAA,GAAkBA,EAAcoH,YAAY,EAAKC,QAAAA,CAIjF,OAAMrG,EAAsBuD,EA4ByBvE,GAzBxCmD,KAAAA,IAAT+D,GACAC,EAAmB3E,MAAM,CAAC,OAAQ0E,GAItC3C,CAAuB,CAAC,eAAe,CAAG,sBAE1CrD,EAAgBiD,EAfe,CAAC,GAgBhC,IAAIK,EAAyBN,GAAeA,EAAYlB,OAAO,CAAGkB,EAAYlB,OAAO,CAAG,CAAC,EAIzF,OAHAqB,EAAuBrB,OAAO,CAAG,CAAC,GAAGuB,CAAuB,CAAE,GAAGC,CAAsB,CAAE,GAAGd,EAAQV,OAAO,EAC3GqB,EAAuBnF,IAAI,CAAGiI,EAEvB,CACHhG,IAAKiC,EAAae,GAClBT,QAASW,CACb,CACJ,CACJ,EASA,MAAO,CAOH,MAAMuC,OAAOvB,CAAY,CAAE3B,CAA+B,MAGdjD,EAAAA,EADHT,EADrC,IAAM6E,EAAoB,MAAMd,EAA0B6C,MAAM,CAACvB,EAAM3B,GACjEoB,EAA+B9E,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAe+E,WAAW,GAA1B/E,KAAAA,IAAAA,EAAAA,EAA8B,EAC7DgF,EAAAA,OAAkCvE,CAAAA,EAAAA,CAAkB,CAAC,mBAAmB,GAAtCA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,CAAwC,CAACqE,EAA6B,GAAtErE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAwEU,GAAG,CACnH,MAAO,CAACjB,EAAOD,IAAasD,EAAsBsB,EAAmB1E,EAAAA,CAAWA,CAAEP,EAAWI,GAAeE,EAAO8E,GAAmC/E,EAC1J,EAQA,MAAMwF,QAAQC,CAAmB,CAAEC,CAAa,CAAEjC,CAA+B,MAGrCjD,EAAAA,EADHT,EADrC,IAAM6E,EAAoB,MAAMd,EAA0B0B,OAAO,CAACC,EAAYC,EAAMjC,GAC9EoB,EAA+B9E,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAe+E,WAAW,GAA1B/E,KAAAA,IAAAA,EAAAA,EAA8B,EAC7DgF,EAAAA,OAAkCvE,CAAAA,EAAAA,CAAkB,CAAC,oBAAoB,GAAvCA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,CAAyC,CAACqE,EAA6B,GAAvErE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAyEU,GAAG,CACpH,MAAO,CAACjB,EAAOD,IAAasD,EAAsBsB,EAAmB1E,EAAAA,CAAWA,CAAEP,EAAWI,GAAeE,EAAO8E,GAAmC/E,EAC1J,EAOA,MAAM8G,MAAMC,CAAoB,CAAEtD,CAA+B,MAGrBjD,EAAAA,EADHT,EADrC,IAAM6E,EAAoB,MAAMd,EAA0BgD,KAAK,CAACC,EAAWtD,GACrEoB,EAA+B9E,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAe+E,WAAW,GAA1B/E,KAAAA,IAAAA,EAAAA,EAA8B,EAC7DgF,EAAAA,OAAkCvE,CAAAA,EAAAA,CAAkB,CAAC,kBAAkB,GAArCA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,CAAuC,CAACqE,EAA6B,GAArErE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAuEU,GAAG,CAClH,MAAO,CAACjB,EAAOD,IAAasD,EAAsBsB,EAAmB1E,EAAAA,CAAWA,CAAEP,EAAWI,GAAeE,EAAO8E,GAAmC/E,EAC1J,EAOA,MAAMb,OAAOiG,CAAY,CAAE3B,CAA+B,MAGdjD,EAAAA,EADHT,EADrC,IAAM6E,EAAoB,MAAMd,EAA0B3E,MAAM,CAACiG,EAAM3B,GACjEoB,EAA+B9E,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAe+E,WAAW,GAA1B/E,KAAAA,IAAAA,EAAAA,EAA8B,EAC7DgF,EAAAA,OAAkCvE,CAAAA,EAAAA,CAAkB,CAAC,mBAAmB,GAAtCA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,CAAwC,CAACqE,EAA6B,GAAtErE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAwEU,GAAG,CACnH,MAAO,CAACjB,EAAOD,IAAasD,EAAsBsB,EAAmB1E,EAAAA,CAAWA,CAAEP,EAAWI,GAAeE,EAAO8E,GAAmC/E,EAC1J,EAOA,MAAMgH,OAAOC,CAAW,CAAExD,CAA+B,MAGbjD,EAAAA,EADHT,EADrC,IAAM6E,EAAoB,MAAMd,EAA0BkD,MAAM,CAACC,EAAMxD,GACjEoB,EAA+B9E,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAe+E,WAAW,GAA1B/E,KAAAA,IAAAA,EAAAA,EAA8B,EAC7DgF,EAAAA,OAAkCvE,CAAAA,EAAAA,CAAkB,CAAC,mBAAmB,GAAtCA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,CAAwC,CAACqE,EAA6B,GAAtErE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAwEU,GAAG,CACnH,MAAO,CAACjB,EAAOD,IAAasD,EAAsBsB,EAAmB1E,EAAAA,CAAWA,CAAEP,EAAWI,GAAeE,EAAO8E,GAAmC/E,EAC1J,CACJ,CACJ,CAgEO,OAAMqH,UAAkBxH,EAQ3B8G,OAAcvB,CAAY,CAAE3B,CAA+B,CAAE,CACzD,OAAOoD,EAAY,IAAI,CAAC9G,aAAa,EAAE4G,MAAM,CAACvB,EAAM3B,GAASwB,IAAI,CAAC,GAAarB,EAAQ,IAAI,CAAC3D,KAAK,CAAE,IAAI,CAACD,QAAQ,EACpH,CAUAwF,QAAeC,CAAmB,CAAEC,CAAa,CAAEjC,CAA+B,CAAE,CAChF,OAAOoD,EAAY,IAAI,CAAC9G,aAAa,EAAEyF,OAAO,CAACC,EAAYC,EAAMjC,GAASwB,IAAI,CAAC,GAAarB,EAAQ,IAAI,CAAC3D,KAAK,CAAE,IAAI,CAACD,QAAQ,EACjI,CASA8G,MAAaC,CAAoB,CAAEtD,CAA+B,CAAE,CAChE,OAAOoD,EAAY,IAAI,CAAC9G,aAAa,EAAE+G,KAAK,CAACC,EAAWtD,GAASwB,IAAI,CAAC,GAAarB,EAAQ,IAAI,CAAC3D,KAAK,CAAE,IAAI,CAACD,QAAQ,EACxH,CASAb,OAAciG,CAAY,CAAE3B,CAA+B,CAAE,CACzD,OAAOoD,EAAY,IAAI,CAAC9G,aAAa,EAAEZ,MAAM,CAACiG,EAAM3B,GAASwB,IAAI,CAAC,GAAarB,EAAQ,IAAI,CAAC3D,KAAK,CAAE,IAAI,CAACD,QAAQ,EACpH,CASAgH,OAAcC,CAAW,CAAExD,CAA+B,CAAE,CACxD,OAAOoD,EAAY,IAAI,CAAC9G,aAAa,EAAEiH,MAAM,CAACC,EAAMxD,GAASwB,IAAI,CAAC,GAAarB,EAAQ,IAAI,CAAC3D,KAAK,CAAE,IAAI,CAACD,QAAQ,EACpH,CACJ,CC3TO,IAAMsH,EAAsB,SAASvH,CAA6B,EACrE,IAAM+D,EAjFC,CAMHyD,sBAAuB,qBAIftD,EAJsBR,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAiC,CAAC,EAGtDS,EAAiB,IAAIC,IAFL,uCAEuB1D,GAwEgBV,GArEzDkE,CAAAA,EAAclE,EAAckE,WAAW,EAG3C,IAAMG,EAAyB,CAAEC,OAAQ,MAAO,GAAGJ,CAAW,CAAE,GAAGR,CAAO,EACpEa,EAA0B,CAAC,CAKjC,OAAMvD,EAAsBuD,EA4DiCvE,GAxD7DkB,EAAgBiD,EARe,CAAC,GAShC,IAAIK,EAAyBN,GAAeA,EAAYlB,OAAO,CAAGkB,EAAYlB,OAAO,CAAG,CAAC,EAGzF,OAFAqB,EAAuBrB,OAAO,CAAG,CAAC,GAAGuB,CAAuB,CAAE,GAAGC,CAAsB,CAAE,GAAGd,EAAQV,OAAO,EAEpG,CACH7B,IAAKiC,EAAae,GAClBT,QAASW,CACb,CACJ,EAOAoD,qBAAsB,eAAOC,CAAAA,MAMrBxD,EANuER,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAiC,CAAC,EAE7G/C,EAAkB,uBAAwB,0BAA2B+G,GAGrE,IAAMvD,EAAiB,IAAIC,IAFL,wCAEuB1D,GAoCgBV,GAjCzDkE,CAAAA,EAAclE,EAAckE,WAAW,EAG3C,IAAMG,EAAyB,CAAEC,OAAQ,OAAQ,GAAGJ,CAAW,CAAE,GAAGR,CAAO,EACrEa,EAA0B,CAAC,CAKjC,OAAMvD,EAAsBuD,EAwBiCvE,GApB7DuE,CAAuB,CAAC,eAAe,CAAG,mBAE1CrD,EAAgBiD,EAVe,CAAC,GAWhC,IAAIK,EAAyBN,GAAeA,EAAYlB,OAAO,CAAGkB,EAAYlB,OAAO,CAAG,CAAC,EAIzF,OAHAqB,EAAuBrB,OAAO,CAAG,CAAC,GAAGuB,CAAuB,CAAE,GAAGC,CAAsB,CAAE,GAAGd,EAAQV,OAAO,EAC3GqB,EAAuBnF,IAAI,CAAGwD,EAAsBgF,EAAyBrD,EAehBrE,GAbtD,CACHmB,IAAKiC,EAAae,GAClBT,QAASW,CACb,CACJ,CACJ,EASA,MAAO,CAMH,MAAMmD,sBAAsB9D,CAA+B,MAGfjD,EAAAA,EADHT,EADrC,IAAM6E,EAAoB,MAAMd,EAA0ByD,qBAAqB,CAAC9D,GAC1EoB,EAA+B9E,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAe+E,WAAW,GAA1B/E,KAAAA,IAAAA,EAAAA,EAA8B,EAC7DgF,EAAAA,OAAkCvE,CAAAA,EAAAA,CAAkB,CAAC,0CAA0C,GAA7DA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,CAA+D,CAACqE,EAA6B,GAA7FrE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA+FU,GAAG,CAC1I,MAAO,CAACjB,EAAOD,IAAasD,EAAsBsB,EAAmB1E,EAAAA,CAAWA,CAAEP,EAAWI,GAAeE,EAAO8E,GAAmC/E,EAC1J,EAOA,MAAMwH,qBAAqBC,CAAgD,CAAEhE,CAA+B,MAGhEjD,EAAAA,EADHT,EADrC,IAAM6E,EAAoB,MAAMd,EAA0B0D,oBAAoB,CAACC,EAAyBhE,GAClGoB,EAA+B9E,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAe+E,WAAW,GAA1B/E,KAAAA,IAAAA,EAAAA,EAA8B,EAC7DgF,EAAAA,OAAkCvE,CAAAA,EAAAA,CAAkB,CAAC,yCAAyC,GAA5DA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,CAA8D,CAACqE,EAA6B,GAA5FrE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA8FU,GAAG,CACzI,MAAO,CAACjB,EAAOD,IAAasD,EAAsBsB,EAAmB1E,EAAAA,CAAWA,CAAEP,EAAWI,GAAeE,EAAO8E,GAAmC/E,EAC1J,CACJ,CACJ,CAmCO,OAAM0H,UAA0B7H,EAOnC0H,sBAA6B9D,CAA+B,CAAE,CAC1D,OAAO6D,EAAoB,IAAI,CAACvH,aAAa,EAAEwH,qBAAqB,CAAC9D,GAASwB,IAAI,CAAC,GAAarB,EAAQ,IAAI,CAAC3D,KAAK,CAAE,IAAI,CAACD,QAAQ,EACrI,CASAwH,qBAA4BC,CAAgD,CAAEhE,CAA+B,CAAE,CAC3G,OAAO6D,EAAoB,IAAI,CAACvH,aAAa,EAAEyH,oBAAoB,CAACC,EAAyBhE,GAASwB,IAAI,CAAC,GAAarB,EAAQ,IAAI,CAAC3D,KAAK,CAAE,IAAI,CAACD,QAAQ,EAC7J,CACJ,CClHO,IAAM2H,EAAc,SAAS5H,CAA6B,EAC7D,IAAM+D,EApDC,CAQH8D,OAAQ,eAAOxC,CAAAA,CAAcyC,CAAAA,MASrB5D,EATmDR,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAiC,CAAC,EAEzF/C,EAAkB,SAAU,OAAQ0E,GAEpC1E,EAAkB,SAAU,gBAAiBmH,GAC7C,IAAMxC,EAAe,wBAChBzF,OAAO,CAAE,SAAc0F,mBAAmBC,OAAOH,KAEhDlB,EAAiB,IAAIC,IAAIkB,EAAc5E,GAoCQV,GAjCjDkE,CAAAA,EAAclE,EAAckE,WAAW,EAG3C,IAAMG,EAAyB,CAAEC,OAAQ,OAAQ,GAAGJ,CAAW,CAAE,GAAGR,CAAO,EACrEa,EAA0B,CAAC,CAKjC,OAAMvD,EAAsBuD,EAwByBvE,GApBrDuE,CAAuB,CAAC,eAAe,CAAG,mBAE1CrD,EAAgBiD,EAVe,CAAC,GAWhC,IAAIK,EAAyBN,GAAeA,EAAYlB,OAAO,CAAGkB,EAAYlB,OAAO,CAAG,CAAC,EAIzF,OAHAqB,EAAuBrB,OAAO,CAAG,CAAC,GAAGuB,CAAuB,CAAE,GAAGC,CAAsB,CAAE,GAAGd,EAAQV,OAAO,EAC3GqB,EAAuBnF,IAAI,CAAGwD,EAAsBoF,EAAezD,EAedrE,GAb9C,CACHmB,IAAKiC,EAAae,GAClBT,QAASW,CACb,CACJ,CACJ,EASA,MAAO,CAQH,MAAMwD,OAAOxC,CAAY,CAAEyC,CAA4B,CAAEpE,CAA+B,MAG5CjD,EAAAA,EADHT,EADrC,IAAM6E,EAAoB,MAAMd,EAA0B8D,MAAM,CAACxC,EAAMyC,EAAepE,GAChFoB,EAA+B9E,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAe+E,WAAW,GAA1B/E,KAAAA,IAAAA,EAAAA,EAA8B,EAC7DgF,EAAAA,OAAkCvE,CAAAA,EAAAA,CAAkB,CAAC,mBAAmB,GAAtCA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,CAAwC,CAACqE,EAA6B,GAAtErE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAwEU,GAAG,CACnH,MAAO,CAACjB,EAAOD,IAAasD,EAAsBsB,EAAmB1E,EAAAA,CAAWA,CAAEP,EAAWI,GAAeE,EAAO8E,GAAmC/E,EAC1J,CACJ,CACJ,CA4BO,OAAM8H,UAAkBjI,EAS3B+H,OAAcxC,CAAY,CAAEyC,CAA4B,CAAEpE,CAA+B,CAAE,CACvF,OAAOkE,EAAY,IAAI,CAAC5H,aAAa,EAAE6H,MAAM,CAACxC,EAAMyC,EAAepE,GAASwB,IAAI,CAAC,GAAarB,EAAQ,IAAI,CAAC3D,KAAK,CAAE,IAAI,CAACD,QAAQ,EACnI,CACJ,CCtDO,IAAM+H,EAAe,SAAShI,CAA6B,EAC9D,IAAM+D,EAvDC,CAQHkE,OAAQ,eAAOC,CAAAA,CAA0BhB,CAAAA,MAOjChD,EAP8CR,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAiC,CAAC,EAEpF/C,EAAkB,SAAU,SAAUuH,GACtC,IAAM5C,EAAe,oBAChBzF,OAAO,CAAE,WAAgB0F,mBAAmBC,OAAO0C,KAElD/D,EAAiB,IAAIC,IAAIkB,EAAc5E,GAyCSV,GAtClDkE,CAAAA,EAAclE,EAAckE,WAAW,EAG3C,IAAMG,EAAyB,CAAEC,OAAQ,OAAQ,GAAGJ,CAAW,CAAE,GAAGR,CAAO,EACrEa,EAA0B,CAAC,EAE3B4C,EAAqB,GAAKnH,CAAAA,GAAkBA,EAAcoH,YAAY,EAAKC,QAAAA,CAIjF,OAAMrG,EAAsBuD,EA4B0BvE,GAzBzCmD,KAAAA,IAAT+D,GACAC,EAAmB3E,MAAM,CAAC,OAAQ0E,GAItC3C,CAAuB,CAAC,eAAe,CAAG,sBAE1CrD,EAAgBiD,EAfe,CAAC,GAgBhC,IAAIK,EAAyBN,GAAeA,EAAYlB,OAAO,CAAGkB,EAAYlB,OAAO,CAAG,CAAC,EAIzF,OAHAqB,EAAuBrB,OAAO,CAAG,CAAC,GAAGuB,CAAuB,CAAE,GAAGC,CAAsB,CAAE,GAAGd,EAAQV,OAAO,EAC3GqB,EAAuBnF,IAAI,CAAGiI,EAEvB,CACHhG,IAAKiC,EAAae,GAClBT,QAASW,CACb,CACJ,CACJ,EASA,MAAO,CAQH,MAAM4D,OAAOC,CAAwB,CAAEhB,CAAW,CAAExD,CAA+B,MAGvCjD,EAAAA,EADHT,EADrC,IAAM6E,EAAoB,MAAMd,EAA0BkE,MAAM,CAACC,EAAQhB,EAAMxD,GACzEoB,EAA+B9E,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAe+E,WAAW,GAA1B/E,KAAAA,IAAAA,EAAAA,EAA8B,EAC7DgF,EAAAA,OAAkCvE,CAAAA,EAAAA,CAAkB,CAAC,oBAAoB,GAAvCA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,CAAyC,CAACqE,EAA6B,GAAvErE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAyEU,GAAG,CACpH,MAAO,CAACjB,EAAOD,IAAasD,EAAsBsB,EAAmB1E,EAAAA,CAAWA,CAAEP,EAAWI,GAAeE,EAAO8E,GAAmC/E,EAC1J,CACJ,CACJ,CA4BO,OAAMkI,UAAmBrI,EAS5BmI,OAAcC,CAAwB,CAAEhB,CAAW,CAAExD,CAA+B,CAAE,CAClF,OAAOsE,EAAa,IAAI,CAAChI,aAAa,EAAEiI,MAAM,CAACC,EAAQhB,EAAMxD,GAASwB,IAAI,CAAC,GAAarB,EAAQ,IAAI,CAAC3D,KAAK,CAAE,IAAI,CAACD,QAAQ,EAC7H,CACJ,CCoKO,IAAMmI,EAAY,SAASpI,CAA6B,EAC3D,IAAM+D,EAlRC,CAQH0B,QAAS,eAAOC,CAAAA,CAAoB2C,CAAAA,MAQ5BnE,EAR4CR,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAiC,CAAC,EAElF/C,EAAkB,UAAW,aAAc+E,GAE3C/E,EAAkB,UAAW,SAAU0H,GAGvC,IAAMlE,EAAiB,IAAIC,IAFL,sBAEuB1D,GAmQMV,GAhQ/CkE,CAAAA,EAAclE,EAAckE,WAAW,EAG3C,IAAMG,EAAyB,CAAEC,OAAQ,MAAO,GAAGJ,CAAW,CAAE,GAAGR,CAAO,EACpEa,EAA0B,CAAC,EAC3BqB,EAAyB,CAAC,CAIhC,OAAM5E,EAAsBuD,EAuPuBvE,GArPhCmD,KAAAA,IAAfuC,GACAE,CAAAA,EAAuB,UAAa,CAAGF,CAAAA,EAG5BvC,KAAAA,IAAXkF,GACAzC,CAAAA,EAAuB,MAAS,CAAGyC,CAAAA,EAKvCnH,EAAgBiD,EAAgByB,GAChC,IAAIpB,EAAyBN,GAAeA,EAAYlB,OAAO,CAAGkB,EAAYlB,OAAO,CAAG,CAAC,EAGzF,OAFAqB,EAAuBrB,OAAO,CAAG,CAAC,GAAGuB,CAAuB,CAAE,GAAGC,CAAsB,CAAE,GAAGd,EAAQV,OAAO,EAEpG,CACH7B,IAAKiC,EAAae,GAClBT,QAASW,CACb,CACJ,EAOAiE,cAAe,eAAOjD,CAAAA,MAOdnB,EAP4BR,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAiC,CAAC,EAElE/C,EAAkB,gBAAiB,OAAQ0E,GAC3C,IAAMC,EAAe,8BAChBzF,OAAO,CAAE,SAAc0F,mBAAmBC,OAAOH,KAEhDlB,EAAiB,IAAIC,IAAIkB,EAAc5E,GAsNMV,GAnN/CkE,CAAAA,EAAclE,EAAckE,WAAW,EAG3C,IAAMG,EAAyB,CAAEC,OAAQ,QAAS,GAAGJ,CAAW,CAAE,GAAGR,CAAO,EACtEa,EAA0B,CAAC,CAKjC,OAAMvD,EAAsBuD,EA0MuBvE,GAtMnDkB,EAAgBiD,EARe,CAAC,GAShC,IAAIK,EAAyBN,GAAeA,EAAYlB,OAAO,CAAGkB,EAAYlB,OAAO,CAAG,CAAC,EAGzF,OAFAqB,EAAuBrB,OAAO,CAAG,CAAC,GAAGuB,CAAuB,CAAE,GAAGC,CAAsB,CAAE,GAAGd,EAAQV,OAAO,EAEpG,CACH7B,IAAKiC,EAAae,GAClBT,QAASW,CACb,CACJ,EAOAkE,QAAS,eAAOlD,CAAAA,MAORnB,EAPsBR,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAiC,CAAC,EAE5D/C,EAAkB,UAAW,OAAQ0E,GACrC,IAAMC,EAAe,wBAChBzF,OAAO,CAAE,SAAc0F,mBAAmBC,OAAOH,KAEhDlB,EAAiB,IAAIC,IAAIkB,EAAc5E,GAiLMV,GA9K/CkE,CAAAA,EAAclE,EAAckE,WAAW,EAG3C,IAAMG,EAAyB,CAAEC,OAAQ,MAAO,GAAGJ,CAAW,CAAE,GAAGR,CAAO,EACpEa,EAA0B,CAAC,CAKjC,OAAMvD,EAAsBuD,EAqKuBvE,GAjKnDkB,EAAgBiD,EARe,CAAC,GAShC,IAAIK,EAAyBN,GAAeA,EAAYlB,OAAO,CAAGkB,EAAYlB,OAAO,CAAG,CAAC,EAGzF,OAFAqB,EAAuBrB,OAAO,CAAG,CAAC,GAAGuB,CAAuB,CAAE,GAAGC,CAAsB,CAAE,GAAGd,EAAQV,OAAO,EAEpG,CACH7B,IAAKiC,EAAae,GAClBT,QAASW,CACb,CACJ,EAMAmE,QAAS,qBAIDtE,EAJQR,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAiC,CAAC,EAGxCS,EAAiB,IAAIC,IAFL,gBAEuB1D,GAgJMV,GA7I/CkE,CAAAA,EAAclE,EAAckE,WAAW,EAG3C,IAAMG,EAAyB,CAAEC,OAAQ,MAAO,GAAGJ,CAAW,CAAE,GAAGR,CAAO,EACpEa,EAA0B,CAAC,CAKjC,OAAMvD,EAAsBuD,EAoIuBvE,GAhInDkB,EAAgBiD,EARe,CAAC,GAShC,IAAIK,EAAyBN,GAAeA,EAAYlB,OAAO,CAAGkB,EAAYlB,OAAO,CAAG,CAAC,EAGzF,OAFAqB,EAAuBrB,OAAO,CAAG,CAAC,GAAGuB,CAAuB,CAAE,GAAGC,CAAsB,CAAE,GAAGd,EAAQV,OAAO,EAEpG,CACH7B,IAAKiC,EAAae,GAClBT,QAASW,CACb,CACJ,EAOAjF,OAAQ,eAAOqJ,CAAAA,MAOPvE,EAPmBR,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAiC,CAAC,EAEzD/C,EAAkB,SAAU,KAAM8H,GAClC,IAAMnD,EAAe,0BAChBzF,OAAO,CAAE,OAAY0F,mBAAmBC,OAAOiD,KAE9CtE,EAAiB,IAAIC,IAAIkB,EAAc5E,GA2GMV,GAxG/CkE,CAAAA,EAAclE,EAAckE,WAAW,EAG3C,IAAMG,EAAyB,CAAEC,OAAQ,SAAU,GAAGJ,CAAW,CAAE,GAAGR,CAAO,EACvEa,EAA0B,CAAC,CAKjC,OAAMvD,EAAsBuD,EA+FuBvE,GA3FnDkB,EAAgBiD,EARe,CAAC,GAShC,IAAIK,EAAyBN,GAAeA,EAAYlB,OAAO,CAAGkB,EAAYlB,OAAO,CAAG,CAAC,EAGzF,OAFAqB,EAAuBrB,OAAO,CAAG,CAAC,GAAGuB,CAAuB,CAAE,GAAGC,CAAsB,CAAE,GAAGd,EAAQV,OAAO,EAEpG,CACH7B,IAAKiC,EAAae,GAClBT,QAASW,CACb,CACJ,EAOAqE,aAAc,eAAOrD,CAAAA,MAObnB,EAP2BR,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAiC,CAAC,EAEjE/C,EAAkB,eAAgB,OAAQ0E,GAC1C,IAAMC,EAAe,6BAChBzF,OAAO,CAAE,SAAc0F,mBAAmBC,OAAOH,KAEhDlB,EAAiB,IAAIC,IAAIkB,EAAc5E,GAsEMV,GAnE/CkE,CAAAA,EAAclE,EAAckE,WAAW,EAG3C,IAAMG,EAAyB,CAAEC,OAAQ,QAAS,GAAGJ,CAAW,CAAE,GAAGR,CAAO,EACtEa,EAA0B,CAAC,CAKjC,OAAMvD,EAAsBuD,EA0DuBvE,GAtDnDkB,EAAgBiD,EARe,CAAC,GAShC,IAAIK,EAAyBN,GAAeA,EAAYlB,OAAO,CAAGkB,EAAYlB,OAAO,CAAG,CAAC,EAGzF,OAFAqB,EAAuBrB,OAAO,CAAG,CAAC,GAAGuB,CAAuB,CAAE,GAAGC,CAAsB,CAAE,GAAGd,EAAQV,OAAO,EAEpG,CACH7B,IAAKiC,EAAae,GAClBT,QAASW,CACb,CACJ,EAOAsE,WAAY,eAAOtD,CAAAA,MAOXnB,EAPyBR,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CAAiC,CAAC,EAE/D/C,EAAkB,aAAc,OAAQ0E,GACxC,IAAMC,EAAe,2BAChBzF,OAAO,CAAE,SAAc0F,mBAAmBC,OAAOH,KAEhDlB,EAAiB,IAAIC,IAAIkB,EAAc5E,GAiCMV,GA9B/CkE,CAAAA,EAAclE,EAAckE,WAAW,EAG3C,IAAMG,EAAyB,CAAEC,OAAQ,QAAS,GAAGJ,CAAW,CAAE,GAAGR,CAAO,EACtEa,EAA0B,CAAC,CAKjC,OAAMvD,EAAsBuD,EAqBuBvE,GAjBnDkB,EAAgBiD,EARe,CAAC,GAShC,IAAIK,EAAyBN,GAAeA,EAAYlB,OAAO,CAAGkB,EAAYlB,OAAO,CAAG,CAAC,EAGzF,OAFAqB,EAAuBrB,OAAO,CAAG,CAAC,GAAGuB,CAAuB,CAAE,GAAGC,CAAsB,CAAE,GAAGd,EAAQV,OAAO,EAEpG,CACH7B,IAAKiC,EAAae,GAClBT,QAASW,CACb,CACJ,CACJ,EASA,MAAO,CAQH,MAAMoB,QAAQC,CAAkB,CAAE2C,CAAc,CAAE3E,CAA+B,MAGrCjD,EAAAA,EADHT,EADrC,IAAM6E,EAAoB,MAAMd,EAA0B0B,OAAO,CAACC,EAAY2C,EAAQ3E,GAChFoB,EAA+B9E,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAe+E,WAAW,GAA1B/E,KAAAA,IAAAA,EAAAA,EAA8B,EAC7DgF,EAAAA,OAAkCvE,CAAAA,EAAAA,CAAkB,CAAC,kBAAkB,GAArCA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,CAAuC,CAACqE,EAA6B,GAArErE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAuEU,GAAG,CAClH,MAAO,CAACjB,EAAOD,IAAasD,EAAsBsB,EAAmB1E,EAAAA,CAAWA,CAAEP,EAAWI,GAAeE,EAAO8E,GAAmC/E,EAC1J,EAOA,MAAMqI,cAAcjD,CAAY,CAAE3B,CAA+B,MAGrBjD,EAAAA,EADHT,EADrC,IAAM6E,EAAoB,MAAMd,EAA0BuE,aAAa,CAACjD,EAAM3B,GACxEoB,EAA+B9E,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAe+E,WAAW,GAA1B/E,KAAAA,IAAAA,EAAAA,EAA8B,EAC7DgF,EAAAA,OAAkCvE,CAAAA,EAAAA,CAAkB,CAAC,wBAAwB,GAA3CA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,CAA6C,CAACqE,EAA6B,GAA3ErE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA6EU,GAAG,CACxH,MAAO,CAACjB,EAAOD,IAAasD,EAAsBsB,EAAmB1E,EAAAA,CAAWA,CAAEP,EAAWI,GAAeE,EAAO8E,GAAmC/E,EAC1J,EAOA,MAAMsI,QAAQlD,CAAY,CAAE3B,CAA+B,MAGfjD,EAAAA,EADHT,EADrC,IAAM6E,EAAoB,MAAMd,EAA0BwE,OAAO,CAAClD,EAAM3B,GAClEoB,EAA+B9E,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAe+E,WAAW,GAA1B/E,KAAAA,IAAAA,EAAAA,EAA8B,EAC7DgF,EAAAA,OAAkCvE,CAAAA,EAAAA,CAAkB,CAAC,kBAAkB,GAArCA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,CAAuC,CAACqE,EAA6B,GAArErE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAuEU,GAAG,CAClH,MAAO,CAACjB,EAAOD,IAAasD,EAAsBsB,EAAmB1E,EAAAA,CAAWA,CAAEP,EAAWI,GAAeE,EAAO8E,GAAmC/E,EAC1J,EAMA,MAAMuI,QAAQ9E,CAA+B,MAGDjD,EAAAA,EADHT,EADrC,IAAM6E,EAAoB,MAAMd,EAA0ByE,OAAO,CAAC9E,GAC5DoB,EAA+B9E,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAe+E,WAAW,GAA1B/E,KAAAA,IAAAA,EAAAA,EAA8B,EAC7DgF,EAAAA,OAAkCvE,CAAAA,EAAAA,CAAkB,CAAC,kBAAkB,GAArCA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,CAAuC,CAACqE,EAA6B,GAArErE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAuEU,GAAG,CAClH,MAAO,CAACjB,EAAOD,IAAasD,EAAsBsB,EAAmB1E,EAAAA,CAAWA,CAAEP,EAAWI,GAAeE,EAAO8E,GAAmC/E,EAC1J,EAOA,MAAMb,OAAOqJ,CAAU,CAAE/E,CAA+B,MAGZjD,EAAAA,EADHT,EADrC,IAAM6E,EAAoB,MAAMd,EAA0B3E,MAAM,CAACqJ,EAAI/E,GAC/DoB,EAA+B9E,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAe+E,WAAW,GAA1B/E,KAAAA,IAAAA,EAAAA,EAA8B,EAC7DgF,EAAAA,OAAkCvE,CAAAA,EAAAA,CAAkB,CAAC,iBAAiB,GAApCA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,CAAsC,CAACqE,EAA6B,GAApErE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAsEU,GAAG,CACjH,MAAO,CAACjB,EAAOD,IAAasD,EAAsBsB,EAAmB1E,EAAAA,CAAWA,CAAEP,EAAWI,GAAeE,EAAO8E,GAAmC/E,EAC1J,EAOA,MAAMyI,aAAarD,CAAY,CAAE3B,CAA+B,MAGpBjD,EAAAA,EADHT,EADrC,IAAM6E,EAAoB,MAAMd,EAA0B2E,YAAY,CAACrD,EAAM3B,GACvEoB,EAA+B9E,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAe+E,WAAW,GAA1B/E,KAAAA,IAAAA,EAAAA,EAA8B,EAC7DgF,EAAAA,OAAkCvE,CAAAA,EAAAA,CAAkB,CAAC,uBAAuB,GAA1CA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,CAA4C,CAACqE,EAA6B,GAA1ErE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA4EU,GAAG,CACvH,MAAO,CAACjB,EAAOD,IAAasD,EAAsBsB,EAAmB1E,EAAAA,CAAWA,CAAEP,EAAWI,GAAeE,EAAO8E,GAAmC/E,EAC1J,EAOA,MAAM0I,WAAWtD,CAAY,CAAE3B,CAA+B,MAGlBjD,EAAAA,EADHT,EADrC,IAAM6E,EAAoB,MAAMd,EAA0B4E,UAAU,CAACtD,EAAM3B,GACrEoB,EAA+B9E,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAe+E,WAAW,GAA1B/E,KAAAA,IAAAA,EAAAA,EAA8B,EAC7DgF,EAAAA,OAAkCvE,CAAAA,EAAAA,CAAkB,CAAC,qBAAqB,GAAxCA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,CAA0C,CAACqE,EAA6B,GAAxErE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA0EU,GAAG,CACrH,MAAO,CAACjB,EAAOD,IAAasD,EAAsBsB,EAAmB1E,EAAAA,CAAWA,CAAEP,EAAWI,GAAeE,EAAO8E,GAAmC/E,EAC1J,CACJ,CACJ,CAiFO,OAAM2I,UAAgB9I,EASzB2F,QAAeC,CAAkB,CAAE2C,CAAc,CAAE3E,CAA+B,CAAE,CAChF,OAAO0E,EAAU,IAAI,CAACpI,aAAa,EAAEyF,OAAO,CAACC,EAAY2C,EAAQ3E,GAASwB,IAAI,CAAC,GAAarB,EAAQ,IAAI,CAAC3D,KAAK,CAAE,IAAI,CAACD,QAAQ,EACjI,CASAqI,cAAqBjD,CAAY,CAAE3B,CAA+B,CAAE,CAChE,OAAO0E,EAAU,IAAI,CAACpI,aAAa,EAAEsI,aAAa,CAACjD,EAAM3B,GAASwB,IAAI,CAAC,GAAarB,EAAQ,IAAI,CAAC3D,KAAK,CAAE,IAAI,CAACD,QAAQ,EACzH,CASAsI,QAAelD,CAAY,CAAE3B,CAA+B,CAAE,CAC1D,OAAO0E,EAAU,IAAI,CAACpI,aAAa,EAAEuI,OAAO,CAAClD,EAAM3B,GAASwB,IAAI,CAAC,GAAarB,EAAQ,IAAI,CAAC3D,KAAK,CAAE,IAAI,CAACD,QAAQ,EACnH,CAQAuI,QAAe9E,CAA+B,CAAE,CAC5C,OAAO0E,EAAU,IAAI,CAACpI,aAAa,EAAEwI,OAAO,CAAC9E,GAASwB,IAAI,CAAC,GAAarB,EAAQ,IAAI,CAAC3D,KAAK,CAAE,IAAI,CAACD,QAAQ,EAC7G,CASAb,OAAcqJ,CAAU,CAAE/E,CAA+B,CAAE,CACvD,OAAO0E,EAAU,IAAI,CAACpI,aAAa,EAAEZ,MAAM,CAACqJ,EAAI/E,GAASwB,IAAI,CAAC,GAAarB,EAAQ,IAAI,CAAC3D,KAAK,CAAE,IAAI,CAACD,QAAQ,EAChH,CASAyI,aAAoBrD,CAAY,CAAE3B,CAA+B,CAAE,CAC/D,OAAO0E,EAAU,IAAI,CAACpI,aAAa,EAAE0I,YAAY,CAACrD,EAAM3B,GAASwB,IAAI,CAAC,GAAarB,EAAQ,IAAI,CAAC3D,KAAK,CAAE,IAAI,CAACD,QAAQ,EACxH,CASA0I,WAAkBtD,CAAY,CAAE3B,CAA+B,CAAE,CAC7D,OAAO0E,EAAU,IAAI,CAACpI,aAAa,EAAE2I,UAAU,CAACtD,EAAM3B,GAASwB,IAAI,CAAC,GAAarB,EAAQ,IAAI,CAAC3D,KAAK,CAAE,IAAI,CAACD,QAAQ,EACtH,CACJ,iDK9hBO,IAAM4I,EAAuB,MACnCC,IAEA,IAAMrK,EAAcD,CAAAA,EAAAA,EAAAA,EAAAA,IAKpB,OAHIsK,EAAO9F,OAAO,EAAIvE,GACrBqK,CAAAA,EAAO9F,OAAO,CAAC+F,aAAa,CAAG,UAAsBhI,MAAA,CAAZtC,EAAAA,EAEnCqK,CACR,EACaE,EAAwB,MAAOrJ,QAGvCA,EAEFA,EAJF,IAAMsJ,EAAkBtJ,EAAMmJ,MAAM,CAGpC,GAFAlK,QAAQC,GAAG,CAACoK,EAAgBC,QAAQ,EAChCvJ,CAAAA,OAAAA,CAAAA,EAAAA,EAAML,QAAQ,GAAdK,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAgBwJ,MAAM,IAAK,KAAKhK,CAAAA,EAAAA,EAAAA,EAAAA,IAEnC,CAACQ,CAAAA,OAAAA,CAAAA,EAAAA,EAAML,QAAQ,GAAdK,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAgBwJ,MAAM,IAAK,KAC3BzJ,gBAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAWC,IACXD,kBAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAWC,IACXD,yBAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAWC,EAAW,GACvBsJ,GACA,CAACA,EAAgBC,QAAQ,CACxB,CACDD,EAAgBC,QAAQ,CAAG,GAC3B,GAAI,CAEH,OADA,MAAM7J,CAAAA,EAAAA,EAAAA,EAAAA,IACC,MAAMa,EAAAA,CAAKA,CAAC2D,OAAO,CAAC,CAC1B,GAAGoF,CAAe,CAClBjG,QAAS,CACR,GAAGiG,EAAgBjG,OAAO,CAC1B+F,cAAe,UAA2BhI,MAAA,CAAjBvC,CAAAA,EAAAA,EAAAA,EAAAA,IAC1B,CACD,EACD,CAAE,MAAOmB,EAAO,CACf,GACCD,gBAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAWC,IACXD,yBAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAWC,IACXD,kBAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAWC,GAEX,MAAOR,CAAAA,EAAAA,EAAAA,EAAAA,IAGR,MADAiK,CAAAA,EAAAA,EAAAA,EAAAA,EAAWzJ,GACJ0J,QAAQC,MAAM,CAAC3J,EACvB,CACD,CAGA,MADAyJ,CAAAA,EAAAA,EAAAA,EAAAA,EAAWzJ,GACJ0J,QAAQC,MAAM,CAAC3J,EACvB,EAEa4J,EAAWrJ,EAAAA,CAAKA,CAAC2F,MAAM,CAAC,CACpC7C,QAAS,CACR,eAAgB,kBACjB,CACD,GAEAuG,EAASC,YAAY,CAAC3F,OAAO,CAAC4F,GAAG,CAACZ,GAClCU,EAASC,YAAY,CAAClK,QAAQ,CAACmK,GAAG,CAACtG,KAAAA,EAAW6F,GClD9C,IAAMU,EAAa,CAClBzJ,SAAU0J,EAAAA,CAASA,CACnB5G,WAAY,IAAM,EACnB,EAEMvD,EAAO,IAAIyF,EAAQyE,EAAYC,EAAAA,CAASA,CAAExG,KAAAA,GAE1CyG,EAAO,IAAI1D,EAAQwD,EAAYC,EAAAA,CAASA,CAAEJ,GAE1C9D,EAAU,IAAIa,EAAWoD,EAAYC,EAAAA,CAASA,CAAEJ,GAEhDM,EAAQ,IAAInD,EAASgD,EAAYC,EAAAA,CAASA,CAAEJ,GAE5CO,EAAQ,IAAIjD,EAAS6C,EAAYC,EAAAA,CAASA,CAAEJ,GAE5CQ,EAAS,IAAIzC,EAAUoC,EAAYC,EAAAA,CAASA,CAAEJ,GAE9CS,EAAiB,IAAIrC,EAAkB+B,EAAYC,EAAAA,CAASA,CAAEJ,GAQpE,IAAAhK,EAAe,CACdC,KAAAA,EACAoK,KAAAA,EACAnE,QAAAA,EACAoE,MAAAA,EACAC,MAAAA,EACAC,OAAAA,EACAC,eAAAA,EACAnC,OAdc,IAAIE,EAAU2B,EAAYC,EAAAA,CAASA,CAAEJ,GAenDU,QAbe,IAAI9B,EAAWuB,EAAYC,EAAAA,CAASA,CAAEJ,GAcrDW,KAZY,IAAItB,EAAQc,EAAYC,EAAAA,CAASA,CAAEJ,EAahD,4JC/CO,IAAMH,EAAa,CAACzJ,EAAgBT,KAC1CiL,EAAAA,CAAKA,CAACxK,KAAK,CAAC,4CAA6C,CACxD,GAAGT,CAAI,CACPkL,YAAa1K,CAAAA,EAAAA,EAAAA,CAAAA,EAAWC,EACzB,EACD,EAEa0K,EAAe,CAACC,EAAiBpL,KAC7CiL,EAAAA,CAAKA,CAACI,OAAO,CAACD,EAASpL,EACxB,EAEasL,EAAY,CAACF,EAAiBpL,KAC1CiL,EAAAA,CAAKA,CAACM,IAAI,CAACH,EAASpL,EACrB,EAEawL,EAAc,CAC1BJ,EACApL,KAEAiL,CAAAA,EAAAA,EAAAA,CAAAA,EAAMG,EAAS,CACd,GAAGpL,CAAI,EAET,gFC1BO,IAAMyK,EAAY,yCAEZgB,EAAa,GACzB,CAAIC,MAAAA,EAAAA,KAAAA,EAAAA,EAAMC,UAAU,CAAC,SAAgBD,EAC9B,6CAAkD7J,MAAA,CAAL6J,kFCe9C,IAAME,EAAe,CAC3BC,aAAc,yBACdC,eAAgB,+CAChBC,aAAc,wCACdC,kBAAmB,qBACpB,EAEaC,EAAc,CAC1BC,gBAAiB,oBAGjBC,eAAgB,kBAGhBC,YAAa,eACbC,cAAe,iBAIfC,aAAc,iBACdC,iBAAkB,qBAGlBC,aAAc,iBAGdC,kBAAmB,wBACpB,uEC5CO,IAAMjM,EAAa,QAEdC,EAAAA,EAGOA,EAAAA,QAJlB,UAAI,OAAOA,EAA2BA,EAClC,gBAAOA,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAAOL,QAAQ,GAAfK,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAAiBT,IAAI,GAArBS,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAuB2K,OAAO,EACjC3K,EAAML,QAAQ,CAACJ,IAAI,CAACoL,OAAO,CAE/BtI,MAAMC,OAAO,CAACtC,MAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAAOL,QAAQ,GAAfK,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAAiBT,IAAI,GAArBS,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAuB2K,OAAO,EACxC3K,EAAML,QAAQ,CAACJ,IAAI,CAACoL,OAAO,CAACsB,GAAG,CAAC,GAAeC,GAAGC,IAAI,CAAC,MAC3D,iBAAOnM,EAAM2K,OAAO,CAAsB3K,EAAM2K,OAAO,CACpDQ,EAAAA,EAAYA,CAACE,cAAc,AACnC","sources":["webpack://_N_E/./redux/auth/auth-helper.ts","webpack://_N_E/../../libs/global/api-client/base.ts","webpack://_N_E/../../libs/global/api-client/common.ts","webpack://_N_E/../../libs/global/api-client/clients/auth-api.ts","webpack://_N_E/../../libs/global/api-client/clients/book-api.ts","webpack://_N_E/../../libs/global/api-client/clients/catalog-api.ts","webpack://_N_E/../../libs/global/api-client/clients/ebook-api.ts","webpack://_N_E/../../libs/global/api-client/clients/genre-api.ts","webpack://_N_E/../../libs/global/api-client/clients/health-api.ts","webpack://_N_E/../../libs/global/api-client/clients/parser-api.ts","webpack://_N_E/../../libs/global/api-client/clients/recommendation-api.ts","webpack://_N_E/../../libs/global/api-client/clients/review-api.ts","webpack://_N_E/../../libs/global/api-client/clients/storage-api.ts","webpack://_N_E/../../libs/global/api-client/clients/user-api.ts","webpack://_N_E/../../libs/global/api-client/api.ts","webpack://_N_E/../../libs/global/api-client/models/auth-output-user.ts","webpack://_N_E/../../libs/global/api-client/models/index.ts","webpack://_N_E/../../libs/global/api-client/index.ts","webpack://_N_E/./services/api/interceptors.ts","webpack://_N_E/./services/api/index.tsx","webpack://_N_E/./utils/toast.ts","webpack://_N_E/../../libs/global/api-config.ts","webpack://_N_E/../../libs/global/errors.ts","webpack://_N_E/../../libs/global/helpers/catch-error.ts","webpack://_N_E/<anon>"],"sourcesContent":["import api from '@/services/api'\nimport { errorCatch } from 'global/helpers/catch-error'\nimport Cookies from 'js-cookie'\n\nexport const getAccessToken = () => {\n\tconst accessToken = Cookies.get('accessToken')\n\tconsole.log('getAccessToken', accessToken)\n\treturn accessToken || null\n}\n\nexport const getRefreshToken = () => {\n\tconst refreshToken = Cookies.get('refreshToken')\n\tconsole.log('getRefreshToken', refreshToken)\n\treturn refreshToken || null\n}\n\nexport const getTokensStorage = () => {\n\tconst accessToken = Cookies.get('accessToken') || null\n\tconst refreshToken = Cookies.get('refreshToken') || null\n\tconsole.log('getTokensStorage', { accessToken, refreshToken })\n\treturn { accessToken, refreshToken }\n}\n\nexport const saveTokensStorage = (data: {\n\taccessToken: string\n\trefreshToken: string\n}) => {\n\tCookies.set('accessToken', data.accessToken)\n\tCookies.set('refreshToken', data.refreshToken)\n\tconsole.log('saveTokensStorage', data)\n}\n\nexport const deleteTokensStorage = () => {\n\tconsole.log('deleteTokensStorage')\n\tCookies.remove('accessToken')\n\tCookies.remove('refreshToken')\n}\n\nexport const getNewTokens = async () => {\n\tconst refreshToken = getRefreshToken()\n\tif (!refreshToken) throw new Error('No refresh token')\n\tconsole.log('refreshToken', refreshToken)\n\tconst { data: response } = await api.auth\n\t\t.refreshToken({ refreshToken })\n\t\t.catch((error: any) => {\n\t\t\tif (errorCatch(error) === 'jwt expired') deleteTokensStorage()\n\t\t\tif (errorCatch(error) === 'jwt malformed') deleteTokensStorage()\n\t\t\tif (errorCatch(error) === 'jwt must be provided') deleteTokensStorage()\n\t\t\tthrow error\n\t\t})\n\tif (response.accessToken)\n\t\tsaveTokensStorage({\n\t\t\taccessToken: response.accessToken,\n\t\t\trefreshToken: response.refreshToken\n\t\t})\n\tif (!response.accessToken) throw new Error('No access token')\n\n\treturn response\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Booknex\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0\n * Contact: Github repository\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from './configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n\nexport const BASE_PATH = \"http://localhost\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: RawAxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath ?? basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    constructor(public field: string, msg?: string) {\n        super(msg);\n        this.name = \"RequiredError\"\n    }\n}\n\ninterface ServerMap {\n    [key: string]: {\n        url: string,\n        description: string,\n    }[];\n}\n\n/**\n *\n * @export\n */\nexport const operationServerMap: ServerMap = {\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Booknex\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0\n * Contact: Github repository\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from \"./configuration\";\nimport type { RequestArgs } from \"./base\";\nimport type { AxiosInstance, AxiosResponse } from 'axios';\nimport { RequiredError } from \"./base\";\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\nfunction setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = \"\"): void {\n    if (parameter == null) return;\n    if (typeof parameter === \"object\") {\n        if (Array.isArray(parameter)) {\n            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));\n        } \n        else {\n            Object.keys(parameter).forEach(currentKey => \n                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], `${key}${key !== '' ? '.' : ''}${currentKey}`)\n            );\n        }\n    } \n    else {\n        if (urlSearchParams.has(key)) {\n            urlSearchParams.append(key, parameter);\n        } \n        else {\n            urlSearchParams.set(key, parameter);\n        }\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    setFlattenedQueryParams(searchParams, objects);\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (axios.defaults.baseURL ? '' : configuration?.basePath ?? basePath) + axiosArgs.url};\n        return axios.request<T, R>(axiosRequestArgs);\n    };\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Booknex\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0\n * Contact: Github repository\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from '../configuration';\nimport type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';\n// @ts-ignore\nimport { AuthDto } from '../models';\n// @ts-ignore\nimport { AuthOutput } from '../models';\n// @ts-ignore\nimport { GoogleAuthDto } from '../models';\n// @ts-ignore\nimport { RefreshDto } from '../models';\n/**\n * AuthApi - axios parameter creator\n * @export\n */\nexport const AuthApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {GoogleAuthDto} googleAuthDto Sign in with google account\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        googleSign: async (googleAuthDto: GoogleAuthDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'googleAuthDto' is not null or undefined\n            assertParamExists('googleSign', 'googleAuthDto', googleAuthDto)\n            const localVarPath = `/auth/google-sign`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(googleAuthDto, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {AuthDto} authDto Login user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        mailLogin: async (authDto: AuthDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'authDto' is not null or undefined\n            assertParamExists('mailLogin', 'authDto', authDto)\n            const localVarPath = `/auth/mail-login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(authDto, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {AuthDto} authDto Register new user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        mailRegister: async (authDto: AuthDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'authDto' is not null or undefined\n            assertParamExists('mailRegister', 'authDto', authDto)\n            const localVarPath = `/auth/mail-register`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(authDto, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {RefreshDto} refreshDto Refresh access token\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refreshToken: async (refreshDto: RefreshDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'refreshDto' is not null or undefined\n            assertParamExists('refreshToken', 'refreshDto', refreshDto)\n            const localVarPath = `/auth/refresh`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(refreshDto, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AuthApi - functional programming interface\n * @export\n */\nexport const AuthApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @param {GoogleAuthDto} googleAuthDto Sign in with google account\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async googleSign(googleAuthDto: GoogleAuthDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthOutput>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.googleSign(googleAuthDto, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AuthApi.googleSign']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @param {AuthDto} authDto Login user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async mailLogin(authDto: AuthDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthOutput>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.mailLogin(authDto, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AuthApi.mailLogin']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @param {AuthDto} authDto Register new user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async mailRegister(authDto: AuthDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthOutput>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.mailRegister(authDto, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AuthApi.mailRegister']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @param {RefreshDto} refreshDto Refresh access token\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async refreshToken(refreshDto: RefreshDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthOutput>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshToken(refreshDto, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['AuthApi.refreshToken']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    }\n};\n\n/**\n * AuthApi - factory interface\n * @export\n */\nexport const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AuthApiFp(configuration)\n    return {\n        /**\n         * \n         * @param {GoogleAuthDto} googleAuthDto Sign in with google account\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        googleSign(googleAuthDto: GoogleAuthDto, options?: any): AxiosPromise<AuthOutput> {\n            return localVarFp.googleSign(googleAuthDto, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {AuthDto} authDto Login user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        mailLogin(authDto: AuthDto, options?: any): AxiosPromise<AuthOutput> {\n            return localVarFp.mailLogin(authDto, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {AuthDto} authDto Register new user\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        mailRegister(authDto: AuthDto, options?: any): AxiosPromise<AuthOutput> {\n            return localVarFp.mailRegister(authDto, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {RefreshDto} refreshDto Refresh access token\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refreshToken(refreshDto: RefreshDto, options?: any): AxiosPromise<AuthOutput> {\n            return localVarFp.refreshToken(refreshDto, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AuthApi - object-oriented interface\n * @export\n * @class AuthApi\n * @extends {BaseAPI}\n */\nexport class AuthApi extends BaseAPI {\n    /**\n     * \n     * @param {GoogleAuthDto} googleAuthDto Sign in with google account\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthApi\n     */\n    public googleSign(googleAuthDto: GoogleAuthDto, options?: RawAxiosRequestConfig) {\n        return AuthApiFp(this.configuration).googleSign(googleAuthDto, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {AuthDto} authDto Login user\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthApi\n     */\n    public mailLogin(authDto: AuthDto, options?: RawAxiosRequestConfig) {\n        return AuthApiFp(this.configuration).mailLogin(authDto, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {AuthDto} authDto Register new user\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthApi\n     */\n    public mailRegister(authDto: AuthDto, options?: RawAxiosRequestConfig) {\n        return AuthApiFp(this.configuration).mailRegister(authDto, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {RefreshDto} refreshDto Refresh access token\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthApi\n     */\n    public refreshToken(refreshDto: RefreshDto, options?: RawAxiosRequestConfig) {\n        return AuthApiFp(this.configuration).refreshToken(refreshDto, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Booknex\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0\n * Contact: Github repository\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from '../configuration';\nimport type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';\n// @ts-ignore\nimport { Book } from '../models';\n// @ts-ignore\nimport { CatalogOutput } from '../models';\n// @ts-ignore\nimport { CreateBookDto } from '../models';\n// @ts-ignore\nimport { FullBook } from '../models';\n// @ts-ignore\nimport { UpdateBookDto } from '../models';\n/**\n * BookApi - axios parameter creator\n * @export\n */\nexport const BookApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        adminInfoBySlug: async (slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'slug' is not null or undefined\n            assertParamExists('adminInfoBySlug', 'slug', slug)\n            const localVarPath = `/book/admin-info/by-slug/{slug}`\n                .replace(`{${\"slug\"}}`, encodeURIComponent(String(slug)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} searchTerm \n         * @param {number} page \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        catalog: async (searchTerm: string, page: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'searchTerm' is not null or undefined\n            assertParamExists('catalog', 'searchTerm', searchTerm)\n            // verify required parameter 'page' is not null or undefined\n            assertParamExists('catalog', 'page', page)\n            const localVarPath = `/book/admin/catalog`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (searchTerm !== undefined) {\n                localVarQueryParameter['searchTerm'] = searchTerm;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {CreateBookDto} createBookDto Create book\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        create: async (createBookDto: CreateBookDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'createBookDto' is not null or undefined\n            assertParamExists('create', 'createBookDto', createBookDto)\n            const localVarPath = `/book/admin/create`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createBookDto, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        infoBySlug: async (slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'slug' is not null or undefined\n            assertParamExists('infoBySlug', 'slug', slug)\n            const localVarPath = `/book/info/by-slug/{slug}`\n                .replace(`{${\"slug\"}}`, encodeURIComponent(String(slug)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        remove: async (slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'slug' is not null or undefined\n            assertParamExists('remove', 'slug', slug)\n            const localVarPath = `/book/admin/remove/{slug}`\n                .replace(`{${\"slug\"}}`, encodeURIComponent(String(slug)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} slug \n         * @param {UpdateBookDto} updateBookDto \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        update: async (slug: string, updateBookDto: UpdateBookDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'slug' is not null or undefined\n            assertParamExists('update', 'slug', slug)\n            // verify required parameter 'updateBookDto' is not null or undefined\n            assertParamExists('update', 'updateBookDto', updateBookDto)\n            const localVarPath = `/book/admin/update/{slug}`\n                .replace(`{${\"slug\"}}`, encodeURIComponent(String(slug)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateBookDto, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * BookApi - functional programming interface\n * @export\n */\nexport const BookApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = BookApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async adminInfoBySlug(slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FullBook>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.adminInfoBySlug(slug, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['BookApi.adminInfoBySlug']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @param {string} searchTerm \n         * @param {number} page \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async catalog(searchTerm: string, page: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogOutput>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.catalog(searchTerm, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['BookApi.catalog']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @param {CreateBookDto} createBookDto Create book\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async create(createBookDto: CreateBookDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.create(createBookDto, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['BookApi.create']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async infoBySlug(slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Book>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.infoBySlug(slug, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['BookApi.infoBySlug']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async remove(slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.remove(slug, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['BookApi.remove']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @param {string} slug \n         * @param {UpdateBookDto} updateBookDto \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async update(slug: string, updateBookDto: UpdateBookDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.update(slug, updateBookDto, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['BookApi.update']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    }\n};\n\n/**\n * BookApi - factory interface\n * @export\n */\nexport const BookApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = BookApiFp(configuration)\n    return {\n        /**\n         * \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        adminInfoBySlug(slug: string, options?: any): AxiosPromise<FullBook> {\n            return localVarFp.adminInfoBySlug(slug, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} searchTerm \n         * @param {number} page \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        catalog(searchTerm: string, page: number, options?: any): AxiosPromise<CatalogOutput> {\n            return localVarFp.catalog(searchTerm, page, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {CreateBookDto} createBookDto Create book\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        create(createBookDto: CreateBookDto, options?: any): AxiosPromise<void> {\n            return localVarFp.create(createBookDto, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        infoBySlug(slug: string, options?: any): AxiosPromise<Book> {\n            return localVarFp.infoBySlug(slug, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        remove(slug: string, options?: any): AxiosPromise<void> {\n            return localVarFp.remove(slug, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} slug \n         * @param {UpdateBookDto} updateBookDto \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        update(slug: string, updateBookDto: UpdateBookDto, options?: any): AxiosPromise<void> {\n            return localVarFp.update(slug, updateBookDto, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * BookApi - object-oriented interface\n * @export\n * @class BookApi\n * @extends {BaseAPI}\n */\nexport class BookApi extends BaseAPI {\n    /**\n     * \n     * @param {string} slug \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BookApi\n     */\n    public adminInfoBySlug(slug: string, options?: RawAxiosRequestConfig) {\n        return BookApiFp(this.configuration).adminInfoBySlug(slug, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} searchTerm \n     * @param {number} page \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BookApi\n     */\n    public catalog(searchTerm: string, page: number, options?: RawAxiosRequestConfig) {\n        return BookApiFp(this.configuration).catalog(searchTerm, page, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {CreateBookDto} createBookDto Create book\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BookApi\n     */\n    public create(createBookDto: CreateBookDto, options?: RawAxiosRequestConfig) {\n        return BookApiFp(this.configuration).create(createBookDto, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} slug \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BookApi\n     */\n    public infoBySlug(slug: string, options?: RawAxiosRequestConfig) {\n        return BookApiFp(this.configuration).infoBySlug(slug, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} slug \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BookApi\n     */\n    public remove(slug: string, options?: RawAxiosRequestConfig) {\n        return BookApiFp(this.configuration).remove(slug, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} slug \n     * @param {UpdateBookDto} updateBookDto \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BookApi\n     */\n    public update(slug: string, updateBookDto: UpdateBookDto, options?: RawAxiosRequestConfig) {\n        return BookApiFp(this.configuration).update(slug, updateBookDto, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Booknex\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0\n * Contact: Github repository\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from '../configuration';\nimport type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';\n// @ts-ignore\nimport { FeaturedOutput } from '../models';\n// @ts-ignore\nimport { ShortBook } from '../models';\n/**\n * CatalogApi - axios parameter creator\n * @export\n */\nexport const CatalogApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        featured: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/catalog/featured`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} query \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        search: async (query: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'query' is not null or undefined\n            assertParamExists('search', 'query', query)\n            const localVarPath = `/catalog/search/{query}`\n                .replace(`{${\"query\"}}`, encodeURIComponent(String(query)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * CatalogApi - functional programming interface\n * @export\n */\nexport const CatalogApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = CatalogApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async featured(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturedOutput>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.featured(options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['CatalogApi.featured']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @param {string} query \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async search(query: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ShortBook>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.search(query, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['CatalogApi.search']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    }\n};\n\n/**\n * CatalogApi - factory interface\n * @export\n */\nexport const CatalogApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = CatalogApiFp(configuration)\n    return {\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        featured(options?: any): AxiosPromise<FeaturedOutput> {\n            return localVarFp.featured(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} query \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        search(query: string, options?: any): AxiosPromise<Array<ShortBook>> {\n            return localVarFp.search(query, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * CatalogApi - object-oriented interface\n * @export\n * @class CatalogApi\n * @extends {BaseAPI}\n */\nexport class CatalogApi extends BaseAPI {\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CatalogApi\n     */\n    public featured(options?: RawAxiosRequestConfig) {\n        return CatalogApiFp(this.configuration).featured(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} query \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CatalogApi\n     */\n    public search(query: string, options?: RawAxiosRequestConfig) {\n        return CatalogApiFp(this.configuration).search(query, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Booknex\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0\n * Contact: Github repository\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from '../configuration';\nimport type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';\n// @ts-ignore\nimport { EbookOutput } from '../models';\n// @ts-ignore\nimport { StoredEBook } from '../models';\n/**\n * EbookApi - axios parameter creator\n * @export\n */\nexport const EbookApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ebookBySlug: async (slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'slug' is not null or undefined\n            assertParamExists('ebookBySlug', 'slug', slug)\n            const localVarPath = `/ebook/ebook/by-slug/{slug}`\n                .replace(`{${\"slug\"}}`, encodeURIComponent(String(slug)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        storedEbookBySlug: async (slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'slug' is not null or undefined\n            assertParamExists('storedEbookBySlug', 'slug', slug)\n            const localVarPath = `/ebook/admin/stored-ebook/{slug}`\n                .replace(`{${\"slug\"}}`, encodeURIComponent(String(slug)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * EbookApi - functional programming interface\n * @export\n */\nexport const EbookApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = EbookApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async ebookBySlug(slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EbookOutput>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.ebookBySlug(slug, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['EbookApi.ebookBySlug']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async storedEbookBySlug(slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StoredEBook>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.storedEbookBySlug(slug, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['EbookApi.storedEbookBySlug']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    }\n};\n\n/**\n * EbookApi - factory interface\n * @export\n */\nexport const EbookApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = EbookApiFp(configuration)\n    return {\n        /**\n         * \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ebookBySlug(slug: string, options?: any): AxiosPromise<EbookOutput> {\n            return localVarFp.ebookBySlug(slug, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        storedEbookBySlug(slug: string, options?: any): AxiosPromise<Array<StoredEBook>> {\n            return localVarFp.storedEbookBySlug(slug, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * EbookApi - object-oriented interface\n * @export\n * @class EbookApi\n * @extends {BaseAPI}\n */\nexport class EbookApi extends BaseAPI {\n    /**\n     * \n     * @param {string} slug \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EbookApi\n     */\n    public ebookBySlug(slug: string, options?: RawAxiosRequestConfig) {\n        return EbookApiFp(this.configuration).ebookBySlug(slug, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} slug \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EbookApi\n     */\n    public storedEbookBySlug(slug: string, options?: RawAxiosRequestConfig) {\n        return EbookApiFp(this.configuration).storedEbookBySlug(slug, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Booknex\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0\n * Contact: Github repository\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from '../configuration';\nimport type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';\n// @ts-ignore\nimport { FindOneGenreOutput } from '../models';\n// @ts-ignore\nimport { ShortGenre } from '../models';\n/**\n * GenreApi - axios parameter creator\n * @export\n */\nexport const GenreApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        bySlug: async (slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'slug' is not null or undefined\n            assertParamExists('bySlug', 'slug', slug)\n            const localVarPath = `/genre/by-slug/{slug}`\n                .replace(`{${\"slug\"}}`, encodeURIComponent(String(slug)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        catalog: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/genre`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * GenreApi - functional programming interface\n * @export\n */\nexport const GenreApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = GenreApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async bySlug(slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindOneGenreOutput>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.bySlug(slug, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['GenreApi.bySlug']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async catalog(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ShortGenre>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.catalog(options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['GenreApi.catalog']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    }\n};\n\n/**\n * GenreApi - factory interface\n * @export\n */\nexport const GenreApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = GenreApiFp(configuration)\n    return {\n        /**\n         * \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        bySlug(slug: string, options?: any): AxiosPromise<FindOneGenreOutput> {\n            return localVarFp.bySlug(slug, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        catalog(options?: any): AxiosPromise<Array<ShortGenre>> {\n            return localVarFp.catalog(options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * GenreApi - object-oriented interface\n * @export\n * @class GenreApi\n * @extends {BaseAPI}\n */\nexport class GenreApi extends BaseAPI {\n    /**\n     * \n     * @param {string} slug \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GenreApi\n     */\n    public bySlug(slug: string, options?: RawAxiosRequestConfig) {\n        return GenreApiFp(this.configuration).bySlug(slug, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GenreApi\n     */\n    public catalog(options?: RawAxiosRequestConfig) {\n        return GenreApiFp(this.configuration).catalog(options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Booknex\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0\n * Contact: Github repository\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from '../configuration';\nimport type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';\n// @ts-ignore\nimport { Check503Response } from '../models';\n/**\n * HealthApi - axios parameter creator\n * @export\n */\nexport const HealthApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        check: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/health`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * HealthApi - functional programming interface\n * @export\n */\nexport const HealthApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async check(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.check(options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['HealthApi.check']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    }\n};\n\n/**\n * HealthApi - factory interface\n * @export\n */\nexport const HealthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = HealthApiFp(configuration)\n    return {\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        check(options?: any): AxiosPromise<object> {\n            return localVarFp.check(options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * HealthApi - object-oriented interface\n * @export\n * @class HealthApi\n * @extends {BaseAPI}\n */\nexport class HealthApi extends BaseAPI {\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HealthApi\n     */\n    public check(options?: RawAxiosRequestConfig) {\n        return HealthApiFp(this.configuration).check(options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Booknex\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0\n * Contact: Github repository\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from '../configuration';\nimport type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';\n// @ts-ignore\nimport { BookTemplate } from '../models';\n// @ts-ignore\nimport { BookTemplateCatalogOutput } from '../models';\n// @ts-ignore\nimport { ParserDto } from '../models';\n// @ts-ignore\nimport { UnfoldOutput } from '../models';\n/**\n * ParserApi - axios parameter creator\n * @export\n */\nexport const ParserApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        bySlug: async (slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'slug' is not null or undefined\n            assertParamExists('bySlug', 'slug', slug)\n            const localVarPath = `/parser/admin/by-slug/{slug}`\n                .replace(`{${\"slug\"}}`, encodeURIComponent(String(slug)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} [searchTerm] \n         * @param {number} [page] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        catalog: async (searchTerm?: string, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/parser/admin/catalog`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (searchTerm !== undefined) {\n                localVarQueryParameter['searchTerm'] = searchTerm;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {ParserDto} parserDto \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        parse: async (parserDto: ParserDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'parserDto' is not null or undefined\n            assertParamExists('parse', 'parserDto', parserDto)\n            const localVarPath = `/parser/admin/parse`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(parserDto, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        remove: async (slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'slug' is not null or undefined\n            assertParamExists('remove', 'slug', slug)\n            const localVarPath = `/parser/admin/remove/{slug}`\n                .replace(`{${\"slug\"}}`, encodeURIComponent(String(slug)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {File} [file] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unfold: async (file?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/parser/admin/unfold`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();\n\n            // authentication bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n            if (file !== undefined) { \n                localVarFormParams.append('file', file as any);\n            }\n    \n    \n            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = localVarFormParams;\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ParserApi - functional programming interface\n * @export\n */\nexport const ParserApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = ParserApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async bySlug(slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookTemplate>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.bySlug(slug, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['ParserApi.bySlug']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @param {string} [searchTerm] \n         * @param {number} [page] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async catalog(searchTerm?: string, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookTemplateCatalogOutput>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.catalog(searchTerm, page, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['ParserApi.catalog']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @param {ParserDto} parserDto \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async parse(parserDto: ParserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.parse(parserDto, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['ParserApi.parse']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async remove(slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.remove(slug, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['ParserApi.remove']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @param {File} [file] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async unfold(file?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UnfoldOutput>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.unfold(file, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['ParserApi.unfold']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    }\n};\n\n/**\n * ParserApi - factory interface\n * @export\n */\nexport const ParserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = ParserApiFp(configuration)\n    return {\n        /**\n         * \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        bySlug(slug: string, options?: any): AxiosPromise<BookTemplate> {\n            return localVarFp.bySlug(slug, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} [searchTerm] \n         * @param {number} [page] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        catalog(searchTerm?: string, page?: number, options?: any): AxiosPromise<BookTemplateCatalogOutput> {\n            return localVarFp.catalog(searchTerm, page, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {ParserDto} parserDto \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        parse(parserDto: ParserDto, options?: any): AxiosPromise<void> {\n            return localVarFp.parse(parserDto, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        remove(slug: string, options?: any): AxiosPromise<void> {\n            return localVarFp.remove(slug, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {File} [file] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        unfold(file?: File, options?: any): AxiosPromise<Array<UnfoldOutput>> {\n            return localVarFp.unfold(file, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * ParserApi - object-oriented interface\n * @export\n * @class ParserApi\n * @extends {BaseAPI}\n */\nexport class ParserApi extends BaseAPI {\n    /**\n     * \n     * @param {string} slug \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ParserApi\n     */\n    public bySlug(slug: string, options?: RawAxiosRequestConfig) {\n        return ParserApiFp(this.configuration).bySlug(slug, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} [searchTerm] \n     * @param {number} [page] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ParserApi\n     */\n    public catalog(searchTerm?: string, page?: number, options?: RawAxiosRequestConfig) {\n        return ParserApiFp(this.configuration).catalog(searchTerm, page, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {ParserDto} parserDto \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ParserApi\n     */\n    public parse(parserDto: ParserDto, options?: RawAxiosRequestConfig) {\n        return ParserApiFp(this.configuration).parse(parserDto, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} slug \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ParserApi\n     */\n    public remove(slug: string, options?: RawAxiosRequestConfig) {\n        return ParserApiFp(this.configuration).remove(slug, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {File} [file] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ParserApi\n     */\n    public unfold(file?: File, options?: RawAxiosRequestConfig) {\n        return ParserApiFp(this.configuration).unfold(file, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Booknex\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0\n * Contact: Github repository\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from '../configuration';\nimport type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';\n// @ts-ignore\nimport { ShortGenre } from '../models';\n// @ts-ignore\nimport { UpdateRecommendationDto } from '../models';\n/**\n * RecommendationApi - axios parameter creator\n * @export\n */\nexport const RecommendationApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        currentRecommendation: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/recommendation/recommendation-genre`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {UpdateRecommendationDto} updateRecommendationDto \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateRecommendation: async (updateRecommendationDto: UpdateRecommendationDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'updateRecommendationDto' is not null or undefined\n            assertParamExists('updateRecommendation', 'updateRecommendationDto', updateRecommendationDto)\n            const localVarPath = `/recommendation/update-recommendation`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(updateRecommendationDto, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * RecommendationApi - functional programming interface\n * @export\n */\nexport const RecommendationApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = RecommendationApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async currentRecommendation(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ShortGenre>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.currentRecommendation(options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['RecommendationApi.currentRecommendation']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @param {UpdateRecommendationDto} updateRecommendationDto \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateRecommendation(updateRecommendationDto: UpdateRecommendationDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRecommendation(updateRecommendationDto, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['RecommendationApi.updateRecommendation']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    }\n};\n\n/**\n * RecommendationApi - factory interface\n * @export\n */\nexport const RecommendationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = RecommendationApiFp(configuration)\n    return {\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        currentRecommendation(options?: any): AxiosPromise<Array<ShortGenre>> {\n            return localVarFp.currentRecommendation(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {UpdateRecommendationDto} updateRecommendationDto \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateRecommendation(updateRecommendationDto: UpdateRecommendationDto, options?: any): AxiosPromise<void> {\n            return localVarFp.updateRecommendation(updateRecommendationDto, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * RecommendationApi - object-oriented interface\n * @export\n * @class RecommendationApi\n * @extends {BaseAPI}\n */\nexport class RecommendationApi extends BaseAPI {\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RecommendationApi\n     */\n    public currentRecommendation(options?: RawAxiosRequestConfig) {\n        return RecommendationApiFp(this.configuration).currentRecommendation(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {UpdateRecommendationDto} updateRecommendationDto \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RecommendationApi\n     */\n    public updateRecommendation(updateRecommendationDto: UpdateRecommendationDto, options?: RawAxiosRequestConfig) {\n        return RecommendationApiFp(this.configuration).updateRecommendation(updateRecommendationDto, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Booknex\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0\n * Contact: Github repository\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from '../configuration';\nimport type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';\n// @ts-ignore\nimport { ReviewBookDto } from '../models';\n/**\n * ReviewApi - axios parameter creator\n * @export\n */\nexport const ReviewApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {string} slug \n         * @param {ReviewBookDto} reviewBookDto Review book\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        review: async (slug: string, reviewBookDto: ReviewBookDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'slug' is not null or undefined\n            assertParamExists('review', 'slug', slug)\n            // verify required parameter 'reviewBookDto' is not null or undefined\n            assertParamExists('review', 'reviewBookDto', reviewBookDto)\n            const localVarPath = `/review/review/{slug}`\n                .replace(`{${\"slug\"}}`, encodeURIComponent(String(slug)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(reviewBookDto, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ReviewApi - functional programming interface\n * @export\n */\nexport const ReviewApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = ReviewApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @param {string} slug \n         * @param {ReviewBookDto} reviewBookDto Review book\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async review(slug: string, reviewBookDto: ReviewBookDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.review(slug, reviewBookDto, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['ReviewApi.review']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    }\n};\n\n/**\n * ReviewApi - factory interface\n * @export\n */\nexport const ReviewApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = ReviewApiFp(configuration)\n    return {\n        /**\n         * \n         * @param {string} slug \n         * @param {ReviewBookDto} reviewBookDto Review book\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        review(slug: string, reviewBookDto: ReviewBookDto, options?: any): AxiosPromise<void> {\n            return localVarFp.review(slug, reviewBookDto, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * ReviewApi - object-oriented interface\n * @export\n * @class ReviewApi\n * @extends {BaseAPI}\n */\nexport class ReviewApi extends BaseAPI {\n    /**\n     * \n     * @param {string} slug \n     * @param {ReviewBookDto} reviewBookDto Review book\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ReviewApi\n     */\n    public review(slug: string, reviewBookDto: ReviewBookDto, options?: RawAxiosRequestConfig) {\n        return ReviewApiFp(this.configuration).review(slug, reviewBookDto, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Booknex\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0\n * Contact: Github repository\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from '../configuration';\nimport type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';\n// @ts-ignore\nimport { UploadOutputDto } from '../models';\n/**\n * StorageApi - axios parameter creator\n * @export\n */\nexport const StorageApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {UploadFolderEnum} folder \n         * @param {File} [file] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        upload: async (folder: UploadFolderEnum, file?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'folder' is not null or undefined\n            assertParamExists('upload', 'folder', folder)\n            const localVarPath = `/storage/{folder}`\n                .replace(`{${\"folder\"}}`, encodeURIComponent(String(folder)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();\n\n            // authentication bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n            if (file !== undefined) { \n                localVarFormParams.append('file', file as any);\n            }\n    \n    \n            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = localVarFormParams;\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * StorageApi - functional programming interface\n * @export\n */\nexport const StorageApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = StorageApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @param {UploadFolderEnum} folder \n         * @param {File} [file] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async upload(folder: UploadFolderEnum, file?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadOutputDto>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.upload(folder, file, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['StorageApi.upload']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    }\n};\n\n/**\n * StorageApi - factory interface\n * @export\n */\nexport const StorageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = StorageApiFp(configuration)\n    return {\n        /**\n         * \n         * @param {UploadFolderEnum} folder \n         * @param {File} [file] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        upload(folder: UploadFolderEnum, file?: File, options?: any): AxiosPromise<UploadOutputDto> {\n            return localVarFp.upload(folder, file, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * StorageApi - object-oriented interface\n * @export\n * @class StorageApi\n * @extends {BaseAPI}\n */\nexport class StorageApi extends BaseAPI {\n    /**\n     * \n     * @param {UploadFolderEnum} folder \n     * @param {File} [file] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StorageApi\n     */\n    public upload(folder: UploadFolderEnum, file?: File, options?: RawAxiosRequestConfig) {\n        return StorageApiFp(this.configuration).upload(folder, file, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n/**\n * @export\n */\nexport const UploadFolderEnum = {\n    Ebooks: 'ebooks',\n    BooksCovers: 'booksCovers'\n} as const;\nexport type UploadFolderEnum = typeof UploadFolderEnum[keyof typeof UploadFolderEnum];\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Booknex\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0\n * Contact: Github repository\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from '../configuration';\nimport type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';\n// @ts-ignore\nimport { UserCatalogOutput } from '../models';\n// @ts-ignore\nimport { UserLibraryOutput } from '../models';\n/**\n * UserApi - axios parameter creator\n * @export\n */\nexport const UserApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {string} searchTerm \n         * @param {number} cursor \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        catalog: async (searchTerm: string, cursor: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'searchTerm' is not null or undefined\n            assertParamExists('catalog', 'searchTerm', searchTerm)\n            // verify required parameter 'cursor' is not null or undefined\n            assertParamExists('catalog', 'cursor', cursor)\n            const localVarPath = `/user/admin/catalog`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (searchTerm !== undefined) {\n                localVarQueryParameter['searchTerm'] = searchTerm;\n            }\n\n            if (cursor !== undefined) {\n                localVarQueryParameter['cursor'] = cursor;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        finishReading: async (slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'slug' is not null or undefined\n            assertParamExists('finishReading', 'slug', slug)\n            const localVarPath = `/user/finish-reading/{slug}`\n                .replace(`{${\"slug\"}}`, encodeURIComponent(String(slug)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isSaved: async (slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'slug' is not null or undefined\n            assertParamExists('isSaved', 'slug', slug)\n            const localVarPath = `/user/is-saved/{slug}`\n                .replace(`{${\"slug\"}}`, encodeURIComponent(String(slug)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        library: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/user/library`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {number} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        remove: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('remove', 'id', id)\n            const localVarPath = `/user/admin/remove/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        startReading: async (slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'slug' is not null or undefined\n            assertParamExists('startReading', 'slug', slug)\n            const localVarPath = `/user/start-reading/{slug}`\n                .replace(`{${\"slug\"}}`, encodeURIComponent(String(slug)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        toggleSave: async (slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'slug' is not null or undefined\n            assertParamExists('toggleSave', 'slug', slug)\n            const localVarPath = `/user/toggle-save/{slug}`\n                .replace(`{${\"slug\"}}`, encodeURIComponent(String(slug)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * UserApi - functional programming interface\n * @export\n */\nexport const UserApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @param {string} searchTerm \n         * @param {number} cursor \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async catalog(searchTerm: string, cursor: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserCatalogOutput>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.catalog(searchTerm, cursor, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['UserApi.catalog']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async finishReading(slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.finishReading(slug, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['UserApi.finishReading']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async isSaved(slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.isSaved(slug, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['UserApi.isSaved']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async library(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserLibraryOutput>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.library(options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['UserApi.library']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @param {number} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async remove(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.remove(id, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['UserApi.remove']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async startReading(slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.startReading(slug, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['UserApi.startReading']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n        /**\n         * \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async toggleSave(slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.toggleSave(slug, options);\n            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;\n            const localVarOperationServerBasePath = operationServerMap['UserApi.toggleSave']?.[localVarOperationServerIndex]?.url;\n            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);\n        },\n    }\n};\n\n/**\n * UserApi - factory interface\n * @export\n */\nexport const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = UserApiFp(configuration)\n    return {\n        /**\n         * \n         * @param {string} searchTerm \n         * @param {number} cursor \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        catalog(searchTerm: string, cursor: number, options?: any): AxiosPromise<UserCatalogOutput> {\n            return localVarFp.catalog(searchTerm, cursor, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        finishReading(slug: string, options?: any): AxiosPromise<void> {\n            return localVarFp.finishReading(slug, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        isSaved(slug: string, options?: any): AxiosPromise<boolean> {\n            return localVarFp.isSaved(slug, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        library(options?: any): AxiosPromise<UserLibraryOutput> {\n            return localVarFp.library(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {number} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        remove(id: number, options?: any): AxiosPromise<void> {\n            return localVarFp.remove(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        startReading(slug: string, options?: any): AxiosPromise<void> {\n            return localVarFp.startReading(slug, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} slug \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        toggleSave(slug: string, options?: any): AxiosPromise<boolean> {\n            return localVarFp.toggleSave(slug, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * UserApi - object-oriented interface\n * @export\n * @class UserApi\n * @extends {BaseAPI}\n */\nexport class UserApi extends BaseAPI {\n    /**\n     * \n     * @param {string} searchTerm \n     * @param {number} cursor \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public catalog(searchTerm: string, cursor: number, options?: RawAxiosRequestConfig) {\n        return UserApiFp(this.configuration).catalog(searchTerm, cursor, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} slug \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public finishReading(slug: string, options?: RawAxiosRequestConfig) {\n        return UserApiFp(this.configuration).finishReading(slug, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} slug \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public isSaved(slug: string, options?: RawAxiosRequestConfig) {\n        return UserApiFp(this.configuration).isSaved(slug, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public library(options?: RawAxiosRequestConfig) {\n        return UserApiFp(this.configuration).library(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {number} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public remove(id: number, options?: RawAxiosRequestConfig) {\n        return UserApiFp(this.configuration).remove(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} slug \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public startReading(slug: string, options?: RawAxiosRequestConfig) {\n        return UserApiFp(this.configuration).startReading(slug, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} slug \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public toggleSave(slug: string, options?: RawAxiosRequestConfig) {\n        return UserApiFp(this.configuration).toggleSave(slug, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Booknex\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0\n * Contact: Github repository\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n\nexport * from './clients/auth-api';\nexport * from './clients/book-api';\nexport * from './clients/catalog-api';\nexport * from './clients/ebook-api';\nexport * from './clients/genre-api';\nexport * from './clients/health-api';\nexport * from './clients/parser-api';\nexport * from './clients/recommendation-api';\nexport * from './clients/review-api';\nexport * from './clients/storage-api';\nexport * from './clients/user-api';\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Booknex\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0\n * Contact: Github repository\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\n\n/**\n * \n * @export\n * @interface AuthOutputUser\n */\nexport interface AuthOutputUser {\n    /**\n     * \n     * @type {string}\n     * @memberof AuthOutputUser\n     */\n    'email'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthOutputUser\n     */\n    'role'?: RoleEnum;\n}\n\nexport const RoleEnum = {\n    User: 'user',\n    Admin: 'admin'\n} as const;\n\nexport type RoleEnum = typeof RoleEnum[keyof typeof RoleEnum];\n\n\n","export * from './auth-dto';\nexport * from './auth-output';\nexport * from './auth-output-user';\nexport * from './book';\nexport * from './book-template';\nexport * from './book-template-catalog-output';\nexport * from './book-template-catalog-output-data-inner';\nexport * from './catalog-output';\nexport * from './catalog-output-data-inner';\nexport * from './check503-response';\nexport * from './check503-response-info-value';\nexport * from './create-book-dto';\nexport * from './create-book-dto-ebook-inner';\nexport * from './create-book-dto-ebook-inner-chapters-inner';\nexport * from './ebook-output';\nexport * from './ebook-output-chapters-inner';\nexport * from './ebook-output-chapters-inner-children-inner';\nexport * from './featured-output';\nexport * from './find-one-genre-output';\nexport * from './full-book';\nexport * from './full-book-count';\nexport * from './full-book-review-inner';\nexport * from './google-auth-dto';\nexport * from './parser-dto';\nexport * from './refresh-dto';\nexport * from './review-book-dto';\nexport * from './short-book';\nexport * from './short-genre';\nexport * from './stored-ebook';\nexport * from './stored-ebook-chapters-inner';\nexport * from './unfold-output';\nexport * from './update-book-dto';\nexport * from './update-recommendation-dto';\nexport * from './upload-output-dto';\nexport * from './user-catalog-output';\nexport * from './user-catalog-output-data-inner';\nexport * from './user-catalog-output-data-inner-activities-inner';\nexport * from './user-catalog-output-data-inner-activities-inner-activities-inner';\nexport * from './user-catalog-output-data-inner-count';\nexport * from './user-catalog-output-data-inner-selected-genres-inner';\nexport * from './user-library-output';\nexport * from './user-library-output-reading-books-inner';\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Booknex\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0\n * Contact: Github repository\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport * from \"./api\";\nexport * from \"./configuration\";\nexport * from \"./models\";\n","import {\n\tdeleteTokensStorage,\n\tgetAccessToken,\n\tgetNewTokens\n} from '@/redux/auth/auth-helper'\nimport { errorToast } from '@/utils/toast'\nimport axios, { InternalAxiosRequestConfig } from 'axios'\nimport { errorCatch } from 'global/helpers/catch-error'\n\nexport const axiosRequestInstance = async (\n\tconfig: InternalAxiosRequestConfig<any>\n) => {\n\tconst accessToken = getAccessToken()\n\n\tif (config.headers && accessToken)\n\t\tconfig.headers.Authorization = `Bearer ${accessToken}`\n\n\treturn config\n}\nexport const axiosResponseInstance = async (error: any) => {\n\tconst originalRequest = error.config\n\tconsole.log(originalRequest._isRetry)\n\tif (error.response?.status === 403) deleteTokensStorage()\n\tif (\n\t\t(error.response?.status === 401 ||\n\t\t\terrorCatch(error) === 'jwt expired' ||\n\t\t\terrorCatch(error) === 'jwt malformed' ||\n\t\t\terrorCatch(error) === 'jwt must be provided') &&\n\t\toriginalRequest &&\n\t\t!originalRequest._isRetry\n\t) {\n\t\toriginalRequest._isRetry = true\n\t\ttry {\n\t\t\tawait getNewTokens()\n\t\t\treturn await axios.request({\n\t\t\t\t...originalRequest,\n\t\t\t\theaders: {\n\t\t\t\t\t...originalRequest.headers,\n\t\t\t\t\tAuthorization: `Bearer ${getAccessToken()}`\n\t\t\t\t}\n\t\t\t})\n\t\t} catch (error) {\n\t\t\tif (\n\t\t\t\terrorCatch(error) === 'jwt expired' ||\n\t\t\t\terrorCatch(error) === 'jwt must be provided' ||\n\t\t\t\terrorCatch(error) === 'jwt malformed'\n\t\t\t) {\n\t\t\t\treturn deleteTokensStorage()\n\t\t\t}\n\t\t\terrorToast(error)\n\t\t\treturn Promise.reject(error)\n\t\t}\n\t}\n\n\terrorToast(error)\n\treturn Promise.reject(error)\n}\n\nexport const instance = axios.create({\n\theaders: {\n\t\t'Content-Type': 'application/json'\n\t}\n})\n\ninstance.interceptors.request.use(axiosRequestInstance)\ninstance.interceptors.response.use(undefined, axiosResponseInstance)\n","import {\n\tAuthApi,\n\tBookApi,\n\tCatalogApi,\n\tEbookApi,\n\tGenreApi,\n\tParserApi,\n\tRecommendationApi,\n\tReviewApi,\n\tStorageApi,\n\tUserApi\n} from 'global/api-client'\nimport { serverURL } from 'global/api-config'\nimport { instance } from './interceptors'\n\nconst baseParams = {\n\tbasePath: serverURL,\n\tisJsonMime: () => true\n}\n\nconst auth = new AuthApi(baseParams, serverURL, undefined)\n\nconst book = new BookApi(baseParams, serverURL, instance)\n\nconst catalog = new CatalogApi(baseParams, serverURL, instance)\n\nconst ebook = new EbookApi(baseParams, serverURL, instance)\n\nconst genre = new GenreApi(baseParams, serverURL, instance)\n\nconst parser = new ParserApi(baseParams, serverURL, instance)\n\nconst recommendation = new RecommendationApi(baseParams, serverURL, instance)\n\nconst review = new ReviewApi(baseParams, serverURL, instance)\n\nconst storage = new StorageApi(baseParams, serverURL, instance)\n\nconst user = new UserApi(baseParams, serverURL, instance)\n\nexport default {\n\tauth,\n\tbook,\n\tcatalog,\n\tebook,\n\tgenre,\n\tparser,\n\trecommendation,\n\treview,\n\tstorage,\n\tuser\n}\n","import { errorCatch } from 'global/helpers/catch-error'\nimport type { ExternalToast } from 'sonner'\nimport { toast } from 'sonner'\n\nexport const errorToast = (error: unknown, data?: ExternalToast) => {\n\ttoast.error('An error occurred, please try again later', {\n\t\t...data,\n\t\tdescription: errorCatch(error)\n\t})\n}\n\nexport const successToast = (message: string, data?: ExternalToast) => {\n\ttoast.success(message, data)\n}\n\nexport const infoToast = (message: string, data?: ExternalToast) => {\n\ttoast.info(message, data)\n}\n\nexport const acceptToast = (\n\tmessage: string,\n\tdata?: ExternalToast | undefined\n) => {\n\ttoast(message, {\n\t\t...data\n\t})\n}\n","export const serverURL = 'https://booknex-server.up.railway.app/'\n\nexport const getFileUrl = (path: string) => {\n\tif (path?.startsWith('http')) return path\n\treturn `https://f005.backblazeb2.com/file/Booknex/${path}`\n}\n","export const authErrors = {\n\tinvalidGoogleToken: 'Invalid google token',\n\tpasswordOrEmailInvalid: 'Email or password invalid',\n\tInvalidRefreshToken: 'Invalid refresh token',\n\tuserExist: 'User already exist',\n\tuserNotFound: 'User not found'\n}\n\nexport const bookErrors = {\n\tstoredBookNotFound: 'Stored book not found',\n\tstoredBookInvalid: 'Stored book invalid',\n\tbookNotFound: 'Book not found'\n}\n\nexport const genreErrors = {\n\tgenresAlreadyExist: 'Genres already exist'\n}\nexport const UserErrors = {}\n\nexport const globalErrors = {\n\tinvalidValue: 'Invalid value provided',\n\tsomethingWrong: 'Something went wrong, please try again later',\n\tunknownError: 'Unknown error, please try again later',\n\tnoValidParameters: 'No valid parameters'\n}\n\nexport const adminErrors = {\n\tnotEnoughRights: 'Not enough rights',\n\n\t// parser\n\tinvalidChapter: 'Invalid chapter',\n\n\t//file\n\tinvalidFile: 'Invalid file',\n\tinvalidFolder: 'Invalid folder',\n\n\t//book\n\n\tbookNotFound: 'Book not found',\n\tbookAlreadyExist: 'Book already exist',\n\t//user\n\n\tuserNotFound: 'User not found',\n\t//'No valid parameters',\n\n\tsomeConfigMissing: 'Some config is missing'\n}\n","import { globalErrors } from '../errors'\n\nexport const errorCatch = (error: any): string => {\n\tif (typeof error === 'string') return error\n\tif (typeof error?.response?.data?.message === 'string')\n\t\treturn error.response.data.message\n\t//check validation errors from class validator\n\tif (Array.isArray(error?.response?.data?.message))\n\t\treturn error.response.data.message.map((m: string) => m).join(', ')\n\tif (typeof error.message === 'string') return error.message\n\treturn globalErrors.somethingWrong\n}\n"],"names":["getAccessToken","accessToken","Cookies","get","console","log","getRefreshToken","refreshToken","saveTokensStorage","set","data","deleteTokensStorage","remove","getNewTokens","response","api","auth","catch","errorCatch","error","BASE_PATH","replace","BaseAPI","constructor","configuration","basePath","axios","globalAxios","RequiredError","Error","field","msg","name","operationServerMap","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","concat","setBearerAuthToObject","object","setSearchParams","url","_len","arguments","length","objects","_key","searchParams","URLSearchParams","search","setFlattenedQueryParams","urlSearchParams","parameter","key","Array","isArray","forEach","item","Object","keys","currentKey","has","append","toString","serializeDataIfNeeded","value","requestOptions","nonString","needsSerialization","isJsonMime","headers","JSON","stringify","undefined","toPathString","pathname","hash","createRequestFunction","axiosArgs","axiosRequestArgs","options","defaults","baseURL","request","AuthApiFp","localVarAxiosParamCreator","googleSign","googleAuthDto","baseOptions","localVarUrlObj","URL","localVarRequestOptions","method","localVarHeaderParameter","headersFromBaseOptions","mailLogin","authDto","mailRegister","refreshDto","localVarAxiosArgs","localVarOperationServerIndex","serverIndex","localVarOperationServerBasePath","AuthApi","then","BookApiFp","adminInfoBySlug","slug","localVarPath","encodeURIComponent","String","catalog","searchTerm","page","localVarQueryParameter","create","createBookDto","infoBySlug","update","updateBookDto","BookApi","CatalogApiFp","featured","query","CatalogApi","EbookApiFp","ebookBySlug","storedEbookBySlug","EbookApi","GenreApiFp","bySlug","GenreApi","ParserApiFp","parse","parserDto","unfold","file","localVarFormParams","formDataCtor","FormData","ParserApi","RecommendationApiFp","currentRecommendation","updateRecommendation","updateRecommendationDto","RecommendationApi","ReviewApiFp","review","reviewBookDto","ReviewApi","StorageApiFp","upload","folder","StorageApi","UserApiFp","cursor","finishReading","isSaved","library","id","startReading","toggleSave","UserApi","axiosRequestInstance","config","Authorization","axiosResponseInstance","originalRequest","_isRetry","status","errorToast","Promise","reject","instance","interceptors","use","baseParams","serverURL","book","ebook","genre","parser","recommendation","storage","user","toast","description","successToast","message","success","infoToast","info","acceptToast","getFileUrl","path","startsWith","globalErrors","invalidValue","somethingWrong","unknownError","noValidParameters","adminErrors","notEnoughRights","invalidChapter","invalidFile","invalidFolder","bookNotFound","bookAlreadyExist","userNotFound","someConfigMissing","map","m","join"],"sourceRoot":""}