{"version":3,"file":"static/chunks/app/layout-7f9c435d484f6c8b.js","mappings":"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","sources":["webpack://_N_E/?6167","webpack://_N_E/./components/ui/sonner.tsx","webpack://_N_E/./redux/middlewares/error.middleware.ts","webpack://_N_E/./redux/auth/auth-slice.ts","webpack://_N_E/./redux/root-reducer.ts","webpack://_N_E/./redux/store.ts","webpack://_N_E/./providers/app-provider.tsx","webpack://_N_E/./redux/auth/auth-action.ts","webpack://_N_E/./app/global.css","webpack://_N_E/<anon>"],"sourcesContent":["import(/* webpackMode: \"eager\" */ \"D:\\\\projects\\\\booknex-2\\\\apps\\\\web\\\\providers\\\\app-provider.tsx\");\nimport(/* webpackMode: \"eager\" */ \"D:\\\\projects\\\\booknex-2\\\\node_modules\\\\next\\\\font\\\\google\\\\target.css?{\\\"path\\\":\\\"app\\\\\\\\layout.tsx\\\",\\\"import\\\":\\\"Space_Grotesk\\\",\\\"arguments\\\":[{\\\"subsets\\\":[\\\"latin\\\"]}],\\\"variableName\\\":\\\"font\\\"}\");\nimport(/* webpackMode: \"eager\" */ \"D:\\\\projects\\\\booknex-2\\\\apps\\\\web\\\\app\\\\global.css\")","'use client'\nimport type { ComponentProps } from 'react'\nimport { Toaster as Sonner } from 'sonner'\n\ntype ToasterProperties = ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...properties }: ToasterProperties) => (\n\t<Sonner\n\t\tclassName='toaster group'\n\t\ttoastOptions={{\n\t\t\tclassNames: {\n\t\t\t\ttoast:\n\t\t\t\t\t'group toast group-[.toaster]:bg-foreground group-[.toaster]:text-white group-[.toaster]:border-bordered group-[.toaster]:shadow-lg',\n\t\t\t\tdescription: 'group-[.toast]:text-gray',\n\t\t\t\tactionButton: 'group-[.toast]:bg-muted group-[.toast]:text-white',\n\t\t\t\tcancelButton: 'group-[.toast]:bg-danger group-[.toast]:text-white'\n\t\t\t}\n\t\t}}\n\t\t{...properties}\n\t/>\n)\n\nexport { Toaster }\n","import { errorToast } from '@/utils/toast'\nimport { isRejectedWithValue } from '@reduxjs/toolkit'\nimport type { Middleware, MiddlewareAPI } from 'redux'\n\nexport const rtkQueryErrorLogger: Middleware =\n\t(api: MiddlewareAPI) => next => action => {\n\t\tif (isRejectedWithValue(action)) {\n\t\t\tconsole.log(api)\n\t\t\terrorToast(action.payload)\n\t\t}\n\n\t\treturn next(action)\n\t}\n","import { createSlice } from '@reduxjs/toolkit'\nimport { AuthOutput } from 'global/api-client'\nimport { googleLogin, logout, mailLogin } from './auth-action'\n\nconst initialState = {\n\tisLoading: false,\n\tuser: null as AuthOutput['user'] | null\n}\n\nexport const authSlice = createSlice({\n\tname: 'auth',\n\tinitialState,\n\treducers: {},\n\textraReducers: builder => {\n\t\tbuilder\n\t\t\t.addCase(mailLogin.pending, state => {\n\t\t\t\tstate.isLoading = true\n\t\t\t})\n\t\t\t.addCase(mailLogin.fulfilled, (state, { payload }) => {\n\t\t\t\tstate.isLoading = false\n\t\t\t\tstate.user = payload.user\n\t\t\t})\n\t\t\t.addCase(mailLogin.rejected, state => {\n\t\t\t\tstate.isLoading = false\n\t\t\t\tstate.user = null\n\t\t\t})\n\t\t\t.addCase(googleLogin.pending, state => {\n\t\t\t\tstate.isLoading = true\n\t\t\t})\n\t\t\t.addCase(googleLogin.fulfilled, (state, { payload }) => {\n\t\t\t\tstate.isLoading = false\n\t\t\t\tstate.user = payload.user\n\t\t\t})\n\t\t\t.addCase(googleLogin.rejected, state => {\n\t\t\t\tstate.isLoading = false\n\t\t\t\tstate.user = null\n\t\t\t})\n\t\t\t.addCase(logout.fulfilled, state => {\n\t\t\t\tstate.isLoading = false\n\t\t\t\tstate.user = null\n\t\t\t})\n\t}\n})\nexport const { reducer: authReducer, actions: authAction } = authSlice\n","import { authReducer } from '@/redux/auth/auth-slice'\nimport { combineReducers } from '@reduxjs/toolkit'\n\nexport const reducers = combineReducers({\n\tauth: authReducer\n})\n","import { rtkQueryErrorLogger } from '@/redux/middlewares/error.middleware'\nimport { configureStore } from '@reduxjs/toolkit'\nimport { persistReducer, persistStore } from 'redux-persist'\nimport storage from 'redux-persist/es/storage'\nimport { reducers } from './root-reducer'\n\nconst persistConfig = {\n\tkey: 'root',\n\tstorage: storage,\n\twhitelist: ['auth', 'parser']\n}\n\nconst persistedReducer = persistReducer(persistConfig, reducers)\nexport const store = configureStore({\n\treducer: persistedReducer,\n\tmiddleware: getDefaultMiddleware =>\n\t\tgetDefaultMiddleware({\n\t\t\tserializableCheck: false\n\t\t}).concat(rtkQueryErrorLogger)\n})\nexport const persistor = persistStore(store)\n\nexport type TypeRootState = ReturnType<typeof reducers>\n","'use client'\nimport { Toaster } from '@/components/ui/sonner'\nimport { persistor, store } from '@/redux/store'\nimport { GoogleOAuthProvider } from '@react-oauth/google'\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { adminErrors, globalErrors } from 'global/errors'\nimport type { PropsWithChildren } from 'react'\nimport { Provider } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react'\n\nconst Providers = ({ children }: PropsWithChildren) => {\n\tconst queryClient = new QueryClient({\n\t\tdefaultOptions: {\n\t\t\tqueries: {\n\t\t\t\trefetchOnWindowFocus: false,\n\t\t\t\tcacheTime: 1000 * 60 * 60 * 24\n\t\t\t}\n\t\t}\n\t})\n\n\tconst googleAuthClientID = process.env['CLIENT_ID']\n\tif (!googleAuthClientID)\n\t\tthrow new Error(\n\t\t\t`${globalErrors.somethingWrong}, ${adminErrors.someConfigMissing}`\n\t\t)\n\treturn (\n\t\t<Provider store={store}>\n\t\t\t<PersistGate persistor={persistor}>\n\t\t\t\t<QueryClientProvider client={queryClient}>\n\t\t\t\t\t<GoogleOAuthProvider clientId={googleAuthClientID}>\n\t\t\t\t\t\t{children}\n\t\t\t\t\t\t<Toaster />\n\t\t\t\t\t</GoogleOAuthProvider>\n\t\t\t\t</QueryClientProvider>\n\t\t\t</PersistGate>\n\t\t</Provider>\n\t)\n}\n\nexport default Providers\n","import api from '@/services/api'\nimport { errorToast, successToast } from '@/utils/toast'\nimport { createAsyncThunk } from '@reduxjs/toolkit'\nimport { AuthDto, AuthOutput } from 'global/api-client'\nimport { globalErrors } from 'global/errors'\n\nimport { deleteTokensStorage, saveTokensStorage } from './auth-helper'\n\nexport const mailLogin = createAsyncThunk<AuthOutput, AuthDto>(\n\t'auth/mailLogin',\n\tasync ({ email, password }, thunkAPI) => {\n\t\ttry {\n\t\t\tconst { data: loginResponse } = await api.auth.mailLogin({\n\t\t\t\temail,\n\t\t\t\tpassword\n\t\t\t})\n\t\t\tconsole.log(loginResponse)\n\t\t\tif (loginResponse.user.role !== 'admin')\n\t\t\t\treturn thunkAPI.rejectWithValue('You are not admin')\n\t\t\tsaveTokensStorage({\n\t\t\t\taccessToken: loginResponse.accessToken,\n\t\t\t\trefreshToken: loginResponse.refreshToken\n\t\t\t})\n\n\t\t\tsuccessToast('Login successfully')\n\t\t\treturn loginResponse\n\t\t} catch (error) {\n\t\t\terrorToast(error)\n\t\t\treturn thunkAPI.rejectWithValue(error)\n\t\t}\n\t}\n)\n\nexport const googleLogin = createAsyncThunk<\n\tAuthOutput,\n\t{\n\t\tsocialId: string\n\t}\n>('auth/googleLogin', async ({ socialId }, thunkAPI) => {\n\ttry {\n\t\tconst { data: loginResponse } = await api.auth.googleSign({\n\t\t\tsocialId\n\t\t})\n\t\tconsole.log(loginResponse)\n\n\t\tif (loginResponse.user.role !== 'admin')\n\t\t\treturn thunkAPI.rejectWithValue(globalErrors.somethingWrong)\n\t\tsaveTokensStorage({\n\t\t\taccessToken: loginResponse.accessToken,\n\t\t\trefreshToken: loginResponse.refreshToken\n\t\t})\n\n\t\tsuccessToast('Login successfully')\n\t\treturn loginResponse\n\t} catch (error) {\n\t\terrorToast(error)\n\t\treturn thunkAPI.rejectWithValue(error)\n\t}\n})\n\nexport const logout = createAsyncThunk('auth/logout', () => {\n\ttry {\n\t\tdeleteTokensStorage()\n\t} catch (error) {\n\t\terrorToast(error)\n\t}\n\treturn {}\n})\n","// extracted by mini-css-extract-plugin"],"names":["Promise","resolve","then","__webpack_require__","bind","t","Toaster","properties","param","jsx_runtime","jsx","Sonner","className","toastOptions","classNames","toast","description","actionButton","cancelButton","rtkQueryErrorLogger","next","action","isRejectedWithValue","console","log","api","errorToast","payload","reducer","authReducer","actions","authAction","createSlice","name","initialState","isLoading","user","reducers","extraReducers","builder","addCase","mailLogin","pending","state","fulfilled","rejected","googleLogin","logout","combineReducers","auth","persistConfig","key","storage","whitelist","persistedReducer","persistReducer","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","concat","persistor","persistStore","app_provider","children","queryClient","QueryClient","defaultOptions","queries","refetchOnWindowFocus","cacheTime","googleAuthClientID","process","adminErrors","globalErrors","somethingWrong","someConfigMissing","Provider","PersistGate","QueryClientProvider","client","jsxs","GoogleOAuthProvider","clientId","createAsyncThunk","thunkAPI","email","password","data","loginResponse","role","rejectWithValue","saveTokensStorage","accessToken","refreshToken","successToast","error","socialId","googleSign","deleteTokensStorage"],"sourceRoot":""}