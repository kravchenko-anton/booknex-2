{"version":3,"file":"static/chunks/823-de95ed9956743da2.js","mappings":"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","sources":["webpack://_N_E/../../node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs","webpack://_N_E/../../node_modules/@floating-ui/core/dist/floating-ui.core.mjs","webpack://_N_E/../../node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs","webpack://_N_E/../../node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs","webpack://_N_E/../../node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs","webpack://_N_E/../../node_modules/@radix-ui/react-arrow/dist/index.mjs","webpack://_N_E/../../node_modules/@radix-ui/react-use-size/dist/index.mjs","webpack://_N_E/../../node_modules/@radix-ui/react-popper/dist/index.mjs","webpack://_N_E/<anon>"],"sourcesContent":["/**\n * Custom positioning reference element.\n * @see https://floating-ui.com/docs/virtual-elements\n */\n\nconst sides = ['top', 'right', 'bottom', 'left'];\nconst alignments = ['start', 'end'];\nconst placements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-\" + alignments[0], side + \"-\" + alignments[1]), []);\nconst min = Math.min;\nconst max = Math.max;\nconst round = Math.round;\nconst floor = Math.floor;\nconst createCoords = v => ({\n  x: v,\n  y: v\n});\nconst oppositeSideMap = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nconst oppositeAlignmentMap = {\n  start: 'end',\n  end: 'start'\n};\nfunction clamp(start, value, end) {\n  return max(start, min(value, end));\n}\nfunction evaluate(value, param) {\n  return typeof value === 'function' ? value(param) : value;\n}\nfunction getSide(placement) {\n  return placement.split('-')[0];\n}\nfunction getAlignment(placement) {\n  return placement.split('-')[1];\n}\nfunction getOppositeAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\nfunction getAxisLength(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\nfunction getSideAxis(placement) {\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'y' : 'x';\n}\nfunction getAlignmentAxis(placement) {\n  return getOppositeAxis(getSideAxis(placement));\n}\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n  const alignment = getAlignment(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const length = getAxisLength(alignmentAxis);\n  let mainAlignmentSide = alignmentAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];\n}\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);\n}\nfunction getSideList(side, isStart, rtl) {\n  const lr = ['left', 'right'];\n  const rl = ['right', 'left'];\n  const tb = ['top', 'bottom'];\n  const bt = ['bottom', 'top'];\n  switch (side) {\n    case 'top':\n    case 'bottom':\n      if (rtl) return isStart ? rl : lr;\n      return isStart ? lr : rl;\n    case 'left':\n    case 'right':\n      return isStart ? tb : bt;\n    default:\n      return [];\n  }\n}\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n  const alignment = getAlignment(placement);\n  let list = getSideList(getSide(placement), direction === 'start', rtl);\n  if (alignment) {\n    list = list.map(side => side + \"-\" + alignment);\n    if (flipAlignment) {\n      list = list.concat(list.map(getOppositeAlignmentPlacement));\n    }\n  }\n  return list;\n}\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);\n}\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\nfunction getPaddingObject(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\nfunction rectToClientRect(rect) {\n  return {\n    ...rect,\n    top: rect.y,\n    left: rect.x,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  };\n}\n\nexport { alignments, clamp, createCoords, evaluate, expandPaddingObject, floor, getAlignment, getAlignmentAxis, getAlignmentSides, getAxisLength, getExpandedPlacements, getOppositeAlignmentPlacement, getOppositeAxis, getOppositeAxisPlacements, getOppositePlacement, getPaddingObject, getSide, getSideAxis, max, min, placements, rectToClientRect, round, sides };\n","import { getSideAxis, getAlignmentAxis, getAxisLength, getSide, getAlignment, evaluate, getPaddingObject, rectToClientRect, min, clamp, placements, getAlignmentSides, getOppositeAlignmentPlacement, getOppositePlacement, getExpandedPlacements, getOppositeAxisPlacements, sides, max, getOppositeAxis } from '@floating-ui/utils';\nexport { rectToClientRect } from '@floating-ui/utils';\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const sideAxis = getSideAxis(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const alignLength = getAxisLength(alignmentAxis);\n  const side = getSide(placement);\n  const isVertical = sideAxis === 'y';\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(state, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = evaluate(options, state);\n  const paddingObject = getPaddingObject(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? {\n    ...rects.floating,\n    x,\n    y\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    elements,\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  async fn(state) {\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform,\n      elements,\n      middlewareData\n    } = state;\n    // Since `element` is required, we don't Partial<> the type.\n    const {\n      element,\n      padding = 0\n    } = evaluate(options, state) || {};\n    if (element == null) {\n      return {};\n    }\n    const paddingObject = getPaddingObject(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getAlignmentAxis(placement);\n    const length = getAxisLength(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const isYAxis = axis === 'y';\n    const minProp = isYAxis ? 'top' : 'left';\n    const maxProp = isYAxis ? 'bottom' : 'right';\n    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;\n\n    // DOM platform can return `window` as the `offsetParent`.\n    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {\n      clientSize = elements.floating[clientProp] || rects.floating[length];\n    }\n    const centerToReference = endDiff / 2 - startDiff / 2;\n\n    // If the padding is large enough that it causes the arrow to no longer be\n    // centered, modify the padding so that it is centered.\n    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;\n    const minPadding = min(paddingObject[minProp], largestPossiblePadding);\n    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);\n\n    // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n    const min$1 = minPadding;\n    const max = clientSize - arrowDimensions[length] - maxPadding;\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = clamp(min$1, center, max);\n\n    // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. To ensure `shift()` continues to take action,\n    // a single reset is performed when this is true.\n    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max : 0;\n    return {\n      [axis]: coords[axis] + alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset - alignmentOffset,\n        ...(shouldAddOffset && {\n          alignmentOffset\n        })\n      },\n      reset: shouldAddOffset\n    };\n  }\n});\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n    return true;\n  });\n}\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'autoPlacement',\n    options,\n    async fn(state) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\n      const {\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = state;\n      const {\n        crossAxis = false,\n        alignment,\n        allowedPlacements = placements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const placements$1 = alignment !== undefined || allowedPlacements === placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n      const currentPlacement = placements$1[currentIndex];\n      if (currentPlacement == null) {\n        return {};\n      }\n      const alignmentSides = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n\n      // Make `computeCoords` start from the right place.\n      if (placement !== currentPlacement) {\n        return {\n          reset: {\n            placement: placements$1[0]\n          }\n        };\n      }\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements$1[currentIndex + 1];\n\n      // There are more placements to check.\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n      const placementsSortedByMostSpace = allOverflows.map(d => {\n        const alignment = getAlignment(d.placement);\n        return [d.placement, alignment && crossAxis ?\n        // Check along the mainAxis and main crossAxis side.\n        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) :\n        // Check only the mainAxis.\n        d.overflows[0], d.overflows];\n      }).sort((a, b) => a[1] - b[1]);\n      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0,\n      // Aligned placements should not check their opposite crossAxis\n      // side.\n      getAlignment(d[0]) ? 2 : 3).every(v => v <= 0));\n      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    async fn(state) {\n      var _middlewareData$arrow, _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n\n      // If a reset by the arrow was caused due to an alignment offset being\n      // added, we should skip any logic now since `flip()` has already done its\n      // work.\n      // https://github.com/floating-ui/floating-ui/issues/2549#issuecomment-1719601643\n      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      const side = getSide(placement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const sides = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[sides[0]], overflow[sides[1]]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n\n      // One or more sides is overflowing.\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle.\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n\n        // First, find the candidates that fit on the mainAxis side of overflow,\n        // then find the placement that fits the best on the main crossAxis side.\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n\n        // Otherwise fallback.\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$map$so;\n                const placement = (_overflowsData$map$so = overflowsData.map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];\n                if (placement) {\n                  resetPlacement = placement;\n                }\n                break;\n              }\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'hide',\n    options,\n    async fn(state) {\n      const {\n        rects\n      } = state;\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        default:\n          {\n            return {};\n          }\n      }\n    }\n  };\n};\n\nfunction getBoundingRect(rects) {\n  const minX = min(...rects.map(rect => rect.left));\n  const minY = min(...rects.map(rect => rect.top));\n  const maxX = max(...rects.map(rect => rect.right));\n  const maxY = max(...rects.map(rect => rect.bottom));\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\nfunction getRectsByLine(rects) {\n  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);\n  const groups = [];\n  let prevRect = null;\n  for (let i = 0; i < sortedRects.length; i++) {\n    const rect = sortedRects[i];\n    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {\n      groups.push([rect]);\n    } else {\n      groups[groups.length - 1].push(rect);\n    }\n    prevRect = rect;\n  }\n  return groups.map(rect => rectToClientRect(getBoundingRect(rect)));\n}\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'inline',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = state;\n      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n      const {\n        padding = 2,\n        x,\n        y\n      } = evaluate(options, state);\n      const nativeClientRects = Array.from((await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || []);\n      const clientRects = getRectsByLine(nativeClientRects);\n      const fallback = rectToClientRect(getBoundingRect(nativeClientRects));\n      const paddingObject = getPaddingObject(padding);\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined.\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          // Find the first rect in which the point is fully inside.\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n        }\n\n        // There are 2 or more connected rects.\n        if (clientRects.length >= 2) {\n          if (getSideAxis(placement) === 'y') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n        return fallback;\n      }\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n// For type backwards-compatibility, the `OffsetOptions` type was also\n// Derivable.\n\nasync function convertValueToCoords(state, options) {\n  const {\n    placement,\n    platform,\n    elements\n  } = state;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getSideAxis(placement) === 'y';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = evaluate(options, state);\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = function (options) {\n  if (options === void 0) {\n    options = 0;\n  }\n  return {\n    name: 'offset',\n    options,\n    async fn(state) {\n      var _middlewareData$offse, _middlewareData$arrow;\n      const {\n        x,\n        y,\n        placement,\n        middlewareData\n      } = state;\n      const diffCoords = await convertValueToCoords(state, options);\n\n      // If the placement is the same and the arrow caused an alignment offset\n      // then we don't need to change the positioning coordinates.\n      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: {\n          ...diffCoords,\n          placement\n        }\n      };\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y,\n        placement\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const crossAxis = getSideAxis(getSide(placement));\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = clamp(min, mainAxisCoord, max);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = clamp(min, crossAxisCoord, max);\n      }\n      const limitedCoords = limiter.fn({\n        ...state,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    options,\n    fn(state) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = state;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const crossAxis = getSideAxis(placement);\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = evaluate(offset, state);\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n  };\n};\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = state;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      const isYAxis = getSideAxis(placement) === 'y';\n      const {\n        width,\n        height\n      } = rects.floating;\n      let heightSide;\n      let widthSide;\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n      const overflowAvailableHeight = height - overflow[heightSide];\n      const overflowAvailableWidth = width - overflow[widthSide];\n      const noShift = !state.middlewareData.shift;\n      let availableHeight = overflowAvailableHeight;\n      let availableWidth = overflowAvailableWidth;\n      if (isYAxis) {\n        const maximumClippingWidth = width - overflow.left - overflow.right;\n        availableWidth = alignment || noShift ? min(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;\n      } else {\n        const maximumClippingHeight = height - overflow.top - overflow.bottom;\n        availableHeight = alignment || noShift ? min(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;\n      }\n      if (noShift && !alignment) {\n        const xMin = max(overflow.left, 0);\n        const xMax = max(overflow.right, 0);\n        const yMin = max(overflow.top, 0);\n        const yMax = max(overflow.bottom, 0);\n        if (isYAxis) {\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n        } else {\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n        }\n      }\n      await apply({\n        ...state,\n        availableWidth,\n        availableHeight\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, shift, size };\n","function getNodeName(node) {\n  if (isNode(node)) {\n    return (node.nodeName || '').toLowerCase();\n  }\n  // Mocked nodes in testing environments may not be instances of Node. By\n  // returning `#document` an infinite loop won't occur.\n  // https://github.com/floating-ui/floating-ui/issues/2317\n  return '#document';\n}\nfunction getWindow(node) {\n  var _node$ownerDocument;\n  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;\n}\nfunction getDocumentElement(node) {\n  var _ref;\n  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;\n}\nfunction isNode(value) {\n  return value instanceof Node || value instanceof getWindow(value).Node;\n}\nfunction isElement(value) {\n  return value instanceof Element || value instanceof getWindow(value).Element;\n}\nfunction isHTMLElement(value) {\n  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;\n}\nfunction isShadowRoot(value) {\n  // Browsers without `ShadowRoot` support.\n  if (typeof ShadowRoot === 'undefined') {\n    return false;\n  }\n  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;\n}\nfunction isOverflowElement(element) {\n  const {\n    overflow,\n    overflowX,\n    overflowY,\n    display\n  } = getComputedStyle(element);\n  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !['inline', 'contents'].includes(display);\n}\nfunction isTableElement(element) {\n  return ['table', 'td', 'th'].includes(getNodeName(element));\n}\nfunction isContainingBlock(element) {\n  const webkit = isWebKit();\n  const css = getComputedStyle(element);\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  return css.transform !== 'none' || css.perspective !== 'none' || (css.containerType ? css.containerType !== 'normal' : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== 'none' : false) || !webkit && (css.filter ? css.filter !== 'none' : false) || ['transform', 'perspective', 'filter'].some(value => (css.willChange || '').includes(value)) || ['paint', 'layout', 'strict', 'content'].some(value => (css.contain || '').includes(value));\n}\nfunction getContainingBlock(element) {\n  let currentNode = getParentNode(element);\n  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    if (isContainingBlock(currentNode)) {\n      return currentNode;\n    } else {\n      currentNode = getParentNode(currentNode);\n    }\n  }\n  return null;\n}\nfunction isWebKit() {\n  if (typeof CSS === 'undefined' || !CSS.supports) return false;\n  return CSS.supports('-webkit-backdrop-filter', 'none');\n}\nfunction isLastTraversableNode(node) {\n  return ['html', 'body', '#document'].includes(getNodeName(node));\n}\nfunction getComputedStyle(element) {\n  return getWindow(element).getComputedStyle(element);\n}\nfunction getNodeScroll(element) {\n  if (isElement(element)) {\n    return {\n      scrollLeft: element.scrollLeft,\n      scrollTop: element.scrollTop\n    };\n  }\n  return {\n    scrollLeft: element.pageXOffset,\n    scrollTop: element.pageYOffset\n  };\n}\nfunction getParentNode(node) {\n  if (getNodeName(node) === 'html') {\n    return node;\n  }\n  const result =\n  // Step into the shadow DOM of the parent of a slotted node.\n  node.assignedSlot ||\n  // DOM Element detected.\n  node.parentNode ||\n  // ShadowRoot detected.\n  isShadowRoot(node) && node.host ||\n  // Fallback.\n  getDocumentElement(node);\n  return isShadowRoot(result) ? result.host : result;\n}\nfunction getNearestOverflowAncestor(node) {\n  const parentNode = getParentNode(node);\n  if (isLastTraversableNode(parentNode)) {\n    return node.ownerDocument ? node.ownerDocument.body : node.body;\n  }\n  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {\n    return parentNode;\n  }\n  return getNearestOverflowAncestor(parentNode);\n}\nfunction getOverflowAncestors(node, list, traverseIframes) {\n  var _node$ownerDocument2;\n  if (list === void 0) {\n    list = [];\n  }\n  if (traverseIframes === void 0) {\n    traverseIframes = true;\n  }\n  const scrollableAncestor = getNearestOverflowAncestor(node);\n  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);\n  const win = getWindow(scrollableAncestor);\n  if (isBody) {\n    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], win.frameElement && traverseIframes ? getOverflowAncestors(win.frameElement) : []);\n  }\n  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));\n}\n\nexport { getComputedStyle, getContainingBlock, getDocumentElement, getNearestOverflowAncestor, getNodeName, getNodeScroll, getOverflowAncestors, getParentNode, getWindow, isContainingBlock, isElement, isHTMLElement, isLastTraversableNode, isNode, isOverflowElement, isShadowRoot, isTableElement, isWebKit };\n","import { rectToClientRect, autoPlacement as autoPlacement$1, shift as shift$1, flip as flip$1, size as size$1, hide as hide$1, arrow as arrow$1, inline as inline$1, limitShift as limitShift$1, computePosition as computePosition$1 } from '@floating-ui/core';\nexport { detectOverflow, offset } from '@floating-ui/core';\nimport { round, createCoords, max, min, floor } from '@floating-ui/utils';\nimport { getComputedStyle, isHTMLElement, isElement, getWindow, isWebKit, getDocumentElement, getNodeName, isOverflowElement, getNodeScroll, getOverflowAncestors, getParentNode, isLastTraversableNode, isContainingBlock, isTableElement, getContainingBlock } from '@floating-ui/utils/dom';\nexport { getOverflowAncestors } from '@floating-ui/utils/dom';\n\nfunction getCssDimensions(element) {\n  const css = getComputedStyle(element);\n  // In testing environments, the `width` and `height` properties are empty\n  // strings for SVG elements, returning NaN. Fallback to `0` in this case.\n  let width = parseFloat(css.width) || 0;\n  let height = parseFloat(css.height) || 0;\n  const hasOffset = isHTMLElement(element);\n  const offsetWidth = hasOffset ? element.offsetWidth : width;\n  const offsetHeight = hasOffset ? element.offsetHeight : height;\n  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;\n  if (shouldFallback) {\n    width = offsetWidth;\n    height = offsetHeight;\n  }\n  return {\n    width,\n    height,\n    $: shouldFallback\n  };\n}\n\nfunction unwrapElement(element) {\n  return !isElement(element) ? element.contextElement : element;\n}\n\nfunction getScale(element) {\n  const domElement = unwrapElement(element);\n  if (!isHTMLElement(domElement)) {\n    return createCoords(1);\n  }\n  const rect = domElement.getBoundingClientRect();\n  const {\n    width,\n    height,\n    $\n  } = getCssDimensions(domElement);\n  let x = ($ ? round(rect.width) : rect.width) / width;\n  let y = ($ ? round(rect.height) : rect.height) / height;\n\n  // 0, NaN, or Infinity should always fallback to 1.\n\n  if (!x || !Number.isFinite(x)) {\n    x = 1;\n  }\n  if (!y || !Number.isFinite(y)) {\n    y = 1;\n  }\n  return {\n    x,\n    y\n  };\n}\n\nconst noOffsets = /*#__PURE__*/createCoords(0);\nfunction getVisualOffsets(element) {\n  const win = getWindow(element);\n  if (!isWebKit() || !win.visualViewport) {\n    return noOffsets;\n  }\n  return {\n    x: win.visualViewport.offsetLeft,\n    y: win.visualViewport.offsetTop\n  };\n}\nfunction shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {\n    return false;\n  }\n  return isFixed;\n}\n\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n  if (isFixedStrategy === void 0) {\n    isFixedStrategy = false;\n  }\n  const clientRect = element.getBoundingClientRect();\n  const domElement = unwrapElement(element);\n  let scale = createCoords(1);\n  if (includeScale) {\n    if (offsetParent) {\n      if (isElement(offsetParent)) {\n        scale = getScale(offsetParent);\n      }\n    } else {\n      scale = getScale(element);\n    }\n  }\n  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);\n  let x = (clientRect.left + visualOffsets.x) / scale.x;\n  let y = (clientRect.top + visualOffsets.y) / scale.y;\n  let width = clientRect.width / scale.x;\n  let height = clientRect.height / scale.y;\n  if (domElement) {\n    const win = getWindow(domElement);\n    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;\n    let currentWin = win;\n    let currentIFrame = currentWin.frameElement;\n    while (currentIFrame && offsetParent && offsetWin !== currentWin) {\n      const iframeScale = getScale(currentIFrame);\n      const iframeRect = currentIFrame.getBoundingClientRect();\n      const css = getComputedStyle(currentIFrame);\n      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;\n      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;\n      x *= iframeScale.x;\n      y *= iframeScale.y;\n      width *= iframeScale.x;\n      height *= iframeScale.y;\n      x += left;\n      y += top;\n      currentWin = getWindow(currentIFrame);\n      currentIFrame = currentWin.frameElement;\n    }\n  }\n  return rectToClientRect({\n    width,\n    height,\n    x,\n    y\n  });\n}\n\nconst topLayerSelectors = [':popover-open', ':modal'];\nfunction isTopLayer(floating) {\n  return topLayerSelectors.some(selector => {\n    try {\n      return floating.matches(selector);\n    } catch (e) {\n      return false;\n    }\n  });\n}\n\nfunction convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {\n  let {\n    elements,\n    rect,\n    offsetParent,\n    strategy\n  } = _ref;\n  const isFixed = strategy === 'fixed';\n  const documentElement = getDocumentElement(offsetParent);\n  const topLayer = elements ? isTopLayer(elements.floating) : false;\n  if (offsetParent === documentElement || topLayer && isFixed) {\n    return rect;\n  }\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  let scale = createCoords(1);\n  const offsets = createCoords(0);\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isHTMLElement(offsetParent)) {\n      const offsetRect = getBoundingClientRect(offsetParent);\n      scale = getScale(offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    }\n  }\n  return {\n    width: rect.width * scale.x,\n    height: rect.height * scale.y,\n    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,\n    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y\n  };\n}\n\nfunction getClientRects(element) {\n  return Array.from(element.getClientRects());\n}\n\nfunction getWindowScrollBarX(element) {\n  // If <html> has a CSS width greater than the viewport, then this will be\n  // incorrect for RTL.\n  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;\n}\n\n// Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable.\nfunction getDocumentRect(element) {\n  const html = getDocumentElement(element);\n  const scroll = getNodeScroll(element);\n  const body = element.ownerDocument.body;\n  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);\n  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);\n  let x = -scroll.scrollLeft + getWindowScrollBarX(element);\n  const y = -scroll.scrollTop;\n  if (getComputedStyle(body).direction === 'rtl') {\n    x += max(html.clientWidth, body.clientWidth) - width;\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\nfunction getViewportRect(element, strategy) {\n  const win = getWindow(element);\n  const html = getDocumentElement(element);\n  const visualViewport = win.visualViewport;\n  let width = html.clientWidth;\n  let height = html.clientHeight;\n  let x = 0;\n  let y = 0;\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    const visualViewportBased = isWebKit();\n    if (!visualViewportBased || visualViewportBased && strategy === 'fixed') {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\n// Returns the inner client rect, subtracting scrollbars if present.\nfunction getInnerBoundingClientRect(element, strategy) {\n  const clientRect = getBoundingClientRect(element, true, strategy === 'fixed');\n  const top = clientRect.top + element.clientTop;\n  const left = clientRect.left + element.clientLeft;\n  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);\n  const width = element.clientWidth * scale.x;\n  const height = element.clientHeight * scale.y;\n  const x = left * scale.x;\n  const y = top * scale.y;\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\nfunction getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {\n  let rect;\n  if (clippingAncestor === 'viewport') {\n    rect = getViewportRect(element, strategy);\n  } else if (clippingAncestor === 'document') {\n    rect = getDocumentRect(getDocumentElement(element));\n  } else if (isElement(clippingAncestor)) {\n    rect = getInnerBoundingClientRect(clippingAncestor, strategy);\n  } else {\n    const visualOffsets = getVisualOffsets(element);\n    rect = {\n      ...clippingAncestor,\n      x: clippingAncestor.x - visualOffsets.x,\n      y: clippingAncestor.y - visualOffsets.y\n    };\n  }\n  return rectToClientRect(rect);\n}\nfunction hasFixedPositionAncestor(element, stopNode) {\n  const parentNode = getParentNode(element);\n  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {\n    return false;\n  }\n  return getComputedStyle(parentNode).position === 'fixed' || hasFixedPositionAncestor(parentNode, stopNode);\n}\n\n// A \"clipping ancestor\" is an `overflow` element with the characteristic of\n// clipping (or hiding) child elements. This returns all clipping ancestors\n// of the given element up the tree.\nfunction getClippingElementAncestors(element, cache) {\n  const cachedResult = cache.get(element);\n  if (cachedResult) {\n    return cachedResult;\n  }\n  let result = getOverflowAncestors(element, [], false).filter(el => isElement(el) && getNodeName(el) !== 'body');\n  let currentContainingBlockComputedStyle = null;\n  const elementIsFixed = getComputedStyle(element).position === 'fixed';\n  let currentNode = elementIsFixed ? getParentNode(element) : element;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    const computedStyle = getComputedStyle(currentNode);\n    const currentNodeIsContaining = isContainingBlock(currentNode);\n    if (!currentNodeIsContaining && computedStyle.position === 'fixed') {\n      currentContainingBlockComputedStyle = null;\n    }\n    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === 'static' && !!currentContainingBlockComputedStyle && ['absolute', 'fixed'].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);\n    if (shouldDropCurrentNode) {\n      // Drop non-containing blocks.\n      result = result.filter(ancestor => ancestor !== currentNode);\n    } else {\n      // Record last containing block for next iteration.\n      currentContainingBlockComputedStyle = computedStyle;\n    }\n    currentNode = getParentNode(currentNode);\n  }\n  cache.set(element, result);\n  return result;\n}\n\n// Gets the maximum area that the element is visible in due to any number of\n// clipping ancestors.\nfunction getClippingRect(_ref) {\n  let {\n    element,\n    boundary,\n    rootBoundary,\n    strategy\n  } = _ref;\n  const elementClippingAncestors = boundary === 'clippingAncestors' ? getClippingElementAncestors(element, this._c) : [].concat(boundary);\n  const clippingAncestors = [...elementClippingAncestors, rootBoundary];\n  const firstClippingAncestor = clippingAncestors[0];\n  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {\n    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);\n    accRect.top = max(rect.top, accRect.top);\n    accRect.right = min(rect.right, accRect.right);\n    accRect.bottom = min(rect.bottom, accRect.bottom);\n    accRect.left = max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));\n  return {\n    width: clippingRect.right - clippingRect.left,\n    height: clippingRect.bottom - clippingRect.top,\n    x: clippingRect.left,\n    y: clippingRect.top\n  };\n}\n\nfunction getDimensions(element) {\n  const {\n    width,\n    height\n  } = getCssDimensions(element);\n  return {\n    width,\n    height\n  };\n}\n\nfunction getRectRelativeToOffsetParent(element, offsetParent, strategy) {\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  const documentElement = getDocumentElement(offsetParent);\n  const isFixed = strategy === 'fixed';\n  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  const offsets = createCoords(0);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isOffsetParentAnElement) {\n      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    } else if (documentElement) {\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n  const x = rect.left + scroll.scrollLeft - offsets.x;\n  const y = rect.top + scroll.scrollTop - offsets.y;\n  return {\n    x,\n    y,\n    width: rect.width,\n    height: rect.height\n  };\n}\n\nfunction getTrueOffsetParent(element, polyfill) {\n  if (!isHTMLElement(element) || getComputedStyle(element).position === 'fixed') {\n    return null;\n  }\n  if (polyfill) {\n    return polyfill(element);\n  }\n  return element.offsetParent;\n}\n\n// Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\nfunction getOffsetParent(element, polyfill) {\n  const window = getWindow(element);\n  if (!isHTMLElement(element) || isTopLayer(element)) {\n    return window;\n  }\n  let offsetParent = getTrueOffsetParent(element, polyfill);\n  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {\n    offsetParent = getTrueOffsetParent(offsetParent, polyfill);\n  }\n  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static' && !isContainingBlock(offsetParent))) {\n    return window;\n  }\n  return offsetParent || getContainingBlock(element) || window;\n}\n\nconst getElementRects = async function (data) {\n  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;\n  const getDimensionsFn = this.getDimensions;\n  return {\n    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),\n    floating: {\n      x: 0,\n      y: 0,\n      ...(await getDimensionsFn(data.floating))\n    }\n  };\n};\n\nfunction isRTL(element) {\n  return getComputedStyle(element).direction === 'rtl';\n}\n\nconst platform = {\n  convertOffsetParentRelativeRectToViewportRelativeRect,\n  getDocumentElement,\n  getClippingRect,\n  getOffsetParent,\n  getElementRects,\n  getClientRects,\n  getDimensions,\n  getScale,\n  isElement,\n  isRTL\n};\n\n// https://samthor.au/2021/observing-dom/\nfunction observeMove(element, onMove) {\n  let io = null;\n  let timeoutId;\n  const root = getDocumentElement(element);\n  function cleanup() {\n    var _io;\n    clearTimeout(timeoutId);\n    (_io = io) == null || _io.disconnect();\n    io = null;\n  }\n  function refresh(skip, threshold) {\n    if (skip === void 0) {\n      skip = false;\n    }\n    if (threshold === void 0) {\n      threshold = 1;\n    }\n    cleanup();\n    const {\n      left,\n      top,\n      width,\n      height\n    } = element.getBoundingClientRect();\n    if (!skip) {\n      onMove();\n    }\n    if (!width || !height) {\n      return;\n    }\n    const insetTop = floor(top);\n    const insetRight = floor(root.clientWidth - (left + width));\n    const insetBottom = floor(root.clientHeight - (top + height));\n    const insetLeft = floor(left);\n    const rootMargin = -insetTop + \"px \" + -insetRight + \"px \" + -insetBottom + \"px \" + -insetLeft + \"px\";\n    const options = {\n      rootMargin,\n      threshold: max(0, min(1, threshold)) || 1\n    };\n    let isFirstUpdate = true;\n    function handleObserve(entries) {\n      const ratio = entries[0].intersectionRatio;\n      if (ratio !== threshold) {\n        if (!isFirstUpdate) {\n          return refresh();\n        }\n        if (!ratio) {\n          timeoutId = setTimeout(() => {\n            refresh(false, 1e-7);\n          }, 100);\n        } else {\n          refresh(false, ratio);\n        }\n      }\n      isFirstUpdate = false;\n    }\n\n    // Older browsers don't support a `document` as the root and will throw an\n    // error.\n    try {\n      io = new IntersectionObserver(handleObserve, {\n        ...options,\n        // Handle <iframe>s\n        root: root.ownerDocument\n      });\n    } catch (e) {\n      io = new IntersectionObserver(handleObserve, options);\n    }\n    io.observe(element);\n  }\n  refresh(true);\n  return cleanup;\n}\n\n/**\n * Automatically updates the position of the floating element when necessary.\n * Should only be called when the floating element is mounted on the DOM or\n * visible on the screen.\n * @returns cleanup function that should be invoked when the floating element is\n * removed from the DOM or hidden from the screen.\n * @see https://floating-ui.com/docs/autoUpdate\n */\nfunction autoUpdate(reference, floating, update, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    ancestorScroll = true,\n    ancestorResize = true,\n    elementResize = typeof ResizeObserver === 'function',\n    layoutShift = typeof IntersectionObserver === 'function',\n    animationFrame = false\n  } = options;\n  const referenceEl = unwrapElement(reference);\n  const ancestors = ancestorScroll || ancestorResize ? [...(referenceEl ? getOverflowAncestors(referenceEl) : []), ...getOverflowAncestors(floating)] : [];\n  ancestors.forEach(ancestor => {\n    ancestorScroll && ancestor.addEventListener('scroll', update, {\n      passive: true\n    });\n    ancestorResize && ancestor.addEventListener('resize', update);\n  });\n  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;\n  let reobserveFrame = -1;\n  let resizeObserver = null;\n  if (elementResize) {\n    resizeObserver = new ResizeObserver(_ref => {\n      let [firstEntry] = _ref;\n      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {\n        // Prevent update loops when using the `size` middleware.\n        // https://github.com/floating-ui/floating-ui/issues/1740\n        resizeObserver.unobserve(floating);\n        cancelAnimationFrame(reobserveFrame);\n        reobserveFrame = requestAnimationFrame(() => {\n          var _resizeObserver;\n          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);\n        });\n      }\n      update();\n    });\n    if (referenceEl && !animationFrame) {\n      resizeObserver.observe(referenceEl);\n    }\n    resizeObserver.observe(floating);\n  }\n  let frameId;\n  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;\n  if (animationFrame) {\n    frameLoop();\n  }\n  function frameLoop() {\n    const nextRefRect = getBoundingClientRect(reference);\n    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {\n      update();\n    }\n    prevRefRect = nextRefRect;\n    frameId = requestAnimationFrame(frameLoop);\n  }\n  update();\n  return () => {\n    var _resizeObserver2;\n    ancestors.forEach(ancestor => {\n      ancestorScroll && ancestor.removeEventListener('scroll', update);\n      ancestorResize && ancestor.removeEventListener('resize', update);\n    });\n    cleanupIo == null || cleanupIo();\n    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();\n    resizeObserver = null;\n    if (animationFrame) {\n      cancelAnimationFrame(frameId);\n    }\n  };\n}\n\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = autoPlacement$1;\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = shift$1;\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = flip$1;\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = size$1;\n\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = hide$1;\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = arrow$1;\n\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = inline$1;\n\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = limitShift$1;\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n */\nconst computePosition = (reference, floating, options) => {\n  // This caches the expensive `getClippingElementAncestors` function so that\n  // multiple lifecycle resets re-use the same result. It only lives for a\n  // single call. If other functions become expensive, we can add them as well.\n  const cache = new Map();\n  const mergedOptions = {\n    platform,\n    ...options\n  };\n  const platformWithCache = {\n    ...mergedOptions.platform,\n    _c: cache\n  };\n  return computePosition$1(reference, floating, {\n    ...mergedOptions,\n    platform: platformWithCache\n  });\n};\n\nexport { arrow, autoPlacement, autoUpdate, computePosition, flip, hide, inline, limitShift, platform, shift, size };\n","import { arrow as arrow$1, computePosition } from '@floating-ui/dom';\nexport { autoPlacement, autoUpdate, computePosition, detectOverflow, flip, getOverflowAncestors, hide, inline, limitShift, offset, platform, shift, size } from '@floating-ui/dom';\nimport * as React from 'react';\nimport { useLayoutEffect, useEffect } from 'react';\nimport * as ReactDOM from 'react-dom';\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * This wraps the core `arrow` middleware to allow React refs as the element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => {\n  function isRef(value) {\n    return {}.hasOwnProperty.call(value, 'current');\n  }\n  return {\n    name: 'arrow',\n    options,\n    fn(state) {\n      const {\n        element,\n        padding\n      } = typeof options === 'function' ? options(state) : options;\n      if (element && isRef(element)) {\n        if (element.current != null) {\n          return arrow$1({\n            element: element.current,\n            padding\n          }).fn(state);\n        }\n        return {};\n      }\n      if (element) {\n        return arrow$1({\n          element,\n          padding\n        }).fn(state);\n      }\n      return {};\n    }\n  };\n};\n\nvar index = typeof document !== 'undefined' ? useLayoutEffect : useEffect;\n\n// Fork of `fast-deep-equal` that only does the comparisons we need and compares\n// functions\nfunction deepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if (typeof a !== typeof b) {\n    return false;\n  }\n  if (typeof a === 'function' && a.toString() === b.toString()) {\n    return true;\n  }\n  let length;\n  let i;\n  let keys;\n  if (a && b && typeof a === 'object') {\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length !== b.length) return false;\n      for (i = length; i-- !== 0;) {\n        if (!deepEqual(a[i], b[i])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) {\n      return false;\n    }\n    for (i = length; i-- !== 0;) {\n      if (!{}.hasOwnProperty.call(b, keys[i])) {\n        return false;\n      }\n    }\n    for (i = length; i-- !== 0;) {\n      const key = keys[i];\n      if (key === '_owner' && a.$$typeof) {\n        continue;\n      }\n      if (!deepEqual(a[key], b[key])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // biome-ignore lint/suspicious/noSelfCompare: in source\n  return a !== a && b !== b;\n}\n\nfunction getDPR(element) {\n  if (typeof window === 'undefined') {\n    return 1;\n  }\n  const win = element.ownerDocument.defaultView || window;\n  return win.devicePixelRatio || 1;\n}\n\nfunction roundByDPR(element, value) {\n  const dpr = getDPR(element);\n  return Math.round(value * dpr) / dpr;\n}\n\nfunction useLatestRef(value) {\n  const ref = React.useRef(value);\n  index(() => {\n    ref.current = value;\n  });\n  return ref;\n}\n\n/**\n * Provides data to position a floating element.\n * @see https://floating-ui.com/docs/useFloating\n */\nfunction useFloating(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform,\n    elements: {\n      reference: externalReference,\n      floating: externalFloating\n    } = {},\n    transform = true,\n    whileElementsMounted,\n    open\n  } = options;\n  const [data, setData] = React.useState({\n    x: 0,\n    y: 0,\n    strategy,\n    placement,\n    middlewareData: {},\n    isPositioned: false\n  });\n  const [latestMiddleware, setLatestMiddleware] = React.useState(middleware);\n  if (!deepEqual(latestMiddleware, middleware)) {\n    setLatestMiddleware(middleware);\n  }\n  const [_reference, _setReference] = React.useState(null);\n  const [_floating, _setFloating] = React.useState(null);\n  const setReference = React.useCallback(node => {\n    if (node !== referenceRef.current) {\n      referenceRef.current = node;\n      _setReference(node);\n    }\n  }, []);\n  const setFloating = React.useCallback(node => {\n    if (node !== floatingRef.current) {\n      floatingRef.current = node;\n      _setFloating(node);\n    }\n  }, []);\n  const referenceEl = externalReference || _reference;\n  const floatingEl = externalFloating || _floating;\n  const referenceRef = React.useRef(null);\n  const floatingRef = React.useRef(null);\n  const dataRef = React.useRef(data);\n  const hasWhileElementsMounted = whileElementsMounted != null;\n  const whileElementsMountedRef = useLatestRef(whileElementsMounted);\n  const platformRef = useLatestRef(platform);\n  const update = React.useCallback(() => {\n    if (!referenceRef.current || !floatingRef.current) {\n      return;\n    }\n    const config = {\n      placement,\n      strategy,\n      middleware: latestMiddleware\n    };\n    if (platformRef.current) {\n      config.platform = platformRef.current;\n    }\n    computePosition(referenceRef.current, floatingRef.current, config).then(data => {\n      const fullData = {\n        ...data,\n        isPositioned: true\n      };\n      if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {\n        dataRef.current = fullData;\n        ReactDOM.flushSync(() => {\n          setData(fullData);\n        });\n      }\n    });\n  }, [latestMiddleware, placement, strategy, platformRef]);\n  index(() => {\n    if (open === false && dataRef.current.isPositioned) {\n      dataRef.current.isPositioned = false;\n      setData(data => ({\n        ...data,\n        isPositioned: false\n      }));\n    }\n  }, [open]);\n  const isMountedRef = React.useRef(false);\n  index(() => {\n    isMountedRef.current = true;\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: `hasWhileElementsMounted` is intentionally included.\n  index(() => {\n    if (referenceEl) referenceRef.current = referenceEl;\n    if (floatingEl) floatingRef.current = floatingEl;\n    if (referenceEl && floatingEl) {\n      if (whileElementsMountedRef.current) {\n        return whileElementsMountedRef.current(referenceEl, floatingEl, update);\n      }\n      update();\n    }\n  }, [referenceEl, floatingEl, update, whileElementsMountedRef, hasWhileElementsMounted]);\n  const refs = React.useMemo(() => ({\n    reference: referenceRef,\n    floating: floatingRef,\n    setReference,\n    setFloating\n  }), [setReference, setFloating]);\n  const elements = React.useMemo(() => ({\n    reference: referenceEl,\n    floating: floatingEl\n  }), [referenceEl, floatingEl]);\n  const floatingStyles = React.useMemo(() => {\n    const initialStyles = {\n      position: strategy,\n      left: 0,\n      top: 0\n    };\n    if (!elements.floating) {\n      return initialStyles;\n    }\n    const x = roundByDPR(elements.floating, data.x);\n    const y = roundByDPR(elements.floating, data.y);\n    if (transform) {\n      return {\n        ...initialStyles,\n        transform: \"translate(\" + x + \"px, \" + y + \"px)\",\n        ...(getDPR(elements.floating) >= 1.5 && {\n          willChange: 'transform'\n        })\n      };\n    }\n    return {\n      position: strategy,\n      left: x,\n      top: y\n    };\n  }, [strategy, transform, elements.floating, data.x, data.y]);\n  return React.useMemo(() => ({\n    ...data,\n    update,\n    refs,\n    elements,\n    floatingStyles\n  }), [data, update, refs, elements, floatingStyles]);\n}\n\nexport { arrow, useFloating };\n","import $jbnEx$babelruntimehelpersesmextends from \"@babel/runtime/helpers/esm/extends\";\nimport {forwardRef as $jbnEx$forwardRef, createElement as $jbnEx$createElement} from \"react\";\nimport {Primitive as $jbnEx$Primitive} from \"@radix-ui/react-primitive\";\n\n\n\n\n/* -------------------------------------------------------------------------------------------------\n * Arrow\n * -----------------------------------------------------------------------------------------------*/ const $7e8f5cd07187803e$var$NAME = 'Arrow';\nconst $7e8f5cd07187803e$export$21b07c8f274aebd5 = /*#__PURE__*/ $jbnEx$forwardRef((props, forwardedRef)=>{\n    const { children: children , width: width = 10 , height: height = 5 , ...arrowProps } = props;\n    return /*#__PURE__*/ $jbnEx$createElement($jbnEx$Primitive.svg, $jbnEx$babelruntimehelpersesmextends({}, arrowProps, {\n        ref: forwardedRef,\n        width: width,\n        height: height,\n        viewBox: \"0 0 30 10\",\n        preserveAspectRatio: \"none\"\n    }), props.asChild ? children : /*#__PURE__*/ $jbnEx$createElement(\"polygon\", {\n        points: \"0,0 30,0 15,10\"\n    }));\n});\n/*#__PURE__*/ Object.assign($7e8f5cd07187803e$export$21b07c8f274aebd5, {\n    displayName: $7e8f5cd07187803e$var$NAME\n});\n/* -----------------------------------------------------------------------------------------------*/ const $7e8f5cd07187803e$export$be92b6f5f03c0fe9 = $7e8f5cd07187803e$export$21b07c8f274aebd5;\n\n\n\n\nexport {$7e8f5cd07187803e$export$21b07c8f274aebd5 as Arrow, $7e8f5cd07187803e$export$be92b6f5f03c0fe9 as Root};\n//# sourceMappingURL=index.mjs.map\n","import {useState as $9gyGR$useState} from \"react\";\nimport {useLayoutEffect as $9gyGR$useLayoutEffect} from \"@radix-ui/react-use-layout-effect\";\n\n\n\nfunction $db6c3485150b8e66$export$1ab7ae714698c4b8(element) {\n    const [size, setSize] = $9gyGR$useState(undefined);\n    $9gyGR$useLayoutEffect(()=>{\n        if (element) {\n            // provide size as early as possible\n            setSize({\n                width: element.offsetWidth,\n                height: element.offsetHeight\n            });\n            const resizeObserver = new ResizeObserver((entries)=>{\n                if (!Array.isArray(entries)) return;\n                 // Since we only observe the one element, we don't need to loop over the\n                // array\n                if (!entries.length) return;\n                const entry = entries[0];\n                let width;\n                let height;\n                if ('borderBoxSize' in entry) {\n                    const borderSizeEntry = entry['borderBoxSize']; // iron out differences between browsers\n                    const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;\n                    width = borderSize['inlineSize'];\n                    height = borderSize['blockSize'];\n                } else {\n                    // for browsers that don't support `borderBoxSize`\n                    // we calculate it ourselves to get the correct border box.\n                    width = element.offsetWidth;\n                    height = element.offsetHeight;\n                }\n                setSize({\n                    width: width,\n                    height: height\n                });\n            });\n            resizeObserver.observe(element, {\n                box: 'border-box'\n            });\n            return ()=>resizeObserver.unobserve(element)\n            ;\n        } else // We only want to reset to `undefined` when the element becomes `null`,\n        // not if it changes to another element.\n        setSize(undefined);\n    }, [\n        element\n    ]);\n    return size;\n}\n\n\n\n\nexport {$db6c3485150b8e66$export$1ab7ae714698c4b8 as useSize};\n//# sourceMappingURL=index.mjs.map\n","import $kY93V$babelruntimehelpersesmextends from \"@babel/runtime/helpers/esm/extends\";\nimport {useState as $kY93V$useState, createElement as $kY93V$createElement, forwardRef as $kY93V$forwardRef, useRef as $kY93V$useRef, useEffect as $kY93V$useEffect} from \"react\";\nimport {useFloating as $kY93V$useFloating, autoUpdate as $kY93V$autoUpdate, offset as $kY93V$offset, shift as $kY93V$shift, limitShift as $kY93V$limitShift, flip as $kY93V$flip, size as $kY93V$size, arrow as $kY93V$arrow, hide as $kY93V$hide} from \"@floating-ui/react-dom\";\nimport {Root as $kY93V$Root} from \"@radix-ui/react-arrow\";\nimport {useComposedRefs as $kY93V$useComposedRefs} from \"@radix-ui/react-compose-refs\";\nimport {createContextScope as $kY93V$createContextScope} from \"@radix-ui/react-context\";\nimport {Primitive as $kY93V$Primitive} from \"@radix-ui/react-primitive\";\nimport {useCallbackRef as $kY93V$useCallbackRef} from \"@radix-ui/react-use-callback-ref\";\nimport {useLayoutEffect as $kY93V$useLayoutEffect} from \"@radix-ui/react-use-layout-effect\";\nimport {useSize as $kY93V$useSize} from \"@radix-ui/react-use-size\";\n\n\n\n\n\n\n\n\n\n\n\nconst $cf1ac5d9fe0e8206$export$36f0086da09c4b9f = [\n    'top',\n    'right',\n    'bottom',\n    'left'\n];\nconst $cf1ac5d9fe0e8206$export$3671ffab7b302fc9 = [\n    'start',\n    'center',\n    'end'\n];\n/* -------------------------------------------------------------------------------------------------\n * Popper\n * -----------------------------------------------------------------------------------------------*/ const $cf1ac5d9fe0e8206$var$POPPER_NAME = 'Popper';\nconst [$cf1ac5d9fe0e8206$var$createPopperContext, $cf1ac5d9fe0e8206$export$722aac194ae923] = $kY93V$createContextScope($cf1ac5d9fe0e8206$var$POPPER_NAME);\nconst [$cf1ac5d9fe0e8206$var$PopperProvider, $cf1ac5d9fe0e8206$var$usePopperContext] = $cf1ac5d9fe0e8206$var$createPopperContext($cf1ac5d9fe0e8206$var$POPPER_NAME);\nconst $cf1ac5d9fe0e8206$export$badac9ada3a0bdf9 = (props)=>{\n    const { __scopePopper: __scopePopper , children: children  } = props;\n    const [anchor, setAnchor] = $kY93V$useState(null);\n    return /*#__PURE__*/ $kY93V$createElement($cf1ac5d9fe0e8206$var$PopperProvider, {\n        scope: __scopePopper,\n        anchor: anchor,\n        onAnchorChange: setAnchor\n    }, children);\n};\n/*#__PURE__*/ Object.assign($cf1ac5d9fe0e8206$export$badac9ada3a0bdf9, {\n    displayName: $cf1ac5d9fe0e8206$var$POPPER_NAME\n});\n/* -------------------------------------------------------------------------------------------------\n * PopperAnchor\n * -----------------------------------------------------------------------------------------------*/ const $cf1ac5d9fe0e8206$var$ANCHOR_NAME = 'PopperAnchor';\nconst $cf1ac5d9fe0e8206$export$ecd4e1ccab6ed6d = /*#__PURE__*/ $kY93V$forwardRef((props, forwardedRef)=>{\n    const { __scopePopper: __scopePopper , virtualRef: virtualRef , ...anchorProps } = props;\n    const context = $cf1ac5d9fe0e8206$var$usePopperContext($cf1ac5d9fe0e8206$var$ANCHOR_NAME, __scopePopper);\n    const ref = $kY93V$useRef(null);\n    const composedRefs = $kY93V$useComposedRefs(forwardedRef, ref);\n    $kY93V$useEffect(()=>{\n        // Consumer can anchor the popper to something that isn't\n        // a DOM node e.g. pointer position, so we override the\n        // `anchorRef` with their virtual ref in this case.\n        context.onAnchorChange((virtualRef === null || virtualRef === void 0 ? void 0 : virtualRef.current) || ref.current);\n    });\n    return virtualRef ? null : /*#__PURE__*/ $kY93V$createElement($kY93V$Primitive.div, $kY93V$babelruntimehelpersesmextends({}, anchorProps, {\n        ref: composedRefs\n    }));\n});\n/*#__PURE__*/ Object.assign($cf1ac5d9fe0e8206$export$ecd4e1ccab6ed6d, {\n    displayName: $cf1ac5d9fe0e8206$var$ANCHOR_NAME\n});\n/* -------------------------------------------------------------------------------------------------\n * PopperContent\n * -----------------------------------------------------------------------------------------------*/ const $cf1ac5d9fe0e8206$var$CONTENT_NAME = 'PopperContent';\nconst [$cf1ac5d9fe0e8206$var$PopperContentProvider, $cf1ac5d9fe0e8206$var$useContentContext] = $cf1ac5d9fe0e8206$var$createPopperContext($cf1ac5d9fe0e8206$var$CONTENT_NAME);\nconst $cf1ac5d9fe0e8206$export$bc4ae5855d3c4fc = /*#__PURE__*/ $kY93V$forwardRef((props, forwardedRef)=>{\n    var _arrowSize$width, _arrowSize$height, _middlewareData$arrow, _middlewareData$arrow2, _middlewareData$arrow3, _middlewareData$trans, _middlewareData$trans2, _middlewareData$hide;\n    const { __scopePopper: __scopePopper , side: side = 'bottom' , sideOffset: sideOffset = 0 , align: align = 'center' , alignOffset: alignOffset = 0 , arrowPadding: arrowPadding = 0 , avoidCollisions: avoidCollisions = true , collisionBoundary: collisionBoundary = [] , collisionPadding: collisionPaddingProp = 0 , sticky: sticky = 'partial' , hideWhenDetached: hideWhenDetached = false , updatePositionStrategy: updatePositionStrategy = 'optimized' , onPlaced: onPlaced , ...contentProps } = props;\n    const context = $cf1ac5d9fe0e8206$var$usePopperContext($cf1ac5d9fe0e8206$var$CONTENT_NAME, __scopePopper);\n    const [content, setContent] = $kY93V$useState(null);\n    const composedRefs = $kY93V$useComposedRefs(forwardedRef, (node)=>setContent(node)\n    );\n    const [arrow, setArrow] = $kY93V$useState(null);\n    const arrowSize = $kY93V$useSize(arrow);\n    const arrowWidth = (_arrowSize$width = arrowSize === null || arrowSize === void 0 ? void 0 : arrowSize.width) !== null && _arrowSize$width !== void 0 ? _arrowSize$width : 0;\n    const arrowHeight = (_arrowSize$height = arrowSize === null || arrowSize === void 0 ? void 0 : arrowSize.height) !== null && _arrowSize$height !== void 0 ? _arrowSize$height : 0;\n    const desiredPlacement = side + (align !== 'center' ? '-' + align : '');\n    const collisionPadding = typeof collisionPaddingProp === 'number' ? collisionPaddingProp : {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n        ...collisionPaddingProp\n    };\n    const boundary = Array.isArray(collisionBoundary) ? collisionBoundary : [\n        collisionBoundary\n    ];\n    const hasExplicitBoundaries = boundary.length > 0;\n    const detectOverflowOptions = {\n        padding: collisionPadding,\n        boundary: boundary.filter($cf1ac5d9fe0e8206$var$isNotNull),\n        // with `strategy: 'fixed'`, this is the only way to get it to respect boundaries\n        altBoundary: hasExplicitBoundaries\n    };\n    const { refs: refs , floatingStyles: floatingStyles , placement: placement , isPositioned: isPositioned , middlewareData: middlewareData  } = $kY93V$useFloating({\n        // default to `fixed` strategy so users don't have to pick and we also avoid focus scroll issues\n        strategy: 'fixed',\n        placement: desiredPlacement,\n        whileElementsMounted: (...args)=>{\n            const cleanup = $kY93V$autoUpdate(...args, {\n                animationFrame: updatePositionStrategy === 'always'\n            });\n            return cleanup;\n        },\n        elements: {\n            reference: context.anchor\n        },\n        middleware: [\n            $kY93V$offset({\n                mainAxis: sideOffset + arrowHeight,\n                alignmentAxis: alignOffset\n            }),\n            avoidCollisions && $kY93V$shift({\n                mainAxis: true,\n                crossAxis: false,\n                limiter: sticky === 'partial' ? $kY93V$limitShift() : undefined,\n                ...detectOverflowOptions\n            }),\n            avoidCollisions && $kY93V$flip({\n                ...detectOverflowOptions\n            }),\n            $kY93V$size({\n                ...detectOverflowOptions,\n                apply: ({ elements: elements , rects: rects , availableWidth: availableWidth , availableHeight: availableHeight  })=>{\n                    const { width: anchorWidth , height: anchorHeight  } = rects.reference;\n                    const contentStyle = elements.floating.style;\n                    contentStyle.setProperty('--radix-popper-available-width', `${availableWidth}px`);\n                    contentStyle.setProperty('--radix-popper-available-height', `${availableHeight}px`);\n                    contentStyle.setProperty('--radix-popper-anchor-width', `${anchorWidth}px`);\n                    contentStyle.setProperty('--radix-popper-anchor-height', `${anchorHeight}px`);\n                }\n            }),\n            arrow && $kY93V$arrow({\n                element: arrow,\n                padding: arrowPadding\n            }),\n            $cf1ac5d9fe0e8206$var$transformOrigin({\n                arrowWidth: arrowWidth,\n                arrowHeight: arrowHeight\n            }),\n            hideWhenDetached && $kY93V$hide({\n                strategy: 'referenceHidden',\n                ...detectOverflowOptions\n            })\n        ]\n    });\n    const [placedSide, placedAlign] = $cf1ac5d9fe0e8206$var$getSideAndAlignFromPlacement(placement);\n    const handlePlaced = $kY93V$useCallbackRef(onPlaced);\n    $kY93V$useLayoutEffect(()=>{\n        if (isPositioned) handlePlaced === null || handlePlaced === void 0 || handlePlaced();\n    }, [\n        isPositioned,\n        handlePlaced\n    ]);\n    const arrowX = (_middlewareData$arrow = middlewareData.arrow) === null || _middlewareData$arrow === void 0 ? void 0 : _middlewareData$arrow.x;\n    const arrowY = (_middlewareData$arrow2 = middlewareData.arrow) === null || _middlewareData$arrow2 === void 0 ? void 0 : _middlewareData$arrow2.y;\n    const cannotCenterArrow = ((_middlewareData$arrow3 = middlewareData.arrow) === null || _middlewareData$arrow3 === void 0 ? void 0 : _middlewareData$arrow3.centerOffset) !== 0;\n    const [contentZIndex, setContentZIndex] = $kY93V$useState();\n    $kY93V$useLayoutEffect(()=>{\n        if (content) setContentZIndex(window.getComputedStyle(content).zIndex);\n    }, [\n        content\n    ]);\n    return /*#__PURE__*/ $kY93V$createElement(\"div\", {\n        ref: refs.setFloating,\n        \"data-radix-popper-content-wrapper\": \"\",\n        style: {\n            ...floatingStyles,\n            transform: isPositioned ? floatingStyles.transform : 'translate(0, -200%)',\n            // keep off the page when measuring\n            minWidth: 'max-content',\n            zIndex: contentZIndex,\n            ['--radix-popper-transform-origin']: [\n                (_middlewareData$trans = middlewareData.transformOrigin) === null || _middlewareData$trans === void 0 ? void 0 : _middlewareData$trans.x,\n                (_middlewareData$trans2 = middlewareData.transformOrigin) === null || _middlewareData$trans2 === void 0 ? void 0 : _middlewareData$trans2.y\n            ].join(' ')\n        } // Floating UI interally calculates logical alignment based the `dir` attribute on\n        ,\n        dir: props.dir\n    }, /*#__PURE__*/ $kY93V$createElement($cf1ac5d9fe0e8206$var$PopperContentProvider, {\n        scope: __scopePopper,\n        placedSide: placedSide,\n        onArrowChange: setArrow,\n        arrowX: arrowX,\n        arrowY: arrowY,\n        shouldHideArrow: cannotCenterArrow\n    }, /*#__PURE__*/ $kY93V$createElement($kY93V$Primitive.div, $kY93V$babelruntimehelpersesmextends({\n        \"data-side\": placedSide,\n        \"data-align\": placedAlign\n    }, contentProps, {\n        ref: composedRefs,\n        style: {\n            ...contentProps.style,\n            // if the PopperContent hasn't been placed yet (not all measurements done)\n            // we prevent animations so that users's animation don't kick in too early referring wrong sides\n            animation: !isPositioned ? 'none' : undefined,\n            // hide the content if using the hide middleware and should be hidden\n            opacity: (_middlewareData$hide = middlewareData.hide) !== null && _middlewareData$hide !== void 0 && _middlewareData$hide.referenceHidden ? 0 : undefined\n        }\n    }))));\n});\n/*#__PURE__*/ Object.assign($cf1ac5d9fe0e8206$export$bc4ae5855d3c4fc, {\n    displayName: $cf1ac5d9fe0e8206$var$CONTENT_NAME\n});\n/* -------------------------------------------------------------------------------------------------\n * PopperArrow\n * -----------------------------------------------------------------------------------------------*/ const $cf1ac5d9fe0e8206$var$ARROW_NAME = 'PopperArrow';\nconst $cf1ac5d9fe0e8206$var$OPPOSITE_SIDE = {\n    top: 'bottom',\n    right: 'left',\n    bottom: 'top',\n    left: 'right'\n};\nconst $cf1ac5d9fe0e8206$export$79d62cd4e10a3fd0 = /*#__PURE__*/ $kY93V$forwardRef(function $cf1ac5d9fe0e8206$export$79d62cd4e10a3fd0(props, forwardedRef) {\n    const { __scopePopper: __scopePopper , ...arrowProps } = props;\n    const contentContext = $cf1ac5d9fe0e8206$var$useContentContext($cf1ac5d9fe0e8206$var$ARROW_NAME, __scopePopper);\n    const baseSide = $cf1ac5d9fe0e8206$var$OPPOSITE_SIDE[contentContext.placedSide];\n    return(/*#__PURE__*/ // we have to use an extra wrapper because `ResizeObserver` (used by `useSize`)\n    // doesn't report size as we'd expect on SVG elements.\n    // it reports their bounding box which is effectively the largest path inside the SVG.\n    $kY93V$createElement(\"span\", {\n        ref: contentContext.onArrowChange,\n        style: {\n            position: 'absolute',\n            left: contentContext.arrowX,\n            top: contentContext.arrowY,\n            [baseSide]: 0,\n            transformOrigin: {\n                top: '',\n                right: '0 0',\n                bottom: 'center 0',\n                left: '100% 0'\n            }[contentContext.placedSide],\n            transform: {\n                top: 'translateY(100%)',\n                right: 'translateY(50%) rotate(90deg) translateX(-50%)',\n                bottom: `rotate(180deg)`,\n                left: 'translateY(50%) rotate(-90deg) translateX(50%)'\n            }[contentContext.placedSide],\n            visibility: contentContext.shouldHideArrow ? 'hidden' : undefined\n        }\n    }, /*#__PURE__*/ $kY93V$createElement($kY93V$Root, $kY93V$babelruntimehelpersesmextends({}, arrowProps, {\n        ref: forwardedRef,\n        style: {\n            ...arrowProps.style,\n            // ensures the element can be measured correctly (mostly for if SVG)\n            display: 'block'\n        }\n    }))));\n});\n/*#__PURE__*/ Object.assign($cf1ac5d9fe0e8206$export$79d62cd4e10a3fd0, {\n    displayName: $cf1ac5d9fe0e8206$var$ARROW_NAME\n});\n/* -----------------------------------------------------------------------------------------------*/ function $cf1ac5d9fe0e8206$var$isNotNull(value) {\n    return value !== null;\n}\nconst $cf1ac5d9fe0e8206$var$transformOrigin = (options)=>({\n        name: 'transformOrigin',\n        options: options,\n        fn (data) {\n            var _middlewareData$arrow4, _middlewareData$arrow5, _middlewareData$arrow6, _middlewareData$arrow7, _middlewareData$arrow8;\n            const { placement: placement , rects: rects , middlewareData: middlewareData  } = data;\n            const cannotCenterArrow = ((_middlewareData$arrow4 = middlewareData.arrow) === null || _middlewareData$arrow4 === void 0 ? void 0 : _middlewareData$arrow4.centerOffset) !== 0;\n            const isArrowHidden = cannotCenterArrow;\n            const arrowWidth = isArrowHidden ? 0 : options.arrowWidth;\n            const arrowHeight = isArrowHidden ? 0 : options.arrowHeight;\n            const [placedSide, placedAlign] = $cf1ac5d9fe0e8206$var$getSideAndAlignFromPlacement(placement);\n            const noArrowAlign = {\n                start: '0%',\n                center: '50%',\n                end: '100%'\n            }[placedAlign];\n            const arrowXCenter = ((_middlewareData$arrow5 = (_middlewareData$arrow6 = middlewareData.arrow) === null || _middlewareData$arrow6 === void 0 ? void 0 : _middlewareData$arrow6.x) !== null && _middlewareData$arrow5 !== void 0 ? _middlewareData$arrow5 : 0) + arrowWidth / 2;\n            const arrowYCenter = ((_middlewareData$arrow7 = (_middlewareData$arrow8 = middlewareData.arrow) === null || _middlewareData$arrow8 === void 0 ? void 0 : _middlewareData$arrow8.y) !== null && _middlewareData$arrow7 !== void 0 ? _middlewareData$arrow7 : 0) + arrowHeight / 2;\n            let x = '';\n            let y = '';\n            if (placedSide === 'bottom') {\n                x = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;\n                y = `${-arrowHeight}px`;\n            } else if (placedSide === 'top') {\n                x = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;\n                y = `${rects.floating.height + arrowHeight}px`;\n            } else if (placedSide === 'right') {\n                x = `${-arrowHeight}px`;\n                y = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;\n            } else if (placedSide === 'left') {\n                x = `${rects.floating.width + arrowHeight}px`;\n                y = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;\n            }\n            return {\n                data: {\n                    x: x,\n                    y: y\n                }\n            };\n        }\n    })\n;\nfunction $cf1ac5d9fe0e8206$var$getSideAndAlignFromPlacement(placement) {\n    const [side, align = 'center'] = placement.split('-');\n    return [\n        side,\n        align\n    ];\n}\nconst $cf1ac5d9fe0e8206$export$be92b6f5f03c0fe9 = $cf1ac5d9fe0e8206$export$badac9ada3a0bdf9;\nconst $cf1ac5d9fe0e8206$export$b688253958b8dfe7 = $cf1ac5d9fe0e8206$export$ecd4e1ccab6ed6d;\nconst $cf1ac5d9fe0e8206$export$7c6e2c02157bb7d2 = $cf1ac5d9fe0e8206$export$bc4ae5855d3c4fc;\nconst $cf1ac5d9fe0e8206$export$21b07c8f274aebd5 = $cf1ac5d9fe0e8206$export$79d62cd4e10a3fd0;\n\n\n\n\nexport {$cf1ac5d9fe0e8206$export$722aac194ae923 as createPopperScope, $cf1ac5d9fe0e8206$export$badac9ada3a0bdf9 as Popper, $cf1ac5d9fe0e8206$export$ecd4e1ccab6ed6d as PopperAnchor, $cf1ac5d9fe0e8206$export$bc4ae5855d3c4fc as PopperContent, $cf1ac5d9fe0e8206$export$79d62cd4e10a3fd0 as PopperArrow, $cf1ac5d9fe0e8206$export$be92b6f5f03c0fe9 as Root, $cf1ac5d9fe0e8206$export$b688253958b8dfe7 as Anchor, $cf1ac5d9fe0e8206$export$7c6e2c02157bb7d2 as Content, $cf1ac5d9fe0e8206$export$21b07c8f274aebd5 as Arrow, $cf1ac5d9fe0e8206$export$36f0086da09c4b9f as SIDE_OPTIONS, $cf1ac5d9fe0e8206$export$3671ffab7b302fc9 as ALIGN_OPTIONS};\n//# sourceMappingURL=index.mjs.map\n"],"names":["sides","floating_ui_utils_min","Math","min","floating_ui_utils_max","max","round","floor","createCoords","v","x","y","oppositeSideMap","left","right","bottom","top","oppositeAlignmentMap","start","end","floating_ui_utils_evaluate","value","param","floating_ui_utils_getSide","placement","split","floating_ui_utils_getAlignment","getOppositeAxis","axis","getAxisLength","floating_ui_utils_getSideAxis","includes","floating_ui_utils_getOppositeAlignmentPlacement","replace","alignment","getOppositePlacement","side","floating_ui_utils_getPaddingObject","padding","floating_ui_utils_rectToClientRect","rect","width","height","computeCoordsFromPlacement","_ref","rtl","coords","reference","floating","sideAxis","alignmentAxis","alignLength","isVertical","commonX","commonY","commonAlign","computePosition","config","strategy","middleware","platform","validMiddleware","filter","Boolean","isRTL","rects","getElementRects","statefulPlacement","middlewareData","resetCount","i","length","name","fn","nextX","nextY","data","reset","initialPlacement","elements","detectOverflow","state","options","_await$platform$isEle","boundary","rootBoundary","elementContext","altBoundary","paddingObject","element","clippingClientRect","getClippingRect","isElement","contextElement","getDocumentElement","offsetParent","getOffsetParent","offsetScale","getScale","elementClientRect","convertOffsetParentRelativeRectToViewportRelativeRect","getSideOffsets","overflow","isAnySideFullyClipped","some","convertValueToCoords","mainAxisMulti","crossAxisMulti","rawValue","mainAxis","crossAxis","getNodeName","node","nodeName","toLowerCase","getWindow","_node$ownerDocument","ownerDocument","defaultView","window","isNode","document","documentElement","Node","Element","isHTMLElement","HTMLElement","isShadowRoot","ShadowRoot","isOverflowElement","overflowX","overflowY","display","getComputedStyle","test","isContainingBlock","webkit","isWebKit","css","transform","perspective","containerType","backdropFilter","willChange","contain","CSS","supports","isLastTraversableNode","getNodeScroll","scrollLeft","scrollTop","pageXOffset","pageYOffset","getParentNode","result","assignedSlot","parentNode","host","getOverflowAncestors","list","traverseIframes","_node$ownerDocument2","scrollableAncestor","getNearestOverflowAncestor","body","isBody","win","concat","visualViewport","frameElement","getCssDimensions","parseFloat","hasOffset","offsetWidth","offsetHeight","shouldFallback","$","unwrapElement","domElement","getBoundingClientRect","Number","isFinite","noOffsets","getVisualOffsets","offsetLeft","offsetTop","includeScale","isFixedStrategy","isFixed","clientRect","scale","visualOffsets","shouldAddVisualOffsets","floatingOffsetParent","offsetWin","currentWin","currentIFrame","iframeScale","iframeRect","clientLeft","paddingLeft","clientTop","paddingTop","topLayerSelectors","isTopLayer","selector","matches","e","getWindowScrollBarX","getClientRectFromClippingAncestor","clippingAncestor","getViewportRect","html","clientWidth","clientHeight","visualViewportBased","getDocumentRect","scroll","scrollWidth","scrollHeight","direction","getInnerBoundingClientRect","getTrueOffsetParent","polyfill","position","getContainingBlock","currentNode","getOffsetParentFn","getDimensionsFn","getDimensions","getRectRelativeToOffsetParent","isOffsetParentAnElement","offsets","offsetRect","topLayer","clippingAncestors","getClippingElementAncestors","cache","cachedResult","get","el","currentContainingBlockComputedStyle","elementIsFixed","computedStyle","currentNodeIsContaining","hasFixedPositionAncestor","stopNode","ancestor","set","_c","firstClippingAncestor","clippingRect","reduce","accRect","getClientRects","Array","from","floating_ui_dom_arrow","arrowDimensions","isYAxis","clientProp","endDiff","startDiff","arrowOffsetParent","clientSize","largestPossiblePadding","minPadding","maxPadding","center","offset","shouldAddOffset","arrow","alignmentOffset","centerOffset","floating_ui_dom_computePosition","Map","mergedOptions","platformWithCache","floating_ui_react_dom_arrow","hasOwnProperty","call","current","index","react","useLayoutEffect","useEffect","deepEqual","a","b","keys","toString","isArray","Object","key","$$typeof","getDPR","devicePixelRatio","roundByDPR","dpr","useLatestRef","ref","useRef","$7e8f5cd07187803e$export$21b07c8f274aebd5","forwardRef","props","forwardedRef","children","arrowProps","createElement","dist","WV","svg","esm_extends","Z","viewBox","preserveAspectRatio","asChild","points","$cf1ac5d9fe0e8206$var$POPPER_NAME","$cf1ac5d9fe0e8206$var$createPopperContext","$cf1ac5d9fe0e8206$export$722aac194ae923","react_context_dist","$cf1ac5d9fe0e8206$var$PopperProvider","$cf1ac5d9fe0e8206$var$usePopperContext","$cf1ac5d9fe0e8206$export$ecd4e1ccab6ed6d","__scopePopper","virtualRef","anchorProps","context","composedRefs","react_compose_refs_dist","onAnchorChange","div","$cf1ac5d9fe0e8206$var$CONTENT_NAME","$cf1ac5d9fe0e8206$var$PopperContentProvider","$cf1ac5d9fe0e8206$var$useContentContext","$cf1ac5d9fe0e8206$export$bc4ae5855d3c4fc","_arrowSize$width","_arrowSize$height","_middlewareData$arrow","_middlewareData$arrow2","_middlewareData$arrow3","_middlewareData$trans","_middlewareData$trans2","_middlewareData$hide","sideOffset","align","alignOffset","arrowPadding","avoidCollisions","collisionBoundary","collisionPadding","collisionPaddingProp","sticky","hideWhenDetached","updatePositionStrategy","onPlaced","contentProps","content","setContent","useState","setArrow","arrowSize","$db6c3485150b8e66$export$1ab7ae714698c4b8","size","setSize","undefined","react_use_layout_effect_dist","resizeObserver","ResizeObserver","entries","entry","borderSizeEntry","borderSize","observe","box","unobserve","arrowWidth","arrowHeight","hasExplicitBoundaries","detectOverflowOptions","$cf1ac5d9fe0e8206$var$isNotNull","refs","floatingStyles","isPositioned","useFloating","externalReference","externalFloating","whileElementsMounted","open","setData","latestMiddleware","setLatestMiddleware","_reference","_setReference","_floating","_setFloating","setReference","useCallback","referenceRef","setFloating","floatingRef","referenceEl","floatingEl","dataRef","hasWhileElementsMounted","whileElementsMountedRef","platformRef","update","then","fullData","isMountedRef","profiling","flushSync","useMemo","initialStyles","args","autoUpdate","frameId","ancestorScroll","ancestorResize","elementResize","layoutShift","IntersectionObserver","animationFrame","ancestors","forEach","addEventListener","passive","cleanupIo","observeMove","onMove","timeoutId","io","root","cleanup","_io","clearTimeout","disconnect","refresh","skip","threshold","insetTop","insetRight","rootMargin","isFirstUpdate","handleObserve","ratio","intersectionRatio","setTimeout","reobserveFrame","firstEntry","target","cancelAnimationFrame","requestAnimationFrame","_resizeObserver","prevRefRect","frameLoop","nextRefRect","_resizeObserver2","removeEventListener","anchor","_middlewareData$offse","diffCoords","limiter","checkMainAxis","checkCrossAxis","mainAxisCoord","crossAxisCoord","rawOffset","computedOffset","len","limitMin","limitMax","_middlewareData$offse2","isOriginSide","minSide","maxSide","limitedCoords","_middlewareData$flip","_middlewareData$flip2","_overflowsData$filter","_overflowsData$map$so","fallbackPlacements","specifiedFallbackPlacements","fallbackStrategy","fallbackAxisSideDirection","flipAlignment","isBasePlacement","getExpandedPlacements","oppositePlacement","push","getOppositeAxisPlacements","getSideList","isStart","lr","rl","map","placements","overflows","overflowsData","flip","floating_ui_utils_getAlignmentSides","mainAlignmentSide","every","nextIndex","nextPlacement","resetPlacement","d","sort","acc","apply","availableWidth","availableHeight","anchorWidth","anchorHeight","contentStyle","style","setProperty","heightSide","widthSide","overflowAvailableHeight","overflowAvailableWidth","noShift","shift","maximumClippingWidth","maximumClippingHeight","xMin","xMax","yMin","yMax","nextDimensions","$cf1ac5d9fe0e8206$var$transformOrigin","referenceHiddenOffsets","referenceHidden","escapedOffsets","escaped","placedSide","placedAlign","$cf1ac5d9fe0e8206$var$getSideAndAlignFromPlacement","handlePlaced","react_use_callback_ref_dist","W","arrowX","arrowY","cannotCenterArrow","contentZIndex","setContentZIndex","zIndex","minWidth","transformOrigin","join","dir","scope","onArrowChange","shouldHideArrow","animation","opacity","hide","$cf1ac5d9fe0e8206$var$OPPOSITE_SIDE","$cf1ac5d9fe0e8206$export$79d62cd4e10a3fd0","contentContext","baseSide","visibility","_middlewareData$arrow4","_middlewareData$arrow5","_middlewareData$arrow6","_middlewareData$arrow7","_middlewareData$arrow8","isArrowHidden","noArrowAlign","arrowXCenter","arrowYCenter","$cf1ac5d9fe0e8206$export$be92b6f5f03c0fe9","setAnchor","$cf1ac5d9fe0e8206$export$b688253958b8dfe7","$cf1ac5d9fe0e8206$export$7c6e2c02157bb7d2","$cf1ac5d9fe0e8206$export$21b07c8f274aebd5"],"sourceRoot":""}