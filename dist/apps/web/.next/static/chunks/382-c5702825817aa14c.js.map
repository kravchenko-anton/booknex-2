{"version":3,"file":"static/chunks/382-c5702825817aa14c.js","mappings":"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","sources":["webpack://_N_E/../../node_modules/@tanstack/query-core/build/lib/focusManager.mjs","webpack://_N_E/../../node_modules/@tanstack/query-core/build/lib/notifyManager.mjs","webpack://_N_E/../../node_modules/@tanstack/query-core/build/lib/onlineManager.mjs","webpack://_N_E/../../node_modules/@tanstack/query-core/build/lib/retryer.mjs","webpack://_N_E/../../node_modules/@tanstack/query-core/build/lib/subscribable.mjs","webpack://_N_E/../../node_modules/@tanstack/query-core/build/lib/utils.mjs","webpack://_N_E/../../node_modules/@tanstack/react-query/build/lib/QueryClientProvider.mjs","webpack://_N_E/<anon>"],"sourcesContent":["import { Subscribable } from './subscribable.mjs';\nimport { isServer } from './utils.mjs';\n\nclass FocusManager extends Subscribable {\n  constructor() {\n    super();\n\n    this.setup = onFocus => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus(); // Listen to visibillitychange and focus\n\n\n        window.addEventListener('visibilitychange', listener, false);\n        window.addEventListener('focus', listener, false);\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener);\n          window.removeEventListener('focus', listener);\n        };\n      }\n\n      return;\n    };\n  }\n\n  onSubscribe() {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup);\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      var _this$cleanup;\n\n      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\n      this.cleanup = undefined;\n    }\n  }\n\n  setEventListener(setup) {\n    var _this$cleanup2;\n\n    this.setup = setup;\n    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\n    this.cleanup = setup(focused => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused);\n      } else {\n        this.onFocus();\n      }\n    });\n  }\n\n  setFocused(focused) {\n    const changed = this.focused !== focused;\n\n    if (changed) {\n      this.focused = focused;\n      this.onFocus();\n    }\n  }\n\n  onFocus() {\n    this.listeners.forEach(({\n      listener\n    }) => {\n      listener();\n    });\n  }\n\n  isFocused() {\n    if (typeof this.focused === 'boolean') {\n      return this.focused;\n    } // document global can be unavailable in react native\n\n\n    if (typeof document === 'undefined') {\n      return true;\n    }\n\n    return [undefined, 'visible', 'prerender'].includes(document.visibilityState);\n  }\n\n}\nconst focusManager = new FocusManager();\n\nexport { FocusManager, focusManager };\n//# sourceMappingURL=focusManager.mjs.map\n","import { scheduleMicrotask } from './utils.mjs';\n\nfunction createNotifyManager() {\n  let queue = [];\n  let transactions = 0;\n\n  let notifyFn = callback => {\n    callback();\n  };\n\n  let batchNotifyFn = callback => {\n    callback();\n  };\n\n  const batch = callback => {\n    let result;\n    transactions++;\n\n    try {\n      result = callback();\n    } finally {\n      transactions--;\n\n      if (!transactions) {\n        flush();\n      }\n    }\n\n    return result;\n  };\n\n  const schedule = callback => {\n    if (transactions) {\n      queue.push(callback);\n    } else {\n      scheduleMicrotask(() => {\n        notifyFn(callback);\n      });\n    }\n  };\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n\n\n  const batchCalls = callback => {\n    return (...args) => {\n      schedule(() => {\n        callback(...args);\n      });\n    };\n  };\n\n  const flush = () => {\n    const originalQueue = queue;\n    queue = [];\n\n    if (originalQueue.length) {\n      scheduleMicrotask(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach(callback => {\n            notifyFn(callback);\n          });\n        });\n      });\n    }\n  };\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n\n\n  const setNotifyFunction = fn => {\n    notifyFn = fn;\n  };\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n\n\n  const setBatchNotifyFunction = fn => {\n    batchNotifyFn = fn;\n  };\n\n  return {\n    batch,\n    batchCalls,\n    schedule,\n    setNotifyFunction,\n    setBatchNotifyFunction\n  };\n} // SINGLETON\n\nconst notifyManager = createNotifyManager();\n\nexport { createNotifyManager, notifyManager };\n//# sourceMappingURL=notifyManager.mjs.map\n","import { Subscribable } from './subscribable.mjs';\nimport { isServer } from './utils.mjs';\n\nconst onlineEvents = ['online', 'offline'];\nclass OnlineManager extends Subscribable {\n  constructor() {\n    super();\n\n    this.setup = onOnline => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onOnline(); // Listen to online\n\n\n        onlineEvents.forEach(event => {\n          window.addEventListener(event, listener, false);\n        });\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          onlineEvents.forEach(event => {\n            window.removeEventListener(event, listener);\n          });\n        };\n      }\n\n      return;\n    };\n  }\n\n  onSubscribe() {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup);\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      var _this$cleanup;\n\n      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\n      this.cleanup = undefined;\n    }\n  }\n\n  setEventListener(setup) {\n    var _this$cleanup2;\n\n    this.setup = setup;\n    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\n    this.cleanup = setup(online => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online);\n      } else {\n        this.onOnline();\n      }\n    });\n  }\n\n  setOnline(online) {\n    const changed = this.online !== online;\n\n    if (changed) {\n      this.online = online;\n      this.onOnline();\n    }\n  }\n\n  onOnline() {\n    this.listeners.forEach(({\n      listener\n    }) => {\n      listener();\n    });\n  }\n\n  isOnline() {\n    if (typeof this.online === 'boolean') {\n      return this.online;\n    }\n\n    if (typeof navigator === 'undefined' || typeof navigator.onLine === 'undefined') {\n      return true;\n    }\n\n    return navigator.onLine;\n  }\n\n}\nconst onlineManager = new OnlineManager();\n\nexport { OnlineManager, onlineManager };\n//# sourceMappingURL=onlineManager.mjs.map\n","import { focusManager } from './focusManager.mjs';\nimport { onlineManager } from './onlineManager.mjs';\nimport { sleep } from './utils.mjs';\n\nfunction defaultRetryDelay(failureCount) {\n  return Math.min(1000 * 2 ** failureCount, 30000);\n}\n\nfunction canFetch(networkMode) {\n  return (networkMode != null ? networkMode : 'online') === 'online' ? onlineManager.isOnline() : true;\n}\nclass CancelledError {\n  constructor(options) {\n    this.revert = options == null ? void 0 : options.revert;\n    this.silent = options == null ? void 0 : options.silent;\n  }\n\n}\nfunction isCancelledError(value) {\n  return value instanceof CancelledError;\n}\nfunction createRetryer(config) {\n  let isRetryCancelled = false;\n  let failureCount = 0;\n  let isResolved = false;\n  let continueFn;\n  let promiseResolve;\n  let promiseReject;\n  const promise = new Promise((outerResolve, outerReject) => {\n    promiseResolve = outerResolve;\n    promiseReject = outerReject;\n  });\n\n  const cancel = cancelOptions => {\n    if (!isResolved) {\n      reject(new CancelledError(cancelOptions));\n      config.abort == null ? void 0 : config.abort();\n    }\n  };\n\n  const cancelRetry = () => {\n    isRetryCancelled = true;\n  };\n\n  const continueRetry = () => {\n    isRetryCancelled = false;\n  };\n\n  const shouldPause = () => !focusManager.isFocused() || config.networkMode !== 'always' && !onlineManager.isOnline();\n\n  const resolve = value => {\n    if (!isResolved) {\n      isResolved = true;\n      config.onSuccess == null ? void 0 : config.onSuccess(value);\n      continueFn == null ? void 0 : continueFn();\n      promiseResolve(value);\n    }\n  };\n\n  const reject = value => {\n    if (!isResolved) {\n      isResolved = true;\n      config.onError == null ? void 0 : config.onError(value);\n      continueFn == null ? void 0 : continueFn();\n      promiseReject(value);\n    }\n  };\n\n  const pause = () => {\n    return new Promise(continueResolve => {\n      continueFn = value => {\n        const canContinue = isResolved || !shouldPause();\n\n        if (canContinue) {\n          continueResolve(value);\n        }\n\n        return canContinue;\n      };\n\n      config.onPause == null ? void 0 : config.onPause();\n    }).then(() => {\n      continueFn = undefined;\n\n      if (!isResolved) {\n        config.onContinue == null ? void 0 : config.onContinue();\n      }\n    });\n  }; // Create loop function\n\n\n  const run = () => {\n    // Do nothing if already resolved\n    if (isResolved) {\n      return;\n    }\n\n    let promiseOrValue; // Execute query\n\n    try {\n      promiseOrValue = config.fn();\n    } catch (error) {\n      promiseOrValue = Promise.reject(error);\n    }\n\n    Promise.resolve(promiseOrValue).then(resolve).catch(error => {\n      var _config$retry, _config$retryDelay;\n\n      // Stop if the fetch is already resolved\n      if (isResolved) {\n        return;\n      } // Do we need to retry the request?\n\n\n      const retry = (_config$retry = config.retry) != null ? _config$retry : 3;\n      const retryDelay = (_config$retryDelay = config.retryDelay) != null ? _config$retryDelay : defaultRetryDelay;\n      const delay = typeof retryDelay === 'function' ? retryDelay(failureCount, error) : retryDelay;\n      const shouldRetry = retry === true || typeof retry === 'number' && failureCount < retry || typeof retry === 'function' && retry(failureCount, error);\n\n      if (isRetryCancelled || !shouldRetry) {\n        // We are done if the query does not need to be retried\n        reject(error);\n        return;\n      }\n\n      failureCount++; // Notify on fail\n\n      config.onFail == null ? void 0 : config.onFail(failureCount, error); // Delay\n\n      sleep(delay) // Pause if the document is not visible or when the device is offline\n      .then(() => {\n        if (shouldPause()) {\n          return pause();\n        }\n\n        return;\n      }).then(() => {\n        if (isRetryCancelled) {\n          reject(error);\n        } else {\n          run();\n        }\n      });\n    });\n  }; // Start loop\n\n\n  if (canFetch(config.networkMode)) {\n    run();\n  } else {\n    pause().then(run);\n  }\n\n  return {\n    promise,\n    cancel,\n    continue: () => {\n      const didContinue = continueFn == null ? void 0 : continueFn();\n      return didContinue ? promise : Promise.resolve();\n    },\n    cancelRetry,\n    continueRetry\n  };\n}\n\nexport { CancelledError, canFetch, createRetryer, isCancelledError };\n//# sourceMappingURL=retryer.mjs.map\n","class Subscribable {\n  constructor() {\n    this.listeners = new Set();\n    this.subscribe = this.subscribe.bind(this);\n  }\n\n  subscribe(listener) {\n    const identity = {\n      listener\n    };\n    this.listeners.add(identity);\n    this.onSubscribe();\n    return () => {\n      this.listeners.delete(identity);\n      this.onUnsubscribe();\n    };\n  }\n\n  hasListeners() {\n    return this.listeners.size > 0;\n  }\n\n  onSubscribe() {// Do nothing\n  }\n\n  onUnsubscribe() {// Do nothing\n  }\n\n}\n\nexport { Subscribable };\n//# sourceMappingURL=subscribable.mjs.map\n","// TYPES\n// UTILS\nconst isServer = typeof window === 'undefined' || 'Deno' in window;\nfunction noop() {\n  return undefined;\n}\nfunction functionalUpdate(updater, input) {\n  return typeof updater === 'function' ? updater(input) : updater;\n}\nfunction isValidTimeout(value) {\n  return typeof value === 'number' && value >= 0 && value !== Infinity;\n}\nfunction difference(array1, array2) {\n  return array1.filter(x => !array2.includes(x));\n}\nfunction replaceAt(array, index, value) {\n  const copy = array.slice(0);\n  copy[index] = value;\n  return copy;\n}\nfunction timeUntilStale(updatedAt, staleTime) {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0);\n}\nfunction parseQueryArgs(arg1, arg2, arg3) {\n  if (!isQueryKey(arg1)) {\n    return arg1;\n  }\n\n  if (typeof arg2 === 'function') {\n    return { ...arg3,\n      queryKey: arg1,\n      queryFn: arg2\n    };\n  }\n\n  return { ...arg2,\n    queryKey: arg1\n  };\n}\nfunction parseMutationArgs(arg1, arg2, arg3) {\n  if (isQueryKey(arg1)) {\n    if (typeof arg2 === 'function') {\n      return { ...arg3,\n        mutationKey: arg1,\n        mutationFn: arg2\n      };\n    }\n\n    return { ...arg2,\n      mutationKey: arg1\n    };\n  }\n\n  if (typeof arg1 === 'function') {\n    return { ...arg2,\n      mutationFn: arg1\n    };\n  }\n\n  return { ...arg1\n  };\n}\nfunction parseFilterArgs(arg1, arg2, arg3) {\n  return isQueryKey(arg1) ? [{ ...arg2,\n    queryKey: arg1\n  }, arg3] : [arg1 || {}, arg2];\n}\nfunction parseMutationFilterArgs(arg1, arg2, arg3) {\n  return isQueryKey(arg1) ? [{ ...arg2,\n    mutationKey: arg1\n  }, arg3] : [arg1 || {}, arg2];\n}\nfunction matchQuery(filters, query) {\n  const {\n    type = 'all',\n    exact,\n    fetchStatus,\n    predicate,\n    queryKey,\n    stale\n  } = filters;\n\n  if (isQueryKey(queryKey)) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false;\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false;\n    }\n  }\n\n  if (type !== 'all') {\n    const isActive = query.isActive();\n\n    if (type === 'active' && !isActive) {\n      return false;\n    }\n\n    if (type === 'inactive' && isActive) {\n      return false;\n    }\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false;\n  }\n\n  if (typeof fetchStatus !== 'undefined' && fetchStatus !== query.state.fetchStatus) {\n    return false;\n  }\n\n  if (predicate && !predicate(query)) {\n    return false;\n  }\n\n  return true;\n}\nfunction matchMutation(filters, mutation) {\n  const {\n    exact,\n    fetching,\n    predicate,\n    mutationKey\n  } = filters;\n\n  if (isQueryKey(mutationKey)) {\n    if (!mutation.options.mutationKey) {\n      return false;\n    }\n\n    if (exact) {\n      if (hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)) {\n        return false;\n      }\n    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n      return false;\n    }\n  }\n\n  if (typeof fetching === 'boolean' && mutation.state.status === 'loading' !== fetching) {\n    return false;\n  }\n\n  if (predicate && !predicate(mutation)) {\n    return false;\n  }\n\n  return true;\n}\nfunction hashQueryKeyByOptions(queryKey, options) {\n  const hashFn = (options == null ? void 0 : options.queryKeyHashFn) || hashQueryKey;\n  return hashFn(queryKey);\n}\n/**\n * Default query keys hash function.\n * Hashes the value into a stable hash.\n */\n\nfunction hashQueryKey(queryKey) {\n  return JSON.stringify(queryKey, (_, val) => isPlainObject(val) ? Object.keys(val).sort().reduce((result, key) => {\n    result[key] = val[key];\n    return result;\n  }, {}) : val);\n}\n/**\n * Checks if key `b` partially matches with key `a`.\n */\n\nfunction partialMatchKey(a, b) {\n  return partialDeepEqual(a, b);\n}\n/**\n * Checks if `b` partially matches with `a`.\n */\n\nfunction partialDeepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (typeof a !== typeof b) {\n    return false;\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return !Object.keys(b).some(key => !partialDeepEqual(a[key], b[key]));\n  }\n\n  return false;\n}\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\n\nfunction replaceEqualDeep(a, b) {\n  if (a === b) {\n    return a;\n  }\n\n  const array = isPlainArray(a) && isPlainArray(b);\n\n  if (array || isPlainObject(a) && isPlainObject(b)) {\n    const aSize = array ? a.length : Object.keys(a).length;\n    const bItems = array ? b : Object.keys(b);\n    const bSize = bItems.length;\n    const copy = array ? [] : {};\n    let equalItems = 0;\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i];\n      copy[key] = replaceEqualDeep(a[key], b[key]);\n\n      if (copy[key] === a[key]) {\n        equalItems++;\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy;\n  }\n\n  return b;\n}\n/**\n * Shallow compare objects. Only works with objects that always have the same properties.\n */\n\nfunction shallowEqualObjects(a, b) {\n  if (a && !b || b && !a) {\n    return false;\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false;\n    }\n  }\n\n  return true;\n}\nfunction isPlainArray(value) {\n  return Array.isArray(value) && value.length === Object.keys(value).length;\n} // Copied from: https://github.com/jonschlinkert/is-plain-object\n\nfunction isPlainObject(o) {\n  if (!hasObjectPrototype(o)) {\n    return false;\n  } // If has modified constructor\n\n\n  const ctor = o.constructor;\n\n  if (typeof ctor === 'undefined') {\n    return true;\n  } // If has modified prototype\n\n\n  const prot = ctor.prototype;\n\n  if (!hasObjectPrototype(prot)) {\n    return false;\n  } // If constructor does not have an Object-specific method\n\n\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false;\n  } // Most likely a plain Object\n\n\n  return true;\n}\n\nfunction hasObjectPrototype(o) {\n  return Object.prototype.toString.call(o) === '[object Object]';\n}\n\nfunction isQueryKey(value) {\n  return Array.isArray(value);\n}\nfunction isError(value) {\n  return value instanceof Error;\n}\nfunction sleep(timeout) {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout);\n  });\n}\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\n\nfunction scheduleMicrotask(callback) {\n  sleep(0).then(callback);\n}\nfunction getAbortController() {\n  if (typeof AbortController === 'function') {\n    return new AbortController();\n  }\n\n  return;\n}\nfunction replaceData(prevData, data, options) {\n  // Use prev data if an isDataEqual function is defined and returns `true`\n  if (options.isDataEqual != null && options.isDataEqual(prevData, data)) {\n    return prevData;\n  } else if (typeof options.structuralSharing === 'function') {\n    return options.structuralSharing(prevData, data);\n  } else if (options.structuralSharing !== false) {\n    // Structurally share data between prev and new data if needed\n    return replaceEqualDeep(prevData, data);\n  }\n\n  return data;\n}\n\nexport { difference, functionalUpdate, getAbortController, hashQueryKey, hashQueryKeyByOptions, isError, isPlainArray, isPlainObject, isQueryKey, isServer, isValidTimeout, matchMutation, matchQuery, noop, parseFilterArgs, parseMutationArgs, parseMutationFilterArgs, parseQueryArgs, partialDeepEqual, partialMatchKey, replaceAt, replaceData, replaceEqualDeep, scheduleMicrotask, shallowEqualObjects, sleep, timeUntilStale };\n//# sourceMappingURL=utils.mjs.map\n","'use client';\nimport * as React from 'react';\n\nconst defaultContext = /*#__PURE__*/React.createContext(undefined);\nconst QueryClientSharingContext = /*#__PURE__*/React.createContext(false); // If we are given a context, we will use it.\n// Otherwise, if contextSharing is on, we share the first and at least one\n// instance of the context across the window\n// to ensure that if React Query is used across\n// different bundles or microfrontends they will\n// all use the same **instance** of context, regardless\n// of module scoping.\n\nfunction getQueryClientContext(context, contextSharing) {\n  if (context) {\n    return context;\n  }\n\n  if (contextSharing && typeof window !== 'undefined') {\n    if (!window.ReactQueryClientContext) {\n      window.ReactQueryClientContext = defaultContext;\n    }\n\n    return window.ReactQueryClientContext;\n  }\n\n  return defaultContext;\n}\n\nconst useQueryClient = ({\n  context\n} = {}) => {\n  const queryClient = React.useContext(getQueryClientContext(context, React.useContext(QueryClientSharingContext)));\n\n  if (!queryClient) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one');\n  }\n\n  return queryClient;\n};\nconst QueryClientProvider = ({\n  client,\n  children,\n  context,\n  contextSharing = false\n}) => {\n  React.useEffect(() => {\n    client.mount();\n    return () => {\n      client.unmount();\n    };\n  }, [client]);\n\n  if (process.env.NODE_ENV !== 'production' && contextSharing) {\n    client.getLogger().error(\"The contextSharing option has been deprecated and will be removed in the next major version\");\n  }\n\n  const Context = getQueryClientContext(context, contextSharing);\n  return /*#__PURE__*/React.createElement(QueryClientSharingContext.Provider, {\n    value: !context && contextSharing\n  }, /*#__PURE__*/React.createElement(Context.Provider, {\n    value: client\n  }, children));\n};\n\nexport { QueryClientProvider, defaultContext, useQueryClient };\n//# sourceMappingURL=QueryClientProvider.mjs.map\n"],"names":["FocusManager","_subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__","l","constructor","setup","onFocus","_utils_mjs__WEBPACK_IMPORTED_MODULE_1__","sk","window","addEventListener","listener","removeEventListener","onSubscribe","cleanup","setEventListener","onUnsubscribe","hasListeners","_this$cleanup","call","undefined","_this$cleanup2","focused","setFocused","listeners","forEach","isFocused","document","includes","visibilityState","focusManager","notifyManager","createNotifyManager","queue","transactions","notifyFn","callback","batchNotifyFn","schedule","push","_utils_mjs__WEBPACK_IMPORTED_MODULE_0__","A4","flush","originalQueue","length","batch","result","batchCalls","args","setNotifyFunction","fn","setBatchNotifyFunction","onlineEvents","OnlineManager","onOnline","event","online","setOnline","isOnline","navigator","onLine","onlineManager","defaultRetryDelay","failureCount","Math","min","canFetch","networkMode","_onlineManager_mjs__WEBPACK_IMPORTED_MODULE_0__","N","CancelledError","options","revert","silent","isCancelledError","value","createRetryer","config","continueFn","promiseResolve","promiseReject","isRetryCancelled","isResolved","promise","Promise","outerResolve","outerReject","shouldPause","_focusManager_mjs__WEBPACK_IMPORTED_MODULE_1__","j","resolve","onSuccess","reject","onError","pause","continueResolve","canContinue","onPause","then","onContinue","run","promiseOrValue","error","catch","_config$retry","_config$retryDelay","retry","retryDelay","delay","shouldRetry","onFail","_utils_mjs__WEBPACK_IMPORTED_MODULE_2__","Gh","cancel","cancelOptions","abort","continue","didContinue","cancelRetry","continueRetry","Subscribable","Set","subscribe","bind","identity","add","delete","size","isServer","noop","functionalUpdate","updater","input","isValidTimeout","Infinity","timeUntilStale","updatedAt","staleTime","max","Date","now","parseQueryArgs","arg1","arg2","arg3","queryKey","queryFn","parseMutationArgs","mutationKey","mutationFn","parseFilterArgs","isQueryKey","matchQuery","filters","query","type","exact","fetchStatus","predicate","stale","queryHash","hashQueryKeyByOptions","partialDeepEqual","isActive","isStale","state","matchMutation","mutation","fetching","hashQueryKey","status","hashFn","queryKeyHashFn","JSON","stringify","_","val","isPlainObject","Object","keys","sort","reduce","key","partialMatchKey","a","b","some","shallowEqualObjects","isPlainArray","Array","isArray","o","hasObjectPrototype","ctor","prot","prototype","hasOwnProperty","toString","sleep","timeout","setTimeout","scheduleMicrotask","getAbortController","AbortController","replaceData","prevData","data","isDataEqual","structuralSharing","replaceEqualDeep","array","aSize","bItems","bSize","copy","equalItems","i","defaultContext","React","QueryClientSharingContext","getQueryClientContext","context","contextSharing","ReactQueryClientContext","useQueryClient","arguments","queryClient","QueryClientProvider","client","children","param","mount","unmount","Context","Provider"],"sourceRoot":""}