/* tslint:disable */
/* eslint-disable */
/**
 * Booknex
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: Github repository
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { AxiosInstance, AxiosPromise, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
import type { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
	DUMMY_BASE_URL,
	assertParamExists,
	createRequestFunction,
	serializeDataIfNeeded,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	toPathString
} from '../common'
// @ts-ignore
import {
	BASE_PATH,
	BaseAPI,
	COLLECTION_FORMATS,
	RequestArgs,
	RequiredError,
	operationServerMap
} from '../base'
// @ts-ignore
import { FeaturedOutput } from '../models'
// @ts-ignore
import { ShortBook } from '../models'
/**
 * CatalogApi - axios parameter creator
 * @export
 */
export const CatalogApiAxiosParamCreator = function (
	configuration?: Configuration
) {
	return {
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		featured: async (
			options: RawAxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/api/catalog/featured`
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
			let baseOptions
			if (configuration) {
				baseOptions = configuration.baseOptions
			}

			const localVarRequestOptions = {
				method: 'GET',
				...baseOptions,
				...options
			}
			const localVarHeaderParameter = {} as any
			const localVarQueryParameter = {} as any

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)

			setSearchParams(localVarUrlObj, localVarQueryParameter)
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {}
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			}

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			}
		},
		/**
		 *
		 * @param {string} query
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		search: async (
			query: string,
			options: RawAxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'query' is not null or undefined
			assertParamExists('search', 'query', query)
			const localVarPath = `/api/catalog/search/{query}`.replace(
				`{${'query'}}`,
				encodeURIComponent(String(query))
			)
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
			let baseOptions
			if (configuration) {
				baseOptions = configuration.baseOptions
			}

			const localVarRequestOptions = {
				method: 'GET',
				...baseOptions,
				...options
			}
			const localVarHeaderParameter = {} as any
			const localVarQueryParameter = {} as any

			// authentication bearer required
			// http bearer authentication required
			await setBearerAuthToObject(localVarHeaderParameter, configuration)

			setSearchParams(localVarUrlObj, localVarQueryParameter)
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {}
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			}

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			}
		}
	}
}

/**
 * CatalogApi - functional programming interface
 * @export
 */
export const CatalogApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = CatalogApiAxiosParamCreator(configuration)
	return {
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async featured(
			options?: RawAxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturedOutput>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.featured(options)
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0
			const localVarOperationServerBasePath =
				operationServerMap['CatalogApi.featured']?.[
					localVarOperationServerIndex
				]?.url
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration
				)(axios, localVarOperationServerBasePath || basePath)
		},
		/**
		 *
		 * @param {string} query
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async search(
			query: string,
			options?: RawAxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<Array<ShortBook>>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.search(
				query,
				options
			)
			const localVarOperationServerIndex = configuration?.serverIndex ?? 0
			const localVarOperationServerBasePath =
				operationServerMap['CatalogApi.search']?.[localVarOperationServerIndex]
					?.url
			return (axios, basePath) =>
				createRequestFunction(
					localVarAxiosArgs,
					globalAxios,
					BASE_PATH,
					configuration
				)(axios, localVarOperationServerBasePath || basePath)
		}
	}
}

/**
 * CatalogApi - factory interface
 * @export
 */
export const CatalogApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance
) {
	const localVarFp = CatalogApiFp(configuration)
	return {
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		featured(options?: any): AxiosPromise<FeaturedOutput> {
			return localVarFp
				.featured(options)
				.then(request => request(axios, basePath))
		},
		/**
		 *
		 * @param {string} query
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		search(query: string, options?: any): AxiosPromise<Array<ShortBook>> {
			return localVarFp
				.search(query, options)
				.then(request => request(axios, basePath))
		}
	}
}

/**
 * CatalogApi - object-oriented interface
 * @export
 * @class CatalogApi
 * @extends {BaseAPI}
 */
export class CatalogApi extends BaseAPI {
	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CatalogApi
	 */
	public featured(options?: RawAxiosRequestConfig) {
		return CatalogApiFp(this.configuration)
			.featured(options)
			.then(request => request(this.axios, this.basePath))
	}

	/**
	 *
	 * @param {string} query
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CatalogApi
	 */
	public search(query: string, options?: RawAxiosRequestConfig) {
		return CatalogApiFp(this.configuration)
			.search(query, options)
			.then(request => request(this.axios, this.basePath))
	}
}
