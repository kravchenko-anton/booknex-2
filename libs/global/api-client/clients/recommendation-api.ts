/* tslint:disable */
/* eslint-disable */
/**
 * Booknex
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: Github repository
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { ShortGenre } from '../models';
// @ts-ignore
import { UpdateRecommendationDto } from '../models';
/**
 * RecommendationApi - axios parameter creator
 * @export
 */
export const RecommendationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentRecommendation: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/recommendation/recommendation-genre`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateRecommendationDto} updateRecommendationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecommendation: async (updateRecommendationDto: UpdateRecommendationDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateRecommendationDto' is not null or undefined
            assertParamExists('updateRecommendation', 'updateRecommendationDto', updateRecommendationDto)
            const localVarPath = `/api/recommendation/update-recommendation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRecommendationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecommendationApi - functional programming interface
 * @export
 */
export const RecommendationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RecommendationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async currentRecommendation(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ShortGenre>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.currentRecommendation(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecommendationApi.currentRecommendation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateRecommendationDto} updateRecommendationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRecommendation(updateRecommendationDto: UpdateRecommendationDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRecommendation(updateRecommendationDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecommendationApi.updateRecommendation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RecommendationApi - factory interface
 * @export
 */
export const RecommendationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RecommendationApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentRecommendation(options?: any): AxiosPromise<Array<ShortGenre>> {
            return localVarFp.currentRecommendation(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateRecommendationDto} updateRecommendationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecommendation(updateRecommendationDto: UpdateRecommendationDto, options?: any): AxiosPromise<void> {
            return localVarFp.updateRecommendation(updateRecommendationDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RecommendationApi - object-oriented interface
 * @export
 * @class RecommendationApi
 * @extends {BaseAPI}
 */
export class RecommendationApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecommendationApi
     */
    public currentRecommendation(options?: RawAxiosRequestConfig) {
        return RecommendationApiFp(this.configuration).currentRecommendation(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateRecommendationDto} updateRecommendationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecommendationApi
     */
    public updateRecommendation(updateRecommendationDto: UpdateRecommendationDto, options?: RawAxiosRequestConfig) {
        return RecommendationApiFp(this.configuration).updateRecommendation(updateRecommendationDto, options).then((request) => request(this.axios, this.basePath));
    }
}

